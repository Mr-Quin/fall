{"version":3,"sources":["../../../../sourceES6/materialsLibrary/src/cell/cell.fragment.ts","../../../../sourceES6/materialsLibrary/src/cell/cell.vertex.ts","../../../../sourceES6/materialsLibrary/src/cell/cellMaterial.ts","../../../../sourceES6/materialsLibrary/src/custom/customMaterial.ts","../../../../sourceES6/materialsLibrary/src/custom/pbrCustomMaterial.ts","../../../../sourceES6/materialsLibrary/src/fire/fire.fragment.ts","../../../../sourceES6/materialsLibrary/src/fire/fire.vertex.ts","../../../../sourceES6/materialsLibrary/src/fire/fireMaterial.ts","../../../../sourceES6/materialsLibrary/src/fur/fur.fragment.ts","../../../../sourceES6/materialsLibrary/src/fur/fur.vertex.ts","../../../../sourceES6/materialsLibrary/src/fur/furMaterial.ts","../../../../sourceES6/materialsLibrary/src/gradient/gradient.fragment.ts","../../../../sourceES6/materialsLibrary/src/gradient/gradient.vertex.ts","../../../../sourceES6/materialsLibrary/src/gradient/gradientMaterial.ts","../../../../sourceES6/materialsLibrary/src/grid/grid.fragment.ts","../../../../sourceES6/materialsLibrary/src/grid/grid.vertex.ts","../../../../sourceES6/materialsLibrary/src/grid/gridMaterial.ts","../../../../sourceES6/materialsLibrary/src/lava/lava.fragment.ts","../../../../sourceES6/materialsLibrary/src/lava/lava.vertex.ts","../../../../sourceES6/materialsLibrary/src/lava/lavaMaterial.ts","../../../../sourceES6/materialsLibrary/src/mix/mix.fragment.ts","../../../../sourceES6/materialsLibrary/src/mix/mix.vertex.ts","../../../../sourceES6/materialsLibrary/src/mix/mixMaterial.ts","../../../../sourceES6/materialsLibrary/src/normal/normal.fragment.ts","../../../../sourceES6/materialsLibrary/src/normal/normal.vertex.ts","../../../../sourceES6/materialsLibrary/src/normal/normalMaterial.ts","../../../../sourceES6/materialsLibrary/src/shadowOnly/shadowOnly.fragment.ts","../../../../sourceES6/materialsLibrary/src/shadowOnly/shadowOnly.vertex.ts","../../../../sourceES6/materialsLibrary/src/shadowOnly/shadowOnlyMaterial.ts","../../../../sourceES6/materialsLibrary/src/simple/simple.fragment.ts","../../../../sourceES6/materialsLibrary/src/simple/simple.vertex.ts","../../../../sourceES6/materialsLibrary/src/simple/simpleMaterial.ts","../../../../sourceES6/materialsLibrary/src/sky/sky.fragment.ts","../../../../sourceES6/materialsLibrary/src/sky/sky.vertex.ts","../../../../sourceES6/materialsLibrary/src/sky/skyMaterial.ts","../../../../sourceES6/materialsLibrary/src/terrain/terrain.fragment.ts","../../../../sourceES6/materialsLibrary/src/terrain/terrain.vertex.ts","../../../../sourceES6/materialsLibrary/src/terrain/terrainMaterial.ts","../../../../sourceES6/materialsLibrary/src/triPlanar/triplanar.fragment.ts","../../../../sourceES6/materialsLibrary/src/triPlanar/triplanar.vertex.ts","../../../../sourceES6/materialsLibrary/src/triPlanar/triPlanarMaterial.ts","../../../../sourceES6/materialsLibrary/src/water/water.fragment.ts","../../../../sourceES6/materialsLibrary/src/water/water.vertex.ts","../../../../sourceES6/materialsLibrary/src/water/waterMaterial.ts"],"names":["shader","ShadersStore","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","POINTSIZE","FOG","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","NDOTL","CUSTOMUSERLIGHTING","CELLBASIC","DEPTHPREPASS","rebuild","name","scene","diffuseColor","_computeHighLevel","_disableLighting","_maxSimultaneousLights","needAlphaBlending","this","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","effect","_wasPreviouslyReady","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","DiffuseTextureEnabled","isReady","computeHighLevel","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","attribs","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","getClassName","clone","Clone","CellMaterial","serialize","serializationObject","Serialize","customType","Parse","source","rootUrl","RegisteredTypes","CustomParts","ShaderSpecialParts","customShaderNameResolve","Builder","FragmentShader","VertexShader","AttachAfterBind","el","_newUniformInstances","ea","split","setVector2","setVector3","setVector4","_newSamplerInstances","ReviewUniform","arr","ind","_newUniforms","_customUniform","indexOf","shaderName","_isCreatedShader","_createdShaderName","CustomMaterial","ShaderIndexer","fn_afterBind","bind","m","e","replace","Vertex_Begin","Vertex_Definitions","Vertex_MainBegin","Vertex_Before_PositionUpdated","Vertex_Before_NormalUpdated","Vertex_MainEnd","Fragment_Begin","Fragment_MainBegin","Fragment_Definitions","Fragment_Custom_Diffuse","Fragment_Custom_Alpha","Fragment_Before_Lights","Fragment_Before_Fog","Fragment_Before_FragColor","AddUniform","kind","param","shaderPart","ShaderAlebdoParts","PBRCustomMaterial","Fragment_Custom_Albedo","Fragment_Custom_MetallicRoughness","Fragment_Custom_MicroSurface","speed","_scaledDiffuse","_lastTime","_opacityTexture","_areMiscDirty","forcePointsCloud","transformFeedbackVaryings","_distortionTexture","getDeltaTime","FireMaterial","asArray","material","FromArray","id","AddTagsTo","tags","backFaceCulling","wireframe","HEIGHTMAP","HIGHLEVEL","furLength","furAngle","furColor","furOffset","furSpacing","furGravity","furSpeed","furDensity","furOcclusion","highLevelFur","_furTime","furTime","updateFur","i","_meshes","offsetFur","diffuseTexture","furTexture","heightTexture","getCaps","maxVertexTextureImageUnits","markAsUnprocessed","getCachedMaterial","_heightTexture","mat","FurMaterial","sourceMeshName","quality","executeWhenReady","sourceMesh","getMeshByName","GenerateTexture","FurifyMesh","context","getContext","fillStyle","Math","floor","random","fillRect","getSize","width","height","update","wrapU","WRAP_ADDRESSMODE","wrapV","meshes","materials","pop","EnableFor","offsetMesh","skeleton","position","Zero","parent","EMISSIVE","topColor","topColorAlpha","bottomColor","bottomColorAlpha","offset","scale","smoothness","GradientMaterial","OPACITY","TRANSPARENT","PREMULTIPLYALPHA","mainColor","Black","lineColor","Teal","gridRatio","gridOffset","majorUnitFrequency","minorUnitVisibility","opacity","preMultiplyAlpha","_gridControl","needAlphaBlendingForMesh","OpacityTextureEnabled","undefined","getProjectionMatrix","setColor3","x","y","round","z","w","GridMaterial","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","UNLIT","movingSpeed","lowFrequencySpeed","fogDensity","_unlit","noiseTexture","fogColor","LavaMaterial","SPECULARTERM","MIXMAP2","specularColor","specularPower","_mixTexture1","_diffuseTexture1","_diffuseTexture2","_diffuseTexture3","_diffuseTexture4","_mixTexture2","_diffuseTexture5","_diffuseTexture6","_diffuseTexture7","_diffuseTexture8","uScale","vScale","MixMaterial","LIGHTING","NormalMaterial","shadowColor","_activeLight","light","lightSources","shadowEnabled","lightPosition","splice","ShadowOnlyMaterial","SimpleMaterial","luminance","turbidity","rayleigh","mieCoefficient","mieDirectionalG","distance","inclination","azimuth","sunPosition","useSunPosition","cameraOffset","_cameraPosition","camera","activeCamera","cameraWorldMatrix","getWorldMatrix","theta","PI","phi","cos","sin","SkyMaterial","BUMP","mixTexture","diffuseTexture1","diffuseTexture2","diffuseTexture3","bumpTexture1","bumpTexture2","bumpTexture3","BumpTextureEnabled","_mixTexture","standardDerivatives","_bumpTexture1","_bumpTexture2","_bumpTexture3","TerrainMaterial","DIFFUSEX","DIFFUSEY","DIFFUSEZ","BUMPX","BUMPY","BUMPZ","tileSize","textures","diffuseTextureX","diffuseTextureY","diffuseTextureZ","textureDefines","normalTextureX","normalTextureY","normalTextureZ","_diffuseTextureX","_diffuseTextureY","_diffuseTextureZ","_normalTextureX","_normalTextureY","_normalTextureZ","TriPlanarMaterial","REFLECTION","LOGARITHMICDEPTH","FRESNELSEPARATE","BUMPSUPERIMPOSE","BUMPAFFECTSREFLECTION","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","EXPOSURE","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","IMAGEPROCESSINGPOSTPROCESS","renderTargetSize","windForce","windDirection","waveHeight","bumpHeight","_bumpSuperimpose","_fresnelSeparate","_bumpAffectsReflection","waterColor","colorBlendFactor","waterColor2","colorBlendFactor2","waveLength","waveSpeed","disableClipPlane","_renderTargets","_mesh","_reflectionTransform","_lastDeltaTime","_createRenderTargets","getRenderTargetTextures","reset","_reflectionRTT","_refractionRTT","_imageProcessingConfiguration","imageProcessingConfiguration","_imageProcessingObserver","onUpdateParameters","add","_markAllSubMeshesAsImageProcessingDirty","_useLogarithmicDepth","value","fragmentDepthSupported","_markAllSubMeshesAsMiscDirty","addToRenderList","node","renderList","enableRenderTargets","enable","refreshRate","getRenderList","bumpTexture","ReflectionTextureEnabled","_areImageProcessingDirty","prepareDefines","IS_REFLECTION_LINEAR","reflectionTexture","gammaSpace","IS_REFRACTION_LINEAR","refractionTexture","_waitingRenderList","getNodeByID","PrepareUniforms","PrepareSamplers","BindLogDepth","wrvp","multiply","deltaTime","applyByPostProcess","isVisible","TEXTURE_MIRROR_ADDRESSMODE","ignoreCameraViewport","savedViewMatrix","clipPlane","mirrorMatrix","onBeforeRender","positiony","FromPositionAndNormal","onAfterRender","ReflectionToRef","multiplyToRef","setTransformMatrix","cullBackFaces","_mirroredCameraPosition","TransformCoordinates","_bumpTexture","index","customRenderTargets","remove","WaterMaterial","CreateDefaultMesh","CreateGround"],"mappings":"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","file":"static/js/1.8b7f82b5.chunk.js","sourcesContent":["import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'cellPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\n{\ndiffuseBase=info.diffuse*shadow;\n#ifdef CELLBASIC\nfloat level=1.0;\nif (info.ndl<0.5)\nlevel=0.5;\ndiffuseBase.rgb*vec3(level,level,level);\n#else\nfloat ToonThresholds[4];\nToonThresholds[0]=0.95;\nToonThresholds[1]=0.5;\nToonThresholds[2]=0.2;\nToonThresholds[3]=0.03;\nfloat ToonBrightnessLevels[5];\nToonBrightnessLevels[0]=1.0;\nToonBrightnessLevels[1]=0.8;\nToonBrightnessLevels[2]=0.6;\nToonBrightnessLevels[3]=0.35;\nToonBrightnessLevels[4]=0.2;\nif (info.ndl>ToonThresholds[0])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[0];\n}\nelse if (info.ndl>ToonThresholds[1])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[1];\n}\nelse if (info.ndl>ToonThresholds[2])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[2];\n}\nelse if (info.ndl>ToonThresholds[3])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[3];\n}\nelse\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[4];\n}\n#endif\nreturn max(diffuseBase,vec3(0.2));\n}\nvoid main(void)\n{\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nlightingInfo info;\nvec3 diffuseBase=vec3(0.,0.,0.);\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var cellPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'cellVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var cellVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\n\r\nimport \"./cell.fragment\";\r\nimport \"./cell.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass CellMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public NDOTL = true;\r\n    public CUSTOMUSERLIGHTING = true;\r\n    public CELLBASIC = true;\r\n    public DEPTHPREPASS = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class CellMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"computeHighLevel\")\r\n    public _computeHighLevel: boolean = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public computeHighLevel: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new CellMaterialDefines();\r\n        }\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        defines.CELLBASIC = !this.computeHighLevel;\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"cell\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return this._diffuseTexture === texture;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"CellMaterial\";\r\n    }\r\n\r\n    public clone(name: string): CellMaterial {\r\n        return SerializationHelper.Clone<CellMaterial>(() => new CellMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.CellMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): CellMaterial {\r\n        return SerializationHelper.Parse(() => new CellMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.CellMaterial\"] = CellMaterial;\r\n","import { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\nimport { StandardMaterialDefines } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\nexport class CustomShaderStructure {\n\n    public FragmentStore: string;\n    public VertexStore: string;\n\n    constructor() { }\n}\n\nexport class ShaderSpecialParts {\n\n    constructor() { }\n\n    public Fragment_Begin: string;\n    public Fragment_Definitions: string;\n    public Fragment_MainBegin: string;\n\n    // diffuseColor\n    public Fragment_Custom_Diffuse: string;\n    // lights\n    public Fragment_Before_Lights: string;\n    // fog\n    public Fragment_Before_Fog: string;\n    // alpha\n    public Fragment_Custom_Alpha: string;\n\n    public Fragment_Before_FragColor: string;\n\n    public Vertex_Begin: string;\n    public Vertex_Definitions: string;\n    public Vertex_MainBegin: string;\n\n    // positionUpdated\n    public Vertex_Before_PositionUpdated: string;\n\n    // normalUpdated\n    public Vertex_Before_NormalUpdated: string;\n\n    // mainEnd\n    public Vertex_MainEnd: string;\n}\n\nexport class CustomMaterial extends StandardMaterial {\n    public static ShaderIndexer = 1;\n    public CustomParts: ShaderSpecialParts;\n    _isCreatedShader: boolean;\n    _createdShaderName: string;\n    _customUniform: string[];\n    _newUniforms: string[];\n    _newUniformInstances: any[];\n    _newSamplerInstances: Texture[];\n\n    public FragmentShader: string;\n    public VertexShader: string;\n\n    public AttachAfterBind(mesh: Mesh, effect: Effect) {\n        for (var el in this._newUniformInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'vec2') {\n                effect.setVector2(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec3') {\n                effect.setVector3(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec4') {\n                effect.setVector4(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'mat4') {\n                effect.setMatrix(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'float') {\n                effect.setFloat(ea[1], this._newUniformInstances[el]);\n            }\n        }\n        for (var el in this._newSamplerInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'sampler2D' && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\n                effect.setTexture(ea[1], this._newSamplerInstances[el]);\n            }\n        }\n    }\n\n    public ReviewUniform(name: string, arr: string[]): string[] {\n        if (name == \"uniform\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') == -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        if (name == \"sampler\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') != -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        return arr;\n    }\n\n    public Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: StandardMaterialDefines): string {\n\n        if (this._isCreatedShader) {\n            return this._createdShaderName;\n        }\n        this._isCreatedShader = false;\n\n        CustomMaterial.ShaderIndexer++;\n        var name: string = \"custom_\" + CustomMaterial.ShaderIndexer;\n\n        this.ReviewUniform(\"uniform\", uniforms);\n        this.ReviewUniform(\"sampler\", samplers);\n\n        var fn_afterBind = this._afterBind.bind(this);\n        this._afterBind = (m, e) => {\n            if (!e) {\n                return;\n            }\n            this.AttachAfterBind(m, e);\n            try { fn_afterBind(m, e); }\n            catch (e) { }\n        };\n\n        Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader\n            .replace('#define CUSTOM_VERTEX_BEGIN', (this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\"))\n            .replace('#define CUSTOM_VERTEX_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_BEGIN', (this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_POSITION', (this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_NORMAL', (this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_END', (this.CustomParts.Vertex_MainEnd ? this.CustomParts.Vertex_MainEnd : \"\"));\n\n        Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader\n            .replace('#define CUSTOM_FRAGMENT_BEGIN', (this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_MAIN_BEGIN', (this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE', (this.CustomParts.Fragment_Custom_Diffuse ? this.CustomParts.Fragment_Custom_Diffuse : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_ALPHA', (this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_LIGHTS', (this.CustomParts.Fragment_Before_Lights ? this.CustomParts.Fragment_Before_Lights : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FOG', (this.CustomParts.Fragment_Before_Fog ? this.CustomParts.Fragment_Before_Fog : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR', (this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\"));\n\n        this._isCreatedShader = true;\n        this._createdShaderName = name;\n\n        return name;\n    }\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n        this.CustomParts = new ShaderSpecialParts();\n        this.customShaderNameResolve = this.Builder;\n\n        this.FragmentShader = Effect.ShadersStore[\"defaultPixelShader\"];\n        this.VertexShader = Effect.ShadersStore[\"defaultVertexShader\"];\n    }\n\n    public AddUniform(name: string, kind: string, param: any): CustomMaterial {\n        if (!this._customUniform) {\n            this._customUniform = new Array();\n            this._newUniforms = new Array();\n            this._newSamplerInstances = new Array();\n            this._newUniformInstances = new Array();\n        }\n        if (param) {\n            if (kind.indexOf(\"sampler\") == -1) {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n            else {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n        }\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\n        this._newUniforms.push(name);\n\n        return this;\n    }\n\n    public Fragment_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Begin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Definitions = shaderPart;\n        return this;\n    }\n\n    public Fragment_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_Diffuse(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Diffuse = shaderPart.replace(\"result\", \"diffuseColor\");\n        return this;\n    }\n\n    public Fragment_Custom_Alpha(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\n        return this;\n    }\n\n    public Fragment_Before_Lights(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Before_Lights = shaderPart;\n        return this;\n    }\n\n    public Fragment_Before_Fog(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Before_Fog = shaderPart;\n        return this;\n    }\n\n    public Fragment_Before_FragColor(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\n        return this;\n    }\n\n    public Vertex_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Begin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Definitions = shaderPart;\n        return this;\n    }\n\n    public Vertex_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Before_PositionUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\n        return this;\n    }\n\n    public Vertex_Before_NormalUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\n        return this;\n    }\n\n    public Vertex_MainEnd(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_MainEnd = shaderPart;\n        return this;\n    }\n}\n\n_TypeStore.RegisteredTypes[\"BABYLON.CustomMaterial\"] = CustomMaterial;","import { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\nimport { PBRMaterialDefines } from \"@babylonjs/core/Materials/PBR/pbrBaseMaterial\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\nexport class ShaderAlebdoParts {\n\n    constructor() { }\n\n    public Fragment_Begin: string;\n    public Fragment_Definitions: string;\n    public Fragment_MainBegin: string;\n\n    // albedoColor\n    public Fragment_Custom_Albedo: string;\n    // lights\n    public Fragment_Before_Lights: string;\n    // roughness\n    public Fragment_Custom_MetallicRoughness: string;\n    // microsurface\n    public Fragment_Custom_MicroSurface: string;\n    // fog\n    public Fragment_Before_Fog: string;\n    // alpha\n    public Fragment_Custom_Alpha: string;\n\n    public Fragment_Before_FragColor: string;\n\n    public Vertex_Begin: string;\n    public Vertex_Definitions: string;\n    public Vertex_MainBegin: string;\n\n    // positionUpdated\n    public Vertex_Before_PositionUpdated: string;\n\n    // normalUpdated\n    public Vertex_Before_NormalUpdated: string;\n\n    // mainEnd\n    public Vertex_MainEnd: string;\n}\n\nexport class PBRCustomMaterial extends PBRMaterial {\n    public static ShaderIndexer = 1;\n    public CustomParts: ShaderAlebdoParts;\n    _isCreatedShader: boolean;\n    _createdShaderName: string;\n    _customUniform: string[];\n    _newUniforms: string[];\n    _newUniformInstances: any[];\n    _newSamplerInstances: Texture[];\n\n    public FragmentShader: string;\n    public VertexShader: string;\n\n    public AttachAfterBind(mesh: Mesh, effect: Effect) {\n        for (var el in this._newUniformInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'vec2') {\n                effect.setVector2(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec3') {\n                effect.setVector3(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec4') {\n                effect.setVector4(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'mat4') {\n                effect.setMatrix(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'float') {\n                effect.setFloat(ea[1], this._newUniformInstances[el]);\n            }\n        }\n        for (var el in this._newSamplerInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'sampler2D' && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\n                effect.setTexture(ea[1], this._newSamplerInstances[el]);\n            }\n        }\n    }\n\n    public ReviewUniform(name: string, arr: string[]): string[] {\n        if (name == \"uniform\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') == -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        if (name == \"sampler\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') != -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        return arr;\n    }\n\n    public Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: PBRMaterialDefines): string {\n\n        if (this._isCreatedShader) {\n            return this._createdShaderName;\n        }\n        this._isCreatedShader = false;\n\n        PBRCustomMaterial.ShaderIndexer++;\n        var name: string = \"custom_\" + PBRCustomMaterial.ShaderIndexer;\n\n        this.ReviewUniform(\"uniform\", uniforms);\n        this.ReviewUniform(\"sampler\", samplers);\n\n        var fn_afterBind = this._afterBind.bind(this);\n        this._afterBind = (m, e) => {\n            if (!e) {\n                return;\n            }\n            this.AttachAfterBind(m, e);\n            try { fn_afterBind(m, e); }\n            catch (e) { }\n        };\n\n        Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader\n            .replace('#define CUSTOM_VERTEX_BEGIN', (this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\"))\n            .replace('#define CUSTOM_VERTEX_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_BEGIN', (this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_POSITION', (this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_NORMAL', (this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_END', (this.CustomParts.Vertex_MainEnd ? this.CustomParts.Vertex_MainEnd : \"\"));\n\n        Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader\n            .replace('#define CUSTOM_FRAGMENT_BEGIN', (this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_MAIN_BEGIN', (this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_ALBEDO', (this.CustomParts.Fragment_Custom_Albedo ? this.CustomParts.Fragment_Custom_Albedo : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_ALPHA', (this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_LIGHTS', (this.CustomParts.Fragment_Before_Lights ? this.CustomParts.Fragment_Before_Lights : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_METALLICROUGHNESS', (this.CustomParts.Fragment_Custom_MetallicRoughness ? this.CustomParts.Fragment_Custom_MetallicRoughness : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_MICROSURFACE', (this.CustomParts.Fragment_Custom_MicroSurface ? this.CustomParts.Fragment_Custom_MicroSurface : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FOG', (this.CustomParts.Fragment_Before_Fog ? this.CustomParts.Fragment_Before_Fog : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR', (this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\"));\n\n        this._isCreatedShader = true;\n        this._createdShaderName = name;\n\n        return name;\n    }\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n        this.CustomParts = new ShaderAlebdoParts();\n        this.customShaderNameResolve = this.Builder;\n\n        this.FragmentShader = Effect.ShadersStore[\"pbrPixelShader\"];\n        this.VertexShader = Effect.ShadersStore[\"pbrVertexShader\"];\n    }\n\n    public AddUniform(name: string, kind: string, param: any): PBRCustomMaterial {\n        if (!this._customUniform) {\n            this._customUniform = new Array();\n            this._newUniforms = new Array();\n            this._newSamplerInstances = new Array();\n            this._newUniformInstances = new Array();\n        }\n        if (param) {\n            if (kind.indexOf(\"sampler\") == -1) {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n            else {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n        }\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\n        this._newUniforms.push(name);\n\n        return this;\n    }\n\n    public Fragment_Begin(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Begin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Definitions(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Definitions = shaderPart;\n        return this;\n    }\n\n    public Fragment_MainBegin(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_Albedo(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Custom_Albedo = shaderPart.replace(\"result\", \"surfaceAlbedo\");\n        return this;\n    }\n\n    public Fragment_Custom_Alpha(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\n        return this;\n    }\n\n    public Fragment_Before_Lights(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Before_Lights = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_MetallicRoughness(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Custom_MetallicRoughness = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_MicroSurface(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Custom_MicroSurface = shaderPart;\n        return this;\n    }\n\n    public Fragment_Before_Fog(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Before_Fog = shaderPart;\n        return this;\n    }\n\n    public Fragment_Before_FragColor(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\n        return this;\n    }\n\n    public Vertex_Begin(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_Begin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Definitions(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_Definitions = shaderPart;\n        return this;\n    }\n\n    public Vertex_MainBegin(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Before_PositionUpdated(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\n        return this;\n    }\n\n    public Vertex_Before_NormalUpdated(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\n        return this;\n    }\n\n    public Vertex_MainEnd(shaderPart: string): PBRCustomMaterial {\n        this.CustomParts.Vertex_MainEnd = shaderPart;\n        return this;\n    }\n}\n\n_TypeStore.RegisteredTypes[\"BABYLON.PBRCustomMaterial\"] = PBRCustomMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'firePixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\nuniform sampler2D distortionSampler;\nuniform sampler2D opacitySampler;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvec4 bx2(vec4 x)\n{\nreturn vec4(2.0)*x-vec4(1.0);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\n\nfloat alpha=1.0;\n#ifdef DIFFUSE\n\nconst float distortionAmount0=0.092;\nconst float distortionAmount1=0.092;\nconst float distortionAmount2=0.092;\nvec2 heightAttenuation=vec2(0.3,0.39);\nvec4 noise0=texture2D(distortionSampler,vDistortionCoords1);\nvec4 noise1=texture2D(distortionSampler,vDistortionCoords2);\nvec4 noise2=texture2D(distortionSampler,vDistortionCoords3);\nvec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;\nvec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);\nvec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\n#ifdef ALPHATEST\nif (opacityColor.r<0.1)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;\nbaseColor*=opacityColor;\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=vec4(baseColor.rgb,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var firePixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\n\nlet name = 'fireVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n\nuniform float time;\nuniform float speed;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n\n#ifdef DIFFUSE\nvDiffuseUV=uv;\nvDiffuseUV.y-=0.2;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n#ifdef DIFFUSE\n\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;\nvDistortionCoords1.x=uv.x;\nvDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;\nvDistortionCoords2.x=uv.x;\nvDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;\nvDistortionCoords3.x=uv.x;\nvDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var fireVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { Tags } from \"@babylonjs/core/Misc/tags\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\n\r\nimport \"./fire.fragment\";\r\nimport \"./fire.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass FireMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public UV1 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public BonesPerMesh = 0;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FireMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"distortionTexture\")\r\n    private _distortionTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public distortionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public speed = 1.0;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n    private _lastTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FireMaterialDefines();\r\n        }\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines.ALPHATEST = this._opacityTexture ? true : false;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            defines.POINTSIZE = (this.pointsCloud || scene.forcePointsCloud);\r\n            defines.FOG = (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE && this.fogEnabled);\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fire\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                {\r\n                    attributes: attribs,\r\n                    uniformsNames: [\"world\", \"view\", \"viewProjection\", \"vEyePosition\",\r\n                        \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                        \"vDiffuseInfos\",\r\n                        \"mBones\",\r\n                        \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\",\r\n                        // Fire\r\n                        \"time\", \"speed\"\r\n                    ],\r\n                    uniformBuffersNames: [],\r\n                    samplers: [\"diffuseSampler\",\r\n                        // Fire\r\n                        \"distortionSampler\", \"opacitySampler\"\r\n                    ],\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: null,\r\n                    maxSimultaneousLights: 4,\r\n                    transformFeedbackVaryings: null\r\n                }, engine), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n\r\n                this._activeEffect.setTexture(\"distortionSampler\", this._distortionTexture);\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Time\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", this._lastTime);\r\n\r\n        // Speed\r\n        this._activeEffect.setFloat(\"speed\", this.speed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n        if (this._distortionTexture && this._distortionTexture.animations && this._distortionTexture.animations.length > 0) {\r\n            results.push(this._distortionTexture);\r\n        }\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            activeTextures.push(this._distortionTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._distortionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FireMaterial\";\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n        if (this._distortionTexture) {\r\n            this._distortionTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FireMaterial {\r\n        return SerializationHelper.Clone<FireMaterial>(() => new FireMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n\r\n        var serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FireMaterial\";\r\n        serializationObject.diffuseColor = this.diffuseColor.asArray();\r\n        serializationObject.speed = this.speed;\r\n\r\n        if (this._diffuseTexture) {\r\n            serializationObject._diffuseTexture = this._diffuseTexture.serialize();\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            serializationObject._distortionTexture = this._distortionTexture.serialize();\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            serializationObject._opacityTexture = this._opacityTexture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FireMaterial {\r\n        var material = new FireMaterial(source.name, scene);\r\n\r\n        material.diffuseColor = Color3.FromArray(source.diffuseColor);\r\n        material.speed = source.speed;\r\n\r\n        material.alpha = source.alpha;\r\n\r\n        material.id = source.id;\r\n\r\n        Tags.AddTagsTo(material, source.tags);\r\n        material.backFaceCulling = source.backFaceCulling;\r\n        material.wireframe = source.wireframe;\r\n\r\n        if (source._diffuseTexture) {\r\n            material._diffuseTexture = Texture.Parse(source._diffuseTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._distortionTexture) {\r\n            material._distortionTexture = Texture.Parse(source._distortionTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._opacityTexture) {\r\n            material._opacityTexture = Texture.Parse(source._opacityTexture, scene, rootUrl);\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FireMaterial\"] = FireMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'furPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nuniform vec4 furColor;\nuniform float furLength;\nvarying vec3 vPositionW;\nvarying float vfur_length;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform float furOcclusion;\nuniform sampler2D furTexture;\nvarying vec2 vFurUV;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<fogFragmentDeclaration>\n#include<clipPlaneFragmentDeclaration>\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=furColor;\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor*=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef HIGHLEVEL\n\nvec4 furTextureColor=texture2D(furTexture,vec2(vFurUV.x,vFurUV.y));\nif (furTextureColor.a<=0.0 || furTextureColor.g<furOffset) {\ndiscard;\n}\nfloat occlusion=mix(0.0,furTextureColor.b*1.2,furOffset);\nbaseColor=vec4(baseColor.xyz*max(occlusion,furOcclusion),1.1-furOffset);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase.rgb*baseColor.rgb,0.0,1.0);\n\n#ifdef HIGHLEVEL\nvec4 color=vec4(finalDiffuse,alpha);\n#else\nfloat r=vfur_length/furLength*0.5;\nvec4 color=vec4(finalDiffuse*(0.5+r),alpha);\n#endif\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var furPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'furVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\nuniform float furLength;\nuniform float furAngle;\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform vec3 furGravity;\nuniform float furTime;\nuniform float furSpacing;\nuniform float furDensity;\n#endif\n#ifdef HEIGHTMAP\nuniform sampler2D heightTexture;\n#endif\n#ifdef HIGHLEVEL\nvarying vec2 vFurUV;\n#endif\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\nvarying float vfur_length;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n\nfloat r=Rand(position);\n#ifdef HEIGHTMAP\n#if __VERSION__>100\nvfur_length=furLength*texture(heightTexture,uv).x;\n#else\nvfur_length=furLength*texture2D(heightTexture,uv).r;\n#endif\n#else\nvfur_length=(furLength*r);\n#endif\nvec3 tangent1=vec3(normal.y,-normal.x,0);\nvec3 tangent2=vec3(-normal.z,0,normal.x);\nr=Rand(tangent1*r);\nfloat J=(2.0+4.0*r);\nr=Rand(tangent2*r);\nfloat K=(2.0+2.0*r);\ntangent1=tangent1*J+tangent2*K;\ntangent1=normalize(tangent1);\nvec3 newPosition=position+normal*vfur_length*cos(furAngle)+tangent1*vfur_length*sin(furAngle);\n#ifdef HIGHLEVEL\n\nvec3 forceDirection=vec3(0.0,0.0,0.0);\nforceDirection.x=sin(furTime+position.x*0.05)*0.2;\nforceDirection.y=cos(furTime*0.7+position.y*0.04)*0.2;\nforceDirection.z=sin(furTime*0.7+position.z*0.04)*0.2;\nvec3 displacement=vec3(0.0,0.0,0.0);\ndisplacement=furGravity+forceDirection;\nfloat displacementFactor=pow(furOffset,3.0);\nvec3 aNormal=normal;\naNormal.xyz+=displacement*displacementFactor;\nnewPosition=vec3(newPosition.x,newPosition.y,newPosition.z)+(normalize(aNormal)*furOffset*furSpacing);\n#endif\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\ngl_Position=viewProjection*finalWorld*vec4(newPosition,1.0);\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#ifdef HIGHLEVEL\nvFurUV=vDiffuseUV*furDensity;\n#endif\n#else\n#ifdef HIGHLEVEL\nvFurUV=uv*furDensity;\n#endif\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var furVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { Tags } from \"@babylonjs/core/Misc/tags\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nimport \"./fur.fragment\";\r\nimport \"./fur.vertex\";\r\n\r\nclass FurMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public HEIGHTMAP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public HIGHLEVEL = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FurMaterial extends PushMaterial {\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"heightTexture\")\r\n    private _heightTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public heightTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public furLength: number = 1;\r\n\r\n    @serialize()\r\n    public furAngle: number = 0;\r\n\r\n    @serializeAsColor3()\r\n    public furColor = new Color3(0.44, 0.21, 0.02);\r\n\r\n    @serialize()\r\n    public furOffset: number = 0.0;\r\n\r\n    @serialize()\r\n    public furSpacing: number = 12;\r\n\r\n    @serializeAsVector3()\r\n    public furGravity = new Vector3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public furSpeed: number = 100;\r\n\r\n    @serialize()\r\n    public furDensity: number = 20;\r\n\r\n    @serialize()\r\n    public furOcclusion: number = 0.0;\r\n\r\n    public furTexture: DynamicTexture;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize()\r\n    public highLevelFur: boolean = true;\r\n\r\n    public _meshes: AbstractMesh[];\r\n\r\n    private _renderId: number;\r\n\r\n    private _furTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    @serialize()\r\n    public get furTime() {\r\n        return this._furTime;\r\n    }\r\n\r\n    public set furTime(furTime: number) {\r\n        this._furTime = furTime;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public updateFur(): void {\r\n        for (var i = 1; i < this._meshes.length; i++) {\r\n            var offsetFur = <FurMaterial>this._meshes[i].material;\r\n\r\n            offsetFur.furLength = this.furLength;\r\n            offsetFur.furAngle = this.furAngle;\r\n            offsetFur.furGravity = this.furGravity;\r\n            offsetFur.furSpacing = this.furSpacing;\r\n            offsetFur.furSpeed = this.furSpeed;\r\n            offsetFur.furColor = this.furColor;\r\n            offsetFur.diffuseTexture = this.diffuseTexture;\r\n            offsetFur.furTexture = this.furTexture;\r\n            offsetFur.highLevelFur = this.highLevelFur;\r\n            offsetFur.furTime = this.furTime;\r\n            offsetFur.furDensity = this.furDensity;\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FurMaterialDefines();\r\n        }\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this.diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this.heightTexture && engine.getCaps().maxVertexTextureImageUnits) {\r\n                    if (!this.heightTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.HEIGHTMAP = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        if (this.highLevelFur !== defines.HIGHLEVEL) {\r\n            defines.HIGHLEVEL = true;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fur\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\",\r\n                \"furLength\", \"furAngle\", \"furColor\", \"furOffset\", \"furGravity\", \"furTime\", \"furSpacing\", \"furDensity\", \"furOcclusion\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\",\r\n                \"heightTexture\", \"furTexture\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            if (this._heightTexture) {\r\n                this._activeEffect.setTexture(\"heightTexture\", this._heightTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"furLength\", this.furLength);\r\n        this._activeEffect.setFloat(\"furAngle\", this.furAngle);\r\n        this._activeEffect.setColor4(\"furColor\", this.furColor, 1.0);\r\n\r\n        if (this.highLevelFur) {\r\n            this._activeEffect.setVector3(\"furGravity\", this.furGravity);\r\n            this._activeEffect.setFloat(\"furOffset\", this.furOffset);\r\n            this._activeEffect.setFloat(\"furSpacing\", this.furSpacing);\r\n            this._activeEffect.setFloat(\"furDensity\", this.furDensity);\r\n            this._activeEffect.setFloat(\"furOcclusion\", this.furOcclusion);\r\n\r\n            this._furTime += this.getScene().getEngine().getDeltaTime() / this.furSpeed;\r\n            this._activeEffect.setFloat(\"furTime\", this._furTime);\r\n\r\n            this._activeEffect.setTexture(\"furTexture\", this.furTexture);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        if (this.heightTexture && this.heightTexture.animations && this.heightTexture.animations.length > 0) {\r\n            results.push(this.heightTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._heightTexture) {\r\n            activeTextures.push(this._heightTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._heightTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        if (this._meshes) {\r\n            for (var i = 1; i < this._meshes.length; i++) {\r\n                let mat = this._meshes[i].material;\r\n\r\n                if (mat) {\r\n                    mat.dispose(forceDisposeEffect);\r\n                }\r\n                this._meshes[i].dispose();\r\n            }\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FurMaterial {\r\n        return SerializationHelper.Clone(() => new FurMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.FurMaterial\";\r\n\r\n        if (this._meshes) {\r\n            serializationObject.sourceMeshName = this._meshes[0].name;\r\n            serializationObject.quality = this._meshes.length;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FurMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FurMaterial {\r\n        var material = SerializationHelper.Parse(() => new FurMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.sourceMeshName && material.highLevelFur) {\r\n            scene.executeWhenReady(() => {\r\n                var sourceMesh = <Mesh>scene.getMeshByName(source.sourceMeshName);\r\n                if (sourceMesh) {\r\n                    var furTexture = FurMaterial.GenerateTexture(\"Fur Texture\", scene);\r\n                    material.furTexture = furTexture;\r\n                    FurMaterial.FurifyMesh(sourceMesh, source.quality);\r\n                }\r\n            });\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    public static GenerateTexture(name: string, scene: Scene): DynamicTexture {\r\n        // Generate fur textures\r\n        var texture = new DynamicTexture(\"FurTexture \" + name, 256, scene, true);\r\n        var context = texture.getContext();\r\n\r\n        for (var i = 0; i < 20000; ++i) {\r\n            context.fillStyle = \"rgba(255, \" + Math.floor(Math.random() * 255) + \", \" + Math.floor(Math.random() * 255) + \", 1)\";\r\n            context.fillRect((Math.random() * texture.getSize().width), (Math.random() * texture.getSize().height), 2, 2);\r\n        }\r\n\r\n        texture.update(false);\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        return texture;\r\n    }\r\n\r\n    // Creates and returns an array of meshes used as shells for the Fur Material\r\n    // that can be disposed later in your code\r\n    // The quality is in interval [0, 100]\r\n    public static FurifyMesh(sourceMesh: Mesh, quality: number): Mesh[] {\r\n        var meshes = [sourceMesh];\r\n        var mat: FurMaterial = <FurMaterial>sourceMesh.material;\r\n        var i;\r\n\r\n        if (!(mat instanceof FurMaterial)) {\r\n            throw \"The material of the source mesh must be a Fur Material\";\r\n        }\r\n\r\n        for (i = 1; i < quality; i++) {\r\n            var offsetFur = new FurMaterial(mat.name + i, sourceMesh.getScene());\r\n            sourceMesh.getScene().materials.pop();\r\n            Tags.EnableFor(offsetFur);\r\n            Tags.AddTagsTo(offsetFur, \"furShellMaterial\");\r\n\r\n            offsetFur.furLength = mat.furLength;\r\n            offsetFur.furAngle = mat.furAngle;\r\n            offsetFur.furGravity = mat.furGravity;\r\n            offsetFur.furSpacing = mat.furSpacing;\r\n            offsetFur.furSpeed = mat.furSpeed;\r\n            offsetFur.furColor = mat.furColor;\r\n            offsetFur.diffuseTexture = mat.diffuseTexture;\r\n            offsetFur.furOffset = i / quality;\r\n            offsetFur.furTexture = mat.furTexture;\r\n            offsetFur.highLevelFur = mat.highLevelFur;\r\n            offsetFur.furTime = mat.furTime;\r\n            offsetFur.furDensity = mat.furDensity;\r\n\r\n            var offsetMesh = sourceMesh.clone(sourceMesh.name + i) as Mesh;\r\n\r\n            offsetMesh.material = offsetFur;\r\n            offsetMesh.skeleton = sourceMesh.skeleton;\r\n            offsetMesh.position = Vector3.Zero();\r\n            meshes.push(offsetMesh);\r\n        }\r\n\r\n        for (i = 1; i < meshes.length; i++) {\r\n            meshes[i].parent = sourceMesh;\r\n        }\r\n\r\n        (<FurMaterial>sourceMesh.material)._meshes = meshes;\r\n\r\n        return meshes;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FurMaterial\"] = FurMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'gradientPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\n\nuniform vec4 topColor;\nuniform vec4 bottomColor;\nuniform float offset;\nuniform float scale;\nuniform float smoothness;\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\nfloat h=vPosition.y*scale+offset;\nfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\nvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\n\nvec3 diffuseColor=baseColor.rgb;\n\nfloat alpha=baseColor.a;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\n#ifdef EMISSIVE\nvec3 diffuseBase=baseColor.rgb;\n#else\nvec3 diffuseBase=vec3(0.,0.,0.);\n#endif\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gradientPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'gradientVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\nvPosition=position;\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gradientVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./gradient.fragment\";\r\nimport \"./gradient.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass GradientMaterialDefines extends MaterialDefines {\r\n    public EMISSIVE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class GradientMaterial extends PushMaterial {\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    // The gradient top color, red by default\r\n    @serializeAsColor3()\r\n    public topColor = new Color3(1, 0, 0);\r\n\r\n    @serialize()\r\n    public topColorAlpha = 1.0;\r\n\r\n    // The gradient top color, blue by default\r\n    @serializeAsColor3()\r\n    public bottomColor = new Color3(0, 0, 1);\r\n\r\n    @serialize()\r\n    public bottomColorAlpha = 1.0;\r\n\r\n    // Gradient offset\r\n    @serialize()\r\n    public offset = 0;\r\n\r\n    @serialize()\r\n    public scale = 1.0;\r\n\r\n    @serialize()\r\n    public smoothness = 1.0;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0 || this.topColorAlpha < 1.0 || this.bottomColorAlpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GradientMaterialDefines();\r\n        }\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        defines.EMISSIVE = this._disableLighting;\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"gradient\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\",\r\n                \"topColor\", \"bottomColor\", \"offset\", \"smoothness\", \"scale\"\r\n            ];\r\n            var samplers: string[] = [];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setColor4(\"topColor\", this.topColor, this.topColorAlpha);\r\n        this._activeEffect.setColor4(\"bottomColor\", this.bottomColor, this.bottomColorAlpha);\r\n        this._activeEffect.setFloat(\"offset\", this.offset);\r\n        this._activeEffect.setFloat(\"scale\", this.scale);\r\n        this._activeEffect.setFloat(\"smoothness\", this.smoothness);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GradientMaterial {\r\n        return SerializationHelper.Clone(() => new GradientMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GradientMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GradientMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial {\r\n        return SerializationHelper.Parse(() => new GradientMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GradientMaterial\"] = GradientMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'gridPixelShader';\nlet shader = `#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\nuniform vec3 mainColor;\nuniform vec3 lineColor;\nuniform vec4 gridControl;\nuniform vec3 gridOffset;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogFragmentDeclaration>\n\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform sampler2D opacitySampler;\nuniform vec2 vOpacityInfos;\n#endif\nfloat getVisibility(float position) {\n\nfloat majorGridFrequency=gridControl.y;\nif (floor(position+0.5) == floor(position/majorGridFrequency+0.5)*majorGridFrequency)\n{\nreturn 1.0;\n}\nreturn gridControl.z;\n}\nfloat getAnisotropicAttenuation(float differentialLength) {\nconst float maxNumberOfLines=10.0;\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\n}\nfloat isPointOnLine(float position,float differentialLength) {\nfloat fractionPartOfPosition=position-floor(position+0.5);\nfractionPartOfPosition/=differentialLength;\nfractionPartOfPosition=clamp(fractionPartOfPosition,-1.,1.);\nfloat result=0.5+0.5*cos(fractionPartOfPosition*PI);\nreturn result;\n}\nfloat contributionOnAxis(float position) {\nfloat differentialLength=length(vec2(dFdx(position),dFdy(position)));\ndifferentialLength*=SQRT2;\n\nfloat result=isPointOnLine(position,differentialLength);\n\nfloat visibility=getVisibility(position);\nresult*=visibility;\n\nfloat anisotropicAttenuation=getAnisotropicAttenuation(differentialLength);\nresult*=anisotropicAttenuation;\nreturn result;\n}\nfloat normalImpactOnAxis(float x) {\nfloat normalImpact=clamp(1.0-3.0*abs(x*x*x),0.0,1.0);\nreturn normalImpact;\n}\nvoid main(void) {\n\nfloat gridRatio=gridControl.x;\nvec3 gridPos=(vPosition+gridOffset.xyz)/gridRatio;\n\nfloat x=contributionOnAxis(gridPos.x);\nfloat y=contributionOnAxis(gridPos.y);\nfloat z=contributionOnAxis(gridPos.z);\n\nvec3 normal=normalize(vNormal);\nx*=normalImpactOnAxis(normal.x);\ny*=normalImpactOnAxis(normal.y);\nz*=normalImpactOnAxis(normal.z);\n\nfloat grid=clamp(x+y+z,0.,1.);\n\nvec3 color=mix(mainColor,lineColor,grid);\n#ifdef FOG\n#include<fogFragment>\n#endif\nfloat opacity=1.0;\n#ifdef TRANSPARENT\nopacity=clamp(grid,0.08,gridControl.w*grid);\n#endif\n#ifdef OPACITY\nopacity*=texture2D(opacitySampler,vOpacityUV).a;\n#endif\n\ngl_FragColor=vec4(color.rgb,opacity);\n#ifdef TRANSPARENT\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*=opacity;\n#endif\n#else\n#endif\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gridPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\n\nlet name = 'gridVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#include<instancesDeclaration>\n\nuniform mat4 projection;\nuniform mat4 view;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogVertexDeclaration>\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform mat4 opacityMatrix;\nuniform vec2 vOpacityInfos;\n#endif\nvoid main(void) {\n#include<instancesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\n#include<fogVertex>\nvec4 cameraSpacePosition=view*worldPos;\ngl_Position=projection*cameraSpacePosition;\n#ifdef OPACITY\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\nif (vOpacityInfos.x == 0.)\n{\nvOpacityUV=vec2(opacityMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvOpacityUV=vec2(opacityMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\nvPosition=position;\nvNormal=normal;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gridVertexShader = { name, shader };\n","import { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix, Vector4, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./grid.fragment\";\r\nimport \"./grid.vertex\";\r\n\r\nclass GridMaterialDefines extends MaterialDefines {\r\n    public OPACITY = false;\r\n    public TRANSPARENT = false;\r\n    public FOG = false;\r\n    public PREMULTIPLYALPHA = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * The grid materials allows you to wrap any shape with a grid.\r\n * Colors are customizable.\r\n */\r\nexport class GridMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Main color of the grid (e.g. between lines)\r\n     */\r\n    @serializeAsColor3()\r\n    public mainColor = Color3.Black();\r\n\r\n    /**\r\n     * Color of the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public lineColor = Color3.Teal();\r\n\r\n    /**\r\n     * The scale of the grid compared to unit.\r\n     */\r\n    @serialize()\r\n    public gridRatio = 1.0;\r\n\r\n    /**\r\n     * Allows setting an offset for the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public gridOffset = Vector3.Zero();\r\n\r\n    /**\r\n     * The frequency of thicker lines.\r\n     */\r\n    @serialize()\r\n    public majorUnitFrequency = 10;\r\n\r\n    /**\r\n     * The visibility of minor units in the grid.\r\n     */\r\n    @serialize()\r\n    public minorUnitVisibility = 0.33;\r\n\r\n    /**\r\n     * The grid opacity outside of the lines.\r\n     */\r\n    @serialize()\r\n    public opacity = 1.0;\r\n\r\n    /**\r\n     * Determine RBG output is premultiplied by alpha value.\r\n     */\r\n    @serialize()\r\n    public preMultiplyAlpha = false;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: BaseTexture;\r\n\r\n    private _gridControl: Vector4 = new Vector4(this.gridRatio, this.majorUnitFrequency, this.minorUnitVisibility, this.opacity);\r\n\r\n    private _renderId: number;\r\n\r\n    /**\r\n     * constructor\r\n     * @param name The name given to the material in order to identify it afterwards.\r\n     * @param scene The scene the material is used in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Returns wehter or not the grid requires alpha blending.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.opacity < 1.0 || this._opacityTexture && this._opacityTexture.isReady();\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending();\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GridMaterialDefines();\r\n        }\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines.TRANSPARENT !== (this.opacity < 1.0)) {\r\n            defines.TRANSPARENT = !defines.TRANSPARENT;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        if (defines.PREMULTIPLYALPHA != this.preMultiplyAlpha) {\r\n            defines.PREMULTIPLYALPHA = !defines.PREMULTIPLYALPHA;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.OPACITY = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, false, this.fogEnabled, false, defines);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, scene.getEngine(), defines, !!useInstances);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Attributes\r\n            MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n            var attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Defines\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(\"grid\",\r\n                attribs,\r\n                [\"projection\", \"mainColor\", \"lineColor\", \"gridControl\", \"gridOffset\", \"vFogInfos\", \"vFogColor\", \"world\", \"view\",\r\n                    \"opacityMatrix\", \"vOpacityInfos\"],\r\n                [\"opacitySampler\"],\r\n                join,\r\n                undefined,\r\n                this.onCompiled,\r\n                this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        if (!defines.INSTANCES) {\r\n            this.bindOnlyWorldMatrix(world);\r\n        }\r\n        this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        this._activeEffect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n\r\n        // Uniforms\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor3(\"mainColor\", this.mainColor);\r\n            this._activeEffect.setColor3(\"lineColor\", this.lineColor);\r\n\r\n            this._activeEffect.setVector3(\"gridOffset\", this.gridOffset);\r\n\r\n            this._gridControl.x = this.gridRatio;\r\n            this._gridControl.y = Math.round(this.majorUnitFrequency);\r\n            this._gridControl.z = this.minorUnitVisibility;\r\n            this._gridControl.w = this.opacity;\r\n            this._activeEffect.setVector4(\"gridControl\", this._gridControl);\r\n\r\n            if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                this._activeEffect.setFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                this._activeEffect.setMatrix(\"opacityMatrix\", this._opacityTexture.getTextureMatrix());\r\n            }\r\n        }\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and its associated resources.\r\n     * @param forceDisposeEffect will also dispose the used effect when true\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GridMaterial {\r\n        return SerializationHelper.Clone(() => new GridMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GridMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GridMaterial\";\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GridMaterial {\r\n        return SerializationHelper.Parse(() => new GridMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GridMaterial\"] = GridMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'lavaPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n\nuniform float time;\nuniform float speed;\nuniform float movingSpeed;\nuniform vec3 fogColor;\nuniform sampler2D noiseTexture;\nuniform float fogDensity;\n\nvarying float noise;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nfloat random( vec3 scale,float seed ){\nreturn fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;\n}\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\n\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );\nvec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time*0.02;\nvec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;\nT1.x+=noiseTex.x*2.0;\nT1.y+=noiseTex.y*2.0;\nT2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;\nT2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;\nfloat p=texture2D( noiseTexture,T1*3.0 ).a;\nvec4 lavaColor=texture2D( diffuseSampler,T2*4.0);\nvec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );\nbaseColor=temp;\nfloat depth=gl_FragCoord.z*4.0;\nconst float LOG2=1.442695;\nfloat fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );\nfogFactor=1.0-clamp( fogFactor,0.0,1.0 );\nbaseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );\ndiffuseColor=baseColor.rgb;\n\n\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef UNLIT\nvec3 diffuseBase=vec3(1.,1.,1.);\n#else\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var lavaPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'lavaVertexShader';\nlet shader = `precision highp float;\n\nuniform float time;\nuniform float lowFrequencySpeed;\n\nvarying float noise;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n\n\nvec3 mod289(vec3 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 mod289(vec4 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 permute(vec4 x)\n{\nreturn mod289(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\nreturn 1.79284291400159-0.85373472095314*r;\n}\nvec3 fade(vec3 t) {\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise(vec3 P,vec3 rep)\n{\nvec3 Pi0=mod(floor(P),rep);\nvec3 Pi1=mod(Pi0+vec3(1.0),rep);\nPi0=mod289(Pi0);\nPi1=mod289(Pi1);\nvec3 Pf0=fract(P);\nvec3 Pf1=Pf0-vec3(1.0);\nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);\nvec4 iy=vec4(Pi0.yy,Pi1.yy);\nvec4 iz0=Pi0.zzzz;\nvec4 iz1=Pi1.zzzz;\nvec4 ixy=permute(permute(ix)+iy);\nvec4 ixy0=permute(ixy+iz0);\nvec4 ixy1=permute(ixy+iz1);\nvec4 gx0=ixy0*(1.0/7.0);\nvec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;\ngx0=fract(gx0);\nvec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);\nvec4 sz0=step(gz0,vec4(0.0));\ngx0-=sz0*(step(0.0,gx0)-0.5);\ngy0-=sz0*(step(0.0,gy0)-0.5);\nvec4 gx1=ixy1*(1.0/7.0);\nvec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;\ngx1=fract(gx1);\nvec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);\nvec4 sz1=step(gz1,vec4(0.0));\ngx1-=sz1*(step(0.0,gx1)-0.5);\ngy1-=sz1*(step(0.0,gy1)-0.5);\nvec3 g000=vec3(gx0.x,gy0.x,gz0.x);\nvec3 g100=vec3(gx0.y,gy0.y,gz0.y);\nvec3 g010=vec3(gx0.z,gy0.z,gz0.z);\nvec3 g110=vec3(gx0.w,gy0.w,gz0.w);\nvec3 g001=vec3(gx1.x,gy1.x,gz1.x);\nvec3 g101=vec3(gx1.y,gy1.y,gz1.y);\nvec3 g011=vec3(gx1.z,gy1.z,gz1.z);\nvec3 g111=vec3(gx1.w,gy1.w,gz1.w);\nvec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));\ng000*=norm0.x;\ng010*=norm0.y;\ng100*=norm0.z;\ng110*=norm0.w;\nvec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));\ng001*=norm1.x;\ng011*=norm1.y;\ng101*=norm1.z;\ng111*=norm1.w;\nfloat n000=dot(g000,Pf0);\nfloat n100=dot(g100,vec3(Pf1.x,Pf0.yz));\nfloat n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));\nfloat n110=dot(g110,vec3(Pf1.xy,Pf0.z));\nfloat n001=dot(g001,vec3(Pf0.xy,Pf1.z));\nfloat n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));\nfloat n011=dot(g011,vec3(Pf0.x,Pf1.yz));\nfloat n111=dot(g111,Pf1);\nvec3 fade_xyz=fade(Pf0);\nvec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);\nvec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);\nfloat n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);\nreturn 2.2*n_xyz;\n}\n\nfloat turbulence( vec3 p ) {\nfloat w=100.0;\nfloat t=-.5;\nfor (float f=1.0 ; f<=10.0 ; f++ ){\nfloat power=pow( 2.0,f );\nt+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );\n}\nreturn t;\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n#ifdef NORMAL\n\nnoise=10.0*-.10*turbulence( .5*normal+time*1.15 );\n\nfloat b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );\n\nfloat displacement =-1.5*noise+b;\n\nvec3 newPosition=position+normal*displacement;\ngl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var lavaVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\nimport \"./lava.fragment\";\nimport \"./lava.vertex\";\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\n\nclass LavaMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public UNLIT = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class LavaMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n\n    @serializeAsTexture()\n    public noiseTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public fogColor: Color3;\n\n    @serialize()\n    public speed: number = 1;\n\n    @serialize()\n    public movingSpeed: number = 1;\n\n    @serialize()\n    public lowFrequencySpeed: number = 1;\n\n    @serialize()\n    public fogDensity: number = 0.15;\n\n    private _lastTime: number = 0;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"unlit\")\n    private _unlit = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public unlit: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    private _scaledDiffuse = new Color3();\n    private _renderId: number;\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    // Methods\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new LavaMaterialDefines();\n        }\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        // Lights\n        defines._needNormals = true;\n\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"lava\";\n            var join = defines.toString();\n\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\",\n                \"time\", \"speed\", \"movingSpeed\",\n                \"fogColor\", \"fogDensity\", \"lowFrequencySpeed\"\n            ];\n\n            var samplers = [\"diffuseSampler\",\n                \"noiseTexture\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <IEffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\n                }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        defines.UNLIT = this._unlit;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n\n            if (this.noiseTexture) {\n                this._activeEffect.setTexture(\"noiseTexture\", this.noiseTexture);\n            }\n\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        this._lastTime += scene.getEngine().getDeltaTime();\n        this._activeEffect.setFloat(\"time\", this._lastTime * this.speed / 1000);\n\n        if (!this.fogColor) {\n            this.fogColor = Color3.Black();\n        }\n        this._activeEffect.setColor3(\"fogColor\", this.fogColor);\n        this._activeEffect.setFloat(\"fogDensity\", this.fogDensity);\n\n        this._activeEffect.setFloat(\"lowFrequencySpeed\", this.lowFrequencySpeed);\n        this._activeEffect.setFloat(\"movingSpeed\", this.movingSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n\n        if (this.noiseTexture && this.noiseTexture.animations && this.noiseTexture.animations.length > 0) {\n            results.push(this.noiseTexture);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        if (this.noiseTexture) {\n            this.noiseTexture.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): LavaMaterial {\n        return SerializationHelper.Clone(() => new LavaMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.LavaMaterial\";\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"LavaMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): LavaMaterial {\n        return SerializationHelper.Parse(() => new LavaMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n\n_TypeStore.RegisteredTypes[\"BABYLON.LavaMaterial\"] = LavaMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'mixPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D mixMap1Sampler;\nuniform vec2 vTextureInfos;\n#ifdef MIXMAP2\nuniform sampler2D mixMap2Sampler;\n#endif\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform sampler2D diffuse4Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\nuniform vec2 diffuse4Infos;\n#ifdef MIXMAP2\nuniform sampler2D diffuse5Sampler;\nuniform sampler2D diffuse6Sampler;\nuniform sampler2D diffuse7Sampler;\nuniform sampler2D diffuse8Sampler;\nuniform vec2 diffuse5Infos;\nuniform vec2 diffuse6Infos;\nuniform vec2 diffuse7Infos;\nuniform vec2 diffuse8Infos;\n#endif\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 finalMixColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef MIXMAP2\nvec4 mixColor2=vec4(1.,1.,1.,1.);\n#endif\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\n#include<depthPrePass>\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\nvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\ndiffuse1Color.rgb*=mixColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\ndiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\n#ifdef MIXMAP2\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\nvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\nvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\nvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\ndiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\ndiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\ndiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\n#endif\n#endif\n#ifdef VERTEXCOLOR\nfinalMixColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var mixPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'mixVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var mixVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./mix.fragment\";\r\nimport \"./mix.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass MixMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public MIXMAP2 = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MixMaterial extends PushMaterial {\r\n    /**\r\n     * Mix textures\r\n     */\r\n\r\n    @serializeAsTexture(\"mixTexture1\")\r\n    private _mixTexture1: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture1: BaseTexture;\r\n\r\n    @serializeAsTexture(\"mixTexture2\")\r\n    private _mixTexture2: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture2: BaseTexture;\r\n\r\n    /**\r\n     * Diffuse textures\r\n     */\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture4: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture4: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture5: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture5: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture6: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture6: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture7: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture7: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture8: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture8: Texture;\r\n\r\n    /**\r\n     * Uniforms\r\n     */\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new MixMaterialDefines();\r\n        }\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (!this._mixTexture1 || !this._mixTexture1.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            defines._needUVs = true;\r\n\r\n            if (MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture1 || !this._diffuseTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines.DIFFUSE = true;\r\n\r\n                if (!this._diffuseTexture2 || !this._diffuseTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this._diffuseTexture3 || !this._diffuseTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this._diffuseTexture4 || !this._diffuseTexture4.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                if (this._mixTexture2) {\r\n                    if (!this._mixTexture2.isReady()) {\r\n                        return false;\r\n                    }\r\n\r\n                    defines.MIXMAP2 = true;\r\n\r\n                    if (!this._diffuseTexture5 || !this._diffuseTexture5.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture6 || !this._diffuseTexture6.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture7 || !this._diffuseTexture7.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture8 || !this._diffuseTexture8.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"mix\";\r\n            var join = defines.toString();\r\n            var uniforms = [\r\n                \"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\", \"diffuse4Infos\",\r\n                \"diffuse5Infos\", \"diffuse6Infos\", \"diffuse7Infos\", \"diffuse8Infos\"\r\n            ];\r\n            var samplers = [\r\n                \"mixMap1Sampler\", \"mixMap2Sampler\",\r\n                \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\", \"diffuse4Sampler\",\r\n                \"diffuse5Sampler\", \"diffuse6Sampler\", \"diffuse7Sampler\", \"diffuse8Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._mixTexture1) {\r\n                this._activeEffect.setTexture(\"mixMap1Sampler\", this._mixTexture1);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture1.getTextureMatrix());\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                    if (this._diffuseTexture4) {\r\n                        this._activeEffect.setTexture(\"diffuse4Sampler\", this._diffuseTexture4);\r\n                        this._activeEffect.setFloat2(\"diffuse4Infos\", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._mixTexture2) {\r\n                this._activeEffect.setTexture(\"mixMap2Sampler\", this._mixTexture2);\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture5) {\r\n                        this._activeEffect.setTexture(\"diffuse5Sampler\", this._diffuseTexture5);\r\n                        this._activeEffect.setFloat2(\"diffuse5Infos\", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);\r\n                    }\r\n                    if (this._diffuseTexture6) {\r\n                        this._activeEffect.setTexture(\"diffuse6Sampler\", this._diffuseTexture6);\r\n                        this._activeEffect.setFloat2(\"diffuse6Infos\", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);\r\n                    }\r\n                    if (this._diffuseTexture7) {\r\n                        this._activeEffect.setTexture(\"diffuse7Sampler\", this._diffuseTexture7);\r\n                        this._activeEffect.setFloat2(\"diffuse7Infos\", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);\r\n                    }\r\n                    if (this._diffuseTexture8) {\r\n                        this._activeEffect.setTexture(\"diffuse8Sampler\", this._diffuseTexture8);\r\n                        this._activeEffect.setFloat2(\"diffuse8Infos\", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {\r\n            results.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {\r\n            results.push(this._mixTexture2);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1) {\r\n            activeTextures.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._diffuseTexture4) {\r\n            activeTextures.push(this._diffuseTexture4);\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2) {\r\n            activeTextures.push(this._mixTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture5) {\r\n            activeTextures.push(this._diffuseTexture5);\r\n        }\r\n\r\n        if (this._diffuseTexture6) {\r\n            activeTextures.push(this._diffuseTexture6);\r\n        }\r\n\r\n        if (this._diffuseTexture7) {\r\n            activeTextures.push(this._diffuseTexture7);\r\n        }\r\n\r\n        if (this._diffuseTexture8) {\r\n            activeTextures.push(this._diffuseTexture8);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture4 === texture) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture5 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture6 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture7 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture8 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._mixTexture1) {\r\n            this._mixTexture1.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MixMaterial {\r\n        return SerializationHelper.Clone(() => new MixMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MixMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MixMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MixMaterial {\r\n        return SerializationHelper.Parse(() => new MixMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.MixMaterial\"] = MixMaterial;\r\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'normalPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef LIGHTING\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#endif\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef NORMAL\nbaseColor=mix(baseColor,vec4(vNormalW,1.0),0.5);\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\n#ifdef LIGHTING\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n#else\nvec3 finalDiffuse=baseColor.rgb;\n#endif\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var normalPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'normalVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var normalVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./normal.fragment\";\r\nimport \"./normal.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass NormalMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public LIGHTING = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class NormalMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending() || (mesh.visibility < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new NormalMaterialDefines();\r\n        }\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = true;\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        defines.LIGHTING = !this._disableLighting;\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"normal\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): NormalMaterial {\r\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"NormalMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\r\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.NormalMaterial\"] = NormalMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'shadowOnlyPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform float alpha;\nuniform vec3 shadowColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..1]\n\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var shadowOnlyPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'shadowOnlyVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var shadowOnlyVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { IShadowLight } from \"@babylonjs/core/Lights/shadowLight\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./shadowOnly.fragment\";\r\nimport \"./shadowOnly.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class ShadowOnlyMaterial extends PushMaterial {\r\n    private _renderId: number;\r\n    private _activeLight: IShadowLight;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public shadowColor = Color3.Black();\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public get activeLight(): IShadowLight {\r\n        return this._activeLight;\r\n    }\r\n\r\n    public set activeLight(light: IShadowLight) {\r\n        this._activeLight = light;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new ShadowOnlyMaterialDefines();\r\n        }\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Ensure that active light is the first shadow light\r\n        if (this._activeLight) {\r\n            for (var light of mesh.lightSources) {\r\n                if (light.shadowEnabled) {\r\n                    if (this._activeLight === light) {\r\n                        break; // We are good\r\n                    }\r\n\r\n                    var lightPosition = mesh.lightSources.indexOf(this._activeLight);\r\n\r\n                    if (lightPosition !== -1) {\r\n                        mesh.lightSources.splice(lightPosition, 1);\r\n                        mesh.lightSources.splice(0, 0, this._activeLight);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"shadowOnly\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\"\r\n            ];\r\n            var samplers = new Array<string>();\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 1\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 1 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\r\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public clone(name: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Clone<ShadowOnlyMaterial>(() => new ShadowOnlyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"ShadowOnlyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ShadowOnlyMaterial\"] = ShadowOnlyMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'simplePixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var simplePixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'simpleVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var simpleVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./simple.fragment\";\r\nimport \"./simple.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass SimpleMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SimpleMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SimpleMaterialDefines();\r\n        }\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"simple\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SimpleMaterial {\r\n        return SerializationHelper.Clone<SimpleMaterial>(() => new SimpleMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.SimpleMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SimpleMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SimpleMaterial {\r\n        return SerializationHelper.Parse(() => new SimpleMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SimpleMaterial\"] = SimpleMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'skyPixelShader';\nlet shader = `precision highp float;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\nuniform vec3 cameraPosition;\nuniform vec3 cameraOffset;\nuniform float luminance;\nuniform float turbidity;\nuniform float rayleigh;\nuniform float mieCoefficient;\nuniform float mieDirectionalG;\nuniform vec3 sunPosition;\n\n#include<fogFragmentDeclaration>\n\nconst float e=2.71828182845904523536028747135266249775724709369995957;\nconst float pi=3.141592653589793238462643383279502884197169;\nconst float n=1.0003;\nconst float N=2.545E25;\nconst float pn=0.035;\nconst vec3 lambda=vec3(680E-9,550E-9,450E-9);\nconst vec3 K=vec3(0.686,0.678,0.666);\nconst float v=4.0;\nconst float rayleighZenithLength=8.4E3;\nconst float mieZenithLength=1.25E3;\nconst vec3 up=vec3(0.0,1.0,0.0);\nconst float EE=1000.0;\nconst float sunAngularDiameterCos=0.999956676946448443553574619906976478926848692873900859324;\nconst float cutoffAngle=pi/1.95;\nconst float steepness=1.5;\nvec3 totalRayleigh(vec3 lambda)\n{\nreturn (8.0*pow(pi,3.0)*pow(pow(n,2.0)-1.0,2.0)*(6.0+3.0*pn))/(3.0*N*pow(lambda,vec3(4.0))*(6.0-7.0*pn));\n}\nvec3 simplifiedRayleigh()\n{\nreturn 0.0005/vec3(94,40,18);\n}\nfloat rayleighPhase(float cosTheta)\n{\nreturn (3.0/(16.0*pi))*(1.0+pow(cosTheta,2.0));\n}\nvec3 totalMie(vec3 lambda,vec3 K,float T)\n{\nfloat c=(0.2*T )*10E-18;\nreturn 0.434*c*pi*pow((2.0*pi)/lambda,vec3(v-2.0))*K;\n}\nfloat hgPhase(float cosTheta,float g)\n{\nreturn (1.0/(4.0*pi))*((1.0-pow(g,2.0))/pow(1.0-2.0*g*cosTheta+pow(g,2.0),1.5));\n}\nfloat sunIntensity(float zenithAngleCos)\n{\nreturn EE*max(0.0,1.0-exp((-(cutoffAngle-acos(zenithAngleCos))/steepness)));\n}\nfloat A=0.15;\nfloat B=0.50;\nfloat C=0.10;\nfloat D=0.20;\nfloat EEE=0.02;\nfloat F=0.30;\nfloat W=1000.0;\nvec3 Uncharted2Tonemap(vec3 x)\n{\nreturn ((x*(A*x+C*B)+D*EEE)/(x*(A*x+B)+D*F))-EEE/F;\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\n\nfloat sunfade=1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\nfloat rayleighCoefficient=rayleigh-(1.0*(1.0-sunfade));\nvec3 sunDirection=normalize(sunPosition);\nfloat sunE=sunIntensity(dot(sunDirection,up));\nvec3 betaR=simplifiedRayleigh()*rayleighCoefficient;\nvec3 betaM=totalMie(lambda,K,turbidity)*mieCoefficient;\nfloat zenithAngle=acos(max(0.0,dot(up,normalize(vPositionW-cameraPosition+cameraOffset))));\nfloat sR=rayleighZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nfloat sM=mieZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nvec3 Fex=exp(-(betaR*sR+betaM*sM));\nfloat cosTheta=dot(normalize(vPositionW-cameraPosition),sunDirection);\nfloat rPhase=rayleighPhase(cosTheta*0.5+0.5);\nvec3 betaRTheta=betaR*rPhase;\nfloat mPhase=hgPhase(cosTheta,mieDirectionalG);\nvec3 betaMTheta=betaM*mPhase;\nvec3 Lin=pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*(1.0-Fex),vec3(1.5));\nLin*=mix(vec3(1.0),pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up,sunDirection),5.0),0.0,1.0));\nvec3 direction=normalize(vPositionW-cameraPosition);\nfloat theta=acos(direction.y);\nfloat phi=atan(direction.z,direction.x);\nvec2 uv=vec2(phi,theta)/vec2(2.0*pi,pi)+vec2(0.5,0.0);\nvec3 L0=vec3(0.1)*Fex;\nfloat sundisk=smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\nL0+=(sunE*19000.0*Fex)*sundisk;\nvec3 whiteScale=1.0/Uncharted2Tonemap(vec3(W));\nvec3 texColor=(Lin+L0);\ntexColor*=0.04 ;\ntexColor+=vec3(0.0,0.001,0.0025)*0.3;\nfloat g_fMaxLuminance=1.0;\nfloat fLumScaled=0.1/luminance;\nfloat fLumCompressed=(fLumScaled*(1.0+(fLumScaled/(g_fMaxLuminance*g_fMaxLuminance))))/(1.0+fLumScaled);\nfloat ExposureBias=fLumCompressed;\nvec3 curr=Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\n\n\n\nvec3 retColor=curr*whiteScale;\n\n\nfloat alpha=1.0;\n#ifdef VERTEXCOLOR\nretColor.rgb*=vColor.rgb;\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=clamp(vec4(retColor.rgb,alpha),0.0,1.0);\n\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var skyPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\n\nlet name = 'skyVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n\nuniform mat4 world;\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\nvoid main(void) {\ngl_Position=viewProjection*world*vec4(position,1.0);\nvec4 worldPos=world*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var skyVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsVector3, serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./sky.fragment\";\r\nimport \"./sky.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\n/** @hidden */\r\nclass SkyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This is the sky material which allows to create dynamic and texture free effects for skyboxes.\r\n * @see https://doc.babylonjs.com/extensions/sky\r\n */\r\nexport class SkyMaterial extends PushMaterial {\r\n    /**\r\n     * Defines the overall luminance of sky in interval ]0, 1[.\r\n     */\r\n    @serialize()\r\n    public luminance: number = 1.0;\r\n\r\n    /**\r\n    * Defines the amount (scattering) of haze as opposed to molecules in atmosphere.\r\n    */\r\n    @serialize()\r\n    public turbidity: number = 10.0;\r\n\r\n    /**\r\n     * Defines the sky appearance (light intensity).\r\n     */\r\n    @serialize()\r\n    public rayleigh: number = 2.0;\r\n\r\n    /**\r\n     * Defines the mieCoefficient in interval [0, 0.1] which affects the property .mieDirectionalG.\r\n     */\r\n    @serialize()\r\n    public mieCoefficient: number = 0.005;\r\n\r\n    /**\r\n     * Defines the amount of haze particles following the Mie scattering theory.\r\n     */\r\n    @serialize()\r\n    public mieDirectionalG: number = 0.8;\r\n\r\n    /**\r\n     * Defines the distance of the sun according to the active scene camera.\r\n     */\r\n    @serialize()\r\n    public distance: number = 500;\r\n\r\n    /**\r\n     * Defines the sun inclination, in interval [-0.5, 0.5]. When the inclination is not 0, the sun is said\r\n     * \"inclined\".\r\n     */\r\n    @serialize()\r\n    public inclination: number = 0.49;\r\n\r\n    /**\r\n     * Defines the solar azimuth in interval [0, 1]. The azimuth is the angle in the horizontal plan between\r\n     * an object direction and a reference direction.\r\n     */\r\n    @serialize()\r\n    public azimuth: number = 0.25;\r\n\r\n    /**\r\n     * Defines the sun position in the sky on (x,y,z). If the property .useSunPosition is set to false, then\r\n     * the property is overriden by the inclination and the azimuth and can be read at any moment.\r\n     */\r\n    @serializeAsVector3()\r\n    public sunPosition: Vector3 = new Vector3(0, 100, 0);\r\n\r\n    /**\r\n     * Defines if the sun position should be computed (inclination and azimuth) according to the given\r\n     * .sunPosition property.\r\n     */\r\n    @serialize()\r\n    public useSunPosition: boolean = false;\r\n\r\n    /**\r\n     * Defines an offset vector used to get a horizon offset.\r\n     * @example skyMaterial.cameraOffset.y = camera.globalPosition.y // Set horizon relative to 0 on the Y axis\r\n     */\r\n    @serialize()\r\n    public cameraOffset: Vector3 = Vector3.Zero();\r\n\r\n    // Private members\r\n    private _cameraPosition: Vector3 = Vector3.Zero();\r\n\r\n    private _renderId: number;\r\n\r\n    /**\r\n     * Instantiates a new sky material.\r\n     * This material allows to create dynamic and texture free\r\n     * effects for skyboxes by taking care of the atmosphere state.\r\n     * @see https://doc.babylonjs.com/extensions/sky\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns false as the sky material doesn't need alpha testing.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns null as the sky material has no texture.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SkyMaterialDefines();\r\n        }\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, false, defines);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            var shaderName = \"sky\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                attribs,\r\n                [\"world\", \"viewProjection\", \"view\",\r\n                    \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\",\r\n                    \"luminance\", \"turbidity\", \"rayleigh\", \"mieCoefficient\", \"mieDirectionalG\", \"sunPosition\",\r\n                    \"cameraPosition\", \"cameraOffset\"\r\n                ],\r\n                [],\r\n                join, fallbacks, this.onCompiled, this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Sky\r\n        var camera = scene.activeCamera;\r\n        if (camera) {\r\n            var cameraWorldMatrix = camera.getWorldMatrix();\r\n            this._cameraPosition.x = cameraWorldMatrix.m[12];\r\n            this._cameraPosition.y = cameraWorldMatrix.m[13];\r\n            this._cameraPosition.z = cameraWorldMatrix.m[14];\r\n            this._activeEffect.setVector3(\"cameraPosition\", this._cameraPosition);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"cameraOffset\", this.cameraOffset);\r\n\r\n        if (this.luminance > 0) {\r\n            this._activeEffect.setFloat(\"luminance\", this.luminance);\r\n        }\r\n\r\n        this._activeEffect.setFloat(\"turbidity\", this.turbidity);\r\n        this._activeEffect.setFloat(\"rayleigh\", this.rayleigh);\r\n        this._activeEffect.setFloat(\"mieCoefficient\", this.mieCoefficient);\r\n        this._activeEffect.setFloat(\"mieDirectionalG\", this.mieDirectionalG);\r\n\r\n        if (!this.useSunPosition) {\r\n            var theta = Math.PI * (this.inclination - 0.5);\r\n            var phi = 2 * Math.PI * (this.azimuth - 0.5);\r\n\r\n            this.sunPosition.x = this.distance * Math.cos(phi);\r\n            this.sunPosition.y = this.distance * Math.sin(phi) * Math.sin(theta);\r\n            this.sunPosition.z = this.distance * Math.sin(phi) * Math.cos(theta);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"sunPosition\", this.sunPosition);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): SkyMaterial {\r\n        return SerializationHelper.Clone<SkyMaterial>(() => new SkyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.SkyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"SkyMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"SkyMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Creates a sky material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new sky material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SkyMaterial {\r\n        return SerializationHelper.Parse(() => new SkyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SkyMaterial\"] = SkyMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'terrainPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D textureSampler;\nuniform vec2 vTextureInfos;\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\n#endif\n#ifdef BUMP\nuniform sampler2D bump1Sampler;\nuniform sampler2D bump2Sampler;\nuniform sampler2D bump3Sampler;\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\n#ifdef BUMP\n#extension GL_OES_standard_derivatives : enable\n\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\n{\n\nvec3 dp1=dFdx(p);\nvec3 dp2=dFdy(p);\nvec2 duv1=dFdx(uv);\nvec2 duv2=dFdy(uv);\n\nvec3 dp2perp=cross(dp2,normal);\nvec3 dp1perp=cross(normal,dp1);\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\nvec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;\n\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));\nreturn mat3(tangent*invmax,binormal*invmax,normal);\n}\nvec3 perturbNormal(vec3 viewDir,vec3 mixColor)\n{\nvec3 bump1Color=texture2D(bump1Sampler,vTextureUV*diffuse1Infos).xyz;\nvec3 bump2Color=texture2D(bump2Sampler,vTextureUV*diffuse2Infos).xyz;\nvec3 bump3Color=texture2D(bump3Sampler,vTextureUV*diffuse3Infos).xyz;\nbump1Color.rgb*=mixColor.r;\nbump2Color.rgb=mix(bump1Color.rgb,bump2Color.rgb,mixColor.g);\nvec3 map=mix(bump2Color.rgb,bump3Color.rgb,mixColor.b);\nmap=map*255./127.-128./127.;\nmat3 TBN=cotangent_frame(vNormalW*vTextureInfos.y,-viewDir,vTextureUV);\nreturn normalize(TBN*map);\n}\n#endif\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(textureSampler,vTextureUV);\n#if defined(BUMP) && defined(DIFFUSE)\nnormalW=perturbNormal(viewDirectionW,baseColor.rgb);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\ndiffuse1Color.rgb*=baseColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,baseColor.g);\nbaseColor.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,baseColor.b);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*baseColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var terrainPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'terrainVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var terrainVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./terrain.fragment\";\r\nimport \"./terrain.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass TerrainMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public BUMP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TerrainMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"mixTexture\")\r\n    private _mixTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture1\")\r\n    private _bumpTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture2\")\r\n    private _bumpTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture3\")\r\n    private _bumpTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture3: Texture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TerrainMaterialDefines();\r\n        }\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (!this.mixTexture || !this.mixTexture.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            defines._needUVs = true;\r\n\r\n            if (MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this.diffuseTexture1 || !this.diffuseTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.diffuseTexture2 || !this.diffuseTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.diffuseTexture3 || !this.diffuseTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines.DIFFUSE = true;\r\n            }\r\n\r\n            if (this.bumpTexture1 && this.bumpTexture2 && this.bumpTexture3 && MaterialFlags.BumpTextureEnabled) {\r\n                if (!this.bumpTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.bumpTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.bumpTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines._needNormals = true;\r\n                defines.BUMP = true;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"terrain\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\"\r\n            ];\r\n            var samplers = [\"textureSampler\", \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\",\r\n                \"bump1Sampler\", \"bump2Sampler\", \"bump3Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.mixTexture) {\r\n                this._activeEffect.setTexture(\"textureSampler\", this._mixTexture);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture.coordinatesIndex, this._mixTexture.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture.getTextureMatrix());\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.BumpTextureEnabled && scene.getEngine().getCaps().standardDerivatives) {\r\n                    if (this._bumpTexture1) {\r\n                        this._activeEffect.setTexture(\"bump1Sampler\", this._bumpTexture1);\r\n                    }\r\n                    if (this._bumpTexture2) {\r\n                        this._activeEffect.setTexture(\"bump2Sampler\", this._bumpTexture2);\r\n                    }\r\n                    if (this._bumpTexture3) {\r\n                        this._activeEffect.setTexture(\"bump3Sampler\", this._bumpTexture3);\r\n                    }\r\n                }\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._mixTexture) {\r\n            activeTextures.push(this._mixTexture);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._bumpTexture1) {\r\n            activeTextures.push(this._bumpTexture1);\r\n        }\r\n\r\n        if (this._bumpTexture2) {\r\n            activeTextures.push(this._bumpTexture2);\r\n        }\r\n\r\n        if (this._bumpTexture3) {\r\n            activeTextures.push(this._bumpTexture3);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._mixTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TerrainMaterial {\r\n        return SerializationHelper.Clone(() => new TerrainMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TerrainMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TerrainMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TerrainMaterial {\r\n        return SerializationHelper.Parse(() => new TerrainMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.TerrainMaterial\"] = TerrainMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/depthPrePass\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'triplanarPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\nuniform sampler2D diffuseSamplerX;\n#ifdef BUMPX\nuniform sampler2D normalSamplerX;\n#endif\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\nuniform sampler2D diffuseSamplerY;\n#ifdef BUMPY\nuniform sampler2D normalSamplerY;\n#endif\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\nuniform sampler2D diffuseSamplerZ;\n#ifdef BUMPZ\nuniform sampler2D normalSamplerZ;\n#endif\n#endif\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(0.,0.,0.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=tangentSpace[2];\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\nvec4 baseNormal=vec4(0.0,0.0,0.0,1.0);\nnormalW*=normalW;\n#ifdef DIFFUSEX\nbaseColor+=texture2D(diffuseSamplerX,vTextureUVX)*normalW.x;\n#ifdef BUMPX\nbaseNormal+=texture2D(normalSamplerX,vTextureUVX)*normalW.x;\n#endif\n#endif\n#ifdef DIFFUSEY\nbaseColor+=texture2D(diffuseSamplerY,vTextureUVY)*normalW.y;\n#ifdef BUMPY\nbaseNormal+=texture2D(normalSamplerY,vTextureUVY)*normalW.y;\n#endif\n#endif\n#ifdef DIFFUSEZ\nbaseColor+=texture2D(diffuseSamplerZ,vTextureUVZ)*normalW.z;\n#ifdef BUMPZ\nbaseNormal+=texture2D(normalSamplerZ,vTextureUVZ)*normalW.z;\n#endif\n#endif\n#ifdef NORMAL\nnormalW=normalize((2.0*baseNormal.xyz-1.0)*tangentSpace);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var triplanarPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\n\nlet name = 'triplanarVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\n#endif\nuniform float tileSize;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void)\n{\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef DIFFUSEX\nvTextureUVX=worldPos.zy/tileSize;\n#endif\n#ifdef DIFFUSEY\nvTextureUVY=worldPos.xz/tileSize;\n#endif\n#ifdef DIFFUSEZ\nvTextureUVZ=worldPos.xy/tileSize;\n#endif\n#ifdef NORMAL\n\nvec3 xtan=vec3(0,0,1);\nvec3 xbin=vec3(0,1,0);\nvec3 ytan=vec3(1,0,0);\nvec3 ybin=vec3(0,0,1);\nvec3 ztan=vec3(1,0,0);\nvec3 zbin=vec3(0,1,0);\nvec3 normalizedNormal=normalize(normal);\nnormalizedNormal*=normalizedNormal;\nvec3 worldBinormal=normalize(xbin*normalizedNormal.x+ybin*normalizedNormal.y+zbin*normalizedNormal.z);\nvec3 worldTangent=normalize(xtan*normalizedNormal.x+ytan*normalizedNormal.y+ztan*normalizedNormal.z);\nworldTangent=(world*vec4(worldTangent,1.0)).xyz;\nworldBinormal=(world*vec4(worldBinormal,1.0)).xyz;\nvec3 worldNormal=normalize(cross(worldTangent,worldBinormal));\ntangentSpace[0]=worldTangent;\ntangentSpace[1]=worldBinormal;\ntangentSpace[2]=worldNormal;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var triplanarVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\n\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./triplanar.fragment\";\r\nimport \"./triplanar.vertex\";\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\n\r\nclass TriPlanarMaterialDefines extends MaterialDefines {\r\n    public DIFFUSEX = false;\r\n    public DIFFUSEY = false;\r\n    public DIFFUSEZ = false;\r\n\r\n    public BUMPX = false;\r\n    public BUMPY = false;\r\n    public BUMPZ = false;\r\n\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TriPlanarMaterial extends PushMaterial {\r\n    @serializeAsTexture()\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureX\")\r\n    private _diffuseTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexturY\")\r\n    private _diffuseTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureZ\")\r\n    private _diffuseTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureZ: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureX\")\r\n    private _normalTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureY\")\r\n    private _normalTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureZ\")\r\n    private _normalTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureZ: BaseTexture;\r\n\r\n    @serialize()\r\n    public tileSize: number = 1;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0.2, 0.2, 0.2);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TriPlanarMaterialDefines();\r\n        }\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    var textures = [this.diffuseTextureX, this.diffuseTextureY, this.diffuseTextureZ];\r\n                    var textureDefines = [\"DIFFUSEX\", \"DIFFUSEY\", \"DIFFUSEZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (MaterialFlags.BumpTextureEnabled) {\r\n                    var textures = [this.normalTextureX, this.normalTextureY, this.normalTextureZ];\r\n                    var textureDefines = [\"BUMPX\", \"BUMPY\", \"BUMPZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"triplanar\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\",\r\n                \"tileSize\"\r\n            ];\r\n            var samplers = [\"diffuseSamplerX\", \"diffuseSamplerY\", \"diffuseSamplerZ\",\r\n                \"normalSamplerX\", \"normalSamplerY\", \"normalSamplerZ\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"tileSize\", this.tileSize);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this.diffuseTextureX) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerX\", this.diffuseTextureX);\r\n            }\r\n            if (this.diffuseTextureY) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerY\", this.diffuseTextureY);\r\n            }\r\n            if (this.diffuseTextureZ) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerZ\", this.diffuseTextureZ);\r\n            }\r\n            if (this.normalTextureX) {\r\n                this._activeEffect.setTexture(\"normalSamplerX\", this.normalTextureX);\r\n            }\r\n            if (this.normalTextureY) {\r\n                this._activeEffect.setTexture(\"normalSamplerY\", this.normalTextureY);\r\n            }\r\n            if (this.normalTextureZ) {\r\n                this._activeEffect.setTexture(\"normalSamplerZ\", this.normalTextureZ);\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTextureX) {\r\n            activeTextures.push(this._diffuseTextureX);\r\n        }\r\n\r\n        if (this._diffuseTextureY) {\r\n            activeTextures.push(this._diffuseTextureY);\r\n        }\r\n\r\n        if (this._diffuseTextureZ) {\r\n            activeTextures.push(this._diffuseTextureZ);\r\n        }\r\n\r\n        if (this._normalTextureX) {\r\n            activeTextures.push(this._normalTextureX);\r\n        }\r\n\r\n        if (this._normalTextureY) {\r\n            activeTextures.push(this._normalTextureY);\r\n        }\r\n\r\n        if (this._normalTextureZ) {\r\n            activeTextures.push(this._normalTextureZ);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureZ === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureZ === texture) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TriPlanarMaterial {\r\n        return SerializationHelper.Clone(() => new TriPlanarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TriPlanarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TriPlanarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TriPlanarMaterial {\r\n        return SerializationHelper.Parse(() => new TriPlanarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.TriPlanarMaterial\"] = TriPlanarMaterial;","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/imageProcessingDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/logDepthDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/logDepthFragment\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment\";\n\nlet name = 'waterPixelShader';\nlet shader = `#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef BUMP\nvarying vec2 vNormalUV;\nvarying vec2 vNormalUV2;\nuniform sampler2D normalSampler;\nuniform vec2 vNormalInfos;\n#endif\nuniform sampler2D refractionSampler;\nuniform sampler2D reflectionSampler;\n\nconst float LOG2=1.442695;\nuniform vec3 cameraPosition;\nuniform vec4 waterColor;\nuniform float colorBlendFactor;\nuniform vec4 waterColor2;\nuniform float colorBlendFactor2;\nuniform float bumpHeight;\nuniform float time;\n\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvarying vec3 vPosition;\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef BUMP\n#ifdef BUMPSUPERIMPOSE\nbaseColor=0.6*texture2D(normalSampler,vNormalUV)+0.4*texture2D(normalSampler,vec2(vNormalUV2.x,vNormalUV2.y));\n#else\nbaseColor=texture2D(normalSampler,vNormalUV);\n#endif\nvec3 bumpColor=baseColor.rgb;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\nbaseColor.rgb*=vNormalInfos.y;\n#else\nvec3 bumpColor=vec3(1.0);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec2 perturbation=bumpHeight*(baseColor.rg-0.5);\n#ifdef BUMPAFFECTSREFLECTION\nvec3 normalW=normalize(vNormalW+vec3(perturbation.x*8.0,0.0,perturbation.y*8.0));\nif (normalW.y<0.0) {\nnormalW.y=-normalW.y;\n}\n#else\nvec3 normalW=normalize(vNormalW);\n#endif\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\nvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\n#endif\n#ifdef FRESNELSEPARATE\n#ifdef REFLECTION\n\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation*0.5,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\n#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\n#endif\nvec2 projectedReflectionTexCoords=clamp(vec2(\nvReflectionMapTexCoord.x/vReflectionMapTexCoord.z+perturbation.x*0.3,\nvReflectionMapTexCoord.y/vReflectionMapTexCoord.z+perturbation.y\n),0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\n#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\n#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=clamp(abs(pow(dot(viewDirectionW,upVector),3.0)),0.05,0.65);\nfloat IfresnelTerm=1.0-fresnelTerm;\nrefractiveColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*refractiveColor;\nreflectiveColor=IfresnelTerm*colorBlendFactor2*waterColor+(1.0-colorBlendFactor2*IfresnelTerm)*reflectiveColor;\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*IfresnelTerm;\nbaseColor=combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#else\n#ifdef REFLECTION\n\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\n#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\n#endif\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\n#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\n#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=max(dot(viewDirectionW,upVector),0.0);\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*(1.0-fresnelTerm);\nbaseColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#endif\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<logDepthFragment>\n#include<fogFragment>\n\n\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\n#elif defined(IMAGEPROCESSING)\ncolor.rgb=toLinearSpace(color.rgb);\ncolor=applyImageProcessing(color);\n#endif\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var waterPixelShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/logDepthDeclaration\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/logDepthVertex\";\n\nlet name = 'waterVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef BUMP\nvarying vec2 vNormalUV;\n#ifdef BUMPSUPERIMPOSE\nvarying vec2 vNormalUV2;\n#endif\nuniform mat4 normalMatrix;\nuniform vec2 vNormalInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<logDepthDeclaration>\n\nuniform mat4 worldReflectionViewProjection;\nuniform vec2 windDirection;\nuniform float waveLength;\nuniform float time;\nuniform float windForce;\nuniform float waveHeight;\nuniform float waveSpeed;\n\nvarying vec3 vPosition;\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef BUMP\nif (vNormalInfos.x == 0.)\n{\nvNormalUV=vec2(normalMatrix*vec4((uv*1.0)/waveLength+time*windForce*windDirection,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv*0.721)/waveLength+time*1.2*windForce*windDirection,1.0,0.0));\n#endif\n}\nelse\n{\nvNormalUV=vec2(normalMatrix*vec4((uv2*1.0)/waveLength+time*windForce*windDirection ,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv2*0.721)/waveLength+time*1.2*windForce*windDirection ,1.0,0.0));\n#endif\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\nvec3 p=position;\nfloat newY=(sin(((p.x/0.05)+time*waveSpeed))*waveHeight*windDirection.x*5.0)\n+(cos(((p.z/0.05)+time*waveSpeed))*waveHeight*windDirection.y*5.0);\np.y+=abs(newY);\ngl_Position=viewProjection*finalWorld*vec4(p,1.0);\n#ifdef REFLECTION\nworldPos=viewProjection*finalWorld*vec4(p,1.0);\n\nvPosition=position;\nvRefractionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvRefractionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvRefractionMapTexCoord.z=worldPos.w;\nworldPos=worldReflectionViewProjection*vec4(position,1.0);\nvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvReflectionMapTexCoord.z=worldPos.w;\n#endif\n#include<logDepthVertex>\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var waterVertexShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\nimport { serializeAsVector2, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\nimport { Matrix, Vector2, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { Plane } from '@babylonjs/core/Maths/math.plane';\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\nimport { Constants } from \"@babylonjs/core/Engines/constants\";\nimport { SmartArray } from \"@babylonjs/core/Misc/smartArray\";\nimport { Observer } from '@babylonjs/core/Misc/observable';\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\nimport { RenderTargetTexture } from \"@babylonjs/core/Materials/Textures/renderTargetTexture\";\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\nimport { IImageProcessingConfigurationDefines, ImageProcessingConfiguration } from \"@babylonjs/core/Materials/imageProcessingConfiguration\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\nimport { MaterialFlags } from \"@babylonjs/core/Materials/materialFlags\";\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\nimport \"./water.fragment\";\nimport \"./water.vertex\";\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\n\nclass WaterMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\n    public BUMP = false;\n    public REFLECTION = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public SPECULARTERM = false;\n    public LOGARITHMICDEPTH = false;\n    public FRESNELSEPARATE = false;\n    public BUMPSUPERIMPOSE = false;\n    public BUMPAFFECTSREFLECTION = false;\n\n    public IMAGEPROCESSING = false;\n    public VIGNETTE = false;\n    public VIGNETTEBLENDMODEMULTIPLY = false;\n    public VIGNETTEBLENDMODEOPAQUE = false;\n    public TONEMAPPING = false;\n    public TONEMAPPING_ACES = false;\n    public CONTRAST = false;\n    public EXPOSURE = false;\n    public COLORCURVES = false;\n    public COLORGRADING = false;\n    public COLORGRADING3D = false;\n    public SAMPLER3DGREENDEPTH = false;\n    public SAMPLER3DBGRMAP = false;\n    public IMAGEPROCESSINGPOSTPROCESS = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class WaterMaterial extends PushMaterial {\n    /*\n    * Public members\n    */\n    @serializeAsTexture(\"bumpTexture\")\n    private _bumpTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public bumpTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serializeAsColor3()\n    public specularColor = new Color3(0, 0, 0);\n\n    @serialize()\n    public specularPower = 64;\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    /**\n    * @param {number}: Represents the wind force\n    */\n    @serialize()\n    public windForce: number = 6;\n    /**\n    * @param {Vector2}: The direction of the wind in the plane (X, Z)\n    */\n    @serializeAsVector2()\n    public windDirection: Vector2 = new Vector2(0, 1);\n    /**\n    * @param {number}: Wave height, represents the height of the waves\n    */\n    @serialize()\n    public waveHeight: number = 0.4;\n    /**\n    * @param {number}: Bump height, represents the bump height related to the bump map\n    */\n    @serialize()\n    public bumpHeight: number = 0.4;\n    /**\n     * @param {boolean}: Add a smaller moving bump to less steady waves.\n     */\n    @serialize(\"bumpSuperimpose\")\n    private _bumpSuperimpose = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpSuperimpose: boolean;\n\n    /**\n     * @param {boolean}: Color refraction and reflection differently with .waterColor2 and .colorBlendFactor2. Non-linear (physically correct) fresnel.\n     */\n    @serialize(\"fresnelSeparate\")\n    private _fresnelSeparate = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public fresnelSeparate: boolean;\n\n    /**\n     * @param {boolean}: bump Waves modify the reflection.\n     */\n    @serialize(\"bumpAffectsReflection\")\n    private _bumpAffectsReflection = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpAffectsReflection: boolean;\n\n    /**\n    * @param {number}: The water color blended with the refraction (near)\n    */\n    @serializeAsColor3()\n    public waterColor: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n    * @param {number}: The blend factor related to the water color\n    */\n    @serialize()\n    public colorBlendFactor: number = 0.2;\n    /**\n     * @param {number}: The water color blended with the reflection (far)\n     */\n    @serializeAsColor3()\n    public waterColor2: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n     * @param {number}: The blend factor related to the water color (reflection, far)\n     */\n    @serialize()\n    public colorBlendFactor2: number = 0.2;\n    /**\n    * @param {number}: Represents the maximum length of a wave\n    */\n    @serialize()\n    public waveLength: number = 0.1;\n\n    /**\n    * @param {number}: Defines the waves speed\n    */\n    @serialize()\n    public waveSpeed: number = 1.0;\n    /**\n     * Sets or gets whether or not automatic clipping should be enabled or not. Setting to true will save performances and\n     * will avoid calculating useless pixels in the pixel shader of the water material.\n     */\n    @serialize()\n    public disableClipPlane: boolean = false;\n\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\n\n    /*\n    * Private members\n    */\n    private _mesh: Nullable<AbstractMesh> = null;\n\n    private _refractionRTT: Nullable<RenderTargetTexture>;\n    private _reflectionRTT: Nullable<RenderTargetTexture>;\n\n    private _reflectionTransform: Matrix = Matrix.Zero();\n    private _lastTime: number = 0;\n    private _lastDeltaTime: number = 0;\n\n    private _renderId: number;\n\n    private _useLogarithmicDepth: boolean;\n\n    private _waitingRenderList: Nullable<string[]>;\n\n    private _imageProcessingConfiguration: Nullable<ImageProcessingConfiguration>;\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\n\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    public get hasRenderTargetTextures(): boolean {\n        return true;\n    }\n\n    /**\n    * Constructor\n    */\n    constructor(name: string, scene: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {\n        super(name, scene);\n\n        this._createRenderTargets(scene, renderTargetSize);\n\n        // Create render targets\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\n            this._renderTargets.reset();\n            this._renderTargets.push(<RenderTargetTexture>this._reflectionRTT);\n            this._renderTargets.push(<RenderTargetTexture>this._refractionRTT);\n\n            return this._renderTargets;\n        };\n\n        this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    }\n\n    @serialize()\n    public get useLogarithmicDepth(): boolean {\n        return this._useLogarithmicDepth;\n    }\n\n    public set useLogarithmicDepth(value: boolean) {\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        this._markAllSubMeshesAsMiscDirty();\n    }\n\n    // Get / Set\n    public get refractionTexture(): Nullable<RenderTargetTexture> {\n        return this._refractionRTT;\n    }\n\n    public get reflectionTexture(): Nullable<RenderTargetTexture> {\n        return this._reflectionRTT;\n    }\n\n    // Methods\n    public addToRenderList(node: any): void {\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            this._refractionRTT.renderList.push(node);\n        }\n\n        if (this._reflectionRTT && this._reflectionRTT.renderList) {\n            this._reflectionRTT.renderList.push(node);\n        }\n    }\n\n    public enableRenderTargets(enable: boolean): void {\n        var refreshRate = enable ? 1 : 0;\n\n        if (this._refractionRTT) {\n            this._refractionRTT.refreshRate = refreshRate;\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.refreshRate = refreshRate;\n        }\n    }\n\n    public getRenderList(): Nullable<AbstractMesh[]> {\n        return this._refractionRTT ? this._refractionRTT.renderList : [];\n    }\n\n    public get renderTargetsEnabled(): boolean {\n        return !(this._refractionRTT && this._refractionRTT.refreshRate === 0);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new WaterMaterialDefines();\n        }\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this.bumpTexture && MaterialFlags.BumpTextureEnabled) {\n                    if (!this.bumpTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.BUMP = true;\n                    }\n                }\n\n                if (MaterialFlags.ReflectionTextureEnabled) {\n                    defines.REFLECTION = true;\n                }\n            }\n        }\n\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        if (defines._areMiscDirty) {\n            if (this._fresnelSeparate) {\n                defines.FRESNELSEPARATE = true;\n            }\n\n            if (this._bumpSuperimpose) {\n                defines.BUMPSUPERIMPOSE = true;\n            }\n\n            if (this._bumpAffectsReflection) {\n                defines.BUMPAFFECTSREFLECTION = true;\n            }\n        }\n\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n\n        // Image processing\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n\n            this._imageProcessingConfiguration.prepareDefines(defines);\n\n            defines.IS_REFLECTION_LINEAR = (this.reflectionTexture != null && !this.reflectionTexture.gammaSpace);\n            defines.IS_REFRACTION_LINEAR = (this.refractionTexture != null && !this.refractionTexture.gammaSpace);\n        }\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Configure this\n        this._mesh = mesh;\n\n        if (this._waitingRenderList) {\n            for (var i = 0; i < this._waitingRenderList.length; i++) {\n                this.addToRenderList(scene.getNodeByID(this._waitingRenderList[i]));\n            }\n\n            this._waitingRenderList = null;\n        }\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"water\";\n            var join = defines.toString();\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vNormalInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"normalMatrix\",\n                \"logarithmicDepthConstant\",\n\n                // Water\n                \"worldReflectionViewProjection\", \"windDirection\", \"waveLength\", \"time\", \"windForce\",\n                \"cameraPosition\", \"bumpHeight\", \"waveHeight\", \"waterColor\", \"waterColor2\", \"colorBlendFactor\", \"colorBlendFactor2\", \"waveSpeed\"\n            ];\n            var samplers = [\"normalSampler\",\n                // Water\n                \"refractionSampler\", \"reflectionSampler\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <IEffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights }\n                }, engine), defines);\n\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n        if (!effect || !this._mesh) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.bumpTexture && MaterialFlags.BumpTextureEnabled) {\n                this._activeEffect.setTexture(\"normalSampler\", this.bumpTexture);\n\n                this._activeEffect.setFloat2(\"vNormalInfos\", this.bumpTexture.coordinatesIndex, this.bumpTexture.level);\n                this._activeEffect.setMatrix(\"normalMatrix\", this.bumpTexture.getTextureMatrix());\n            }\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n\n        if (defines.SPECULARTERM) {\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n        }\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        // Log. depth\n        MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n\n        // Water\n        if (MaterialFlags.ReflectionTextureEnabled) {\n            this._activeEffect.setTexture(\"refractionSampler\", this._refractionRTT);\n            this._activeEffect.setTexture(\"reflectionSampler\", this._reflectionRTT);\n        }\n\n        var wrvp = this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(scene.getProjectionMatrix());\n\n        // Add delta time. Prevent adding delta time if it hasn't changed.\n        let deltaTime = scene.getEngine().getDeltaTime();\n        if (deltaTime !== this._lastDeltaTime) {\n            this._lastDeltaTime = deltaTime;\n            this._lastTime += this._lastDeltaTime;\n        }\n\n        this._activeEffect.setMatrix(\"worldReflectionViewProjection\", wrvp);\n        this._activeEffect.setVector2(\"windDirection\", this.windDirection);\n        this._activeEffect.setFloat(\"waveLength\", this.waveLength);\n        this._activeEffect.setFloat(\"time\", this._lastTime / 100000);\n        this._activeEffect.setFloat(\"windForce\", this.windForce);\n        this._activeEffect.setFloat(\"waveHeight\", this.waveHeight);\n        this._activeEffect.setFloat(\"bumpHeight\", this.bumpHeight);\n        this._activeEffect.setColor4(\"waterColor\", this.waterColor, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor\", this.colorBlendFactor);\n        this._activeEffect.setColor4(\"waterColor2\", this.waterColor2, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor2\", this.colorBlendFactor2);\n        this._activeEffect.setFloat(\"waveSpeed\", this.waveSpeed);\n\n        // image processing\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n            this._imageProcessingConfiguration.bind(this._activeEffect);\n        }\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    private _createRenderTargets(scene: Scene, renderTargetSize: Vector2): void {\n        // Render targets\n        this._refractionRTT = new RenderTargetTexture(name + \"_refraction\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._refractionRTT.wrapU = Constants.TEXTURE_MIRROR_ADDRESSMODE;\n        this._refractionRTT.wrapV = Constants.TEXTURE_MIRROR_ADDRESSMODE;\n        this._refractionRTT.ignoreCameraViewport = true;\n\n        this._reflectionRTT = new RenderTargetTexture(name + \"_reflection\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._reflectionRTT.wrapU = Constants.TEXTURE_MIRROR_ADDRESSMODE;\n        this._reflectionRTT.wrapV = Constants.TEXTURE_MIRROR_ADDRESSMODE;\n        this._reflectionRTT.ignoreCameraViewport = true;\n\n        var isVisible: boolean;\n        var clipPlane: Nullable<Plane> = null;\n        var savedViewMatrix: Matrix;\n        var mirrorMatrix = Matrix.Zero();\n\n        this._refractionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n\n            // Clip plane\n            if (!this.disableClipPlane) {\n                clipPlane = scene.clipPlane;\n\n                var positiony = this._mesh ? this._mesh.position.y : 0.0;\n                scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony + 0.05, 0), new Vector3(0, 1, 0));\n            }\n        };\n\n        this._refractionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            if (!this.disableClipPlane) {\n                scene.clipPlane = clipPlane;\n            }\n        };\n\n        this._reflectionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n\n            // Clip plane\n            if (!this.disableClipPlane) {\n                clipPlane = scene.clipPlane;\n\n                var positiony = this._mesh ? this._mesh.position.y : 0.0;\n                scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony - 0.05, 0), new Vector3(0, -1, 0));\n\n                Matrix.ReflectionToRef(scene.clipPlane, mirrorMatrix);\n            }\n\n            // Transform\n            savedViewMatrix = scene.getViewMatrix();\n\n            mirrorMatrix.multiplyToRef(savedViewMatrix, this._reflectionTransform);\n            scene.setTransformMatrix(this._reflectionTransform, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = false;\n            scene._mirroredCameraPosition = Vector3.TransformCoordinates((<Camera>scene.activeCamera).position, mirrorMatrix);\n        };\n\n        this._reflectionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            scene.clipPlane = clipPlane;\n\n            // Transform\n            scene.setTransformMatrix(savedViewMatrix, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = true;\n            scene._mirroredCameraPosition = null;\n        };\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.bumpTexture && this.bumpTexture.animations && this.bumpTexture.animations.length > 0) {\n            results.push(this.bumpTexture);\n        }\n        if (this._reflectionRTT && this._reflectionRTT.animations && this._reflectionRTT.animations.length > 0) {\n            results.push(this._reflectionRTT);\n        }\n        if (this._refractionRTT && this._refractionRTT.animations && this._refractionRTT.animations.length > 0) {\n            results.push(this._refractionRTT);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.bumpTexture) {\n            this.bumpTexture.dispose();\n        }\n\n        var index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._refractionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n        index = -1;\n        index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._reflectionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.dispose();\n        }\n        if (this._refractionRTT) {\n            this._refractionRTT.dispose();\n        }\n\n        // Remove image-processing observer\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): WaterMaterial {\n        return SerializationHelper.Clone(() => new WaterMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.WaterMaterial\";\n\n        serializationObject.renderList = [];\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            for (var i = 0; i < this._refractionRTT.renderList.length; i++) {\n                serializationObject.renderList.push(this._refractionRTT.renderList[i].id);\n            }\n        }\n\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"WaterMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): WaterMaterial {\n        var mat = SerializationHelper.Parse(() => new WaterMaterial(source.name, scene), source, scene, rootUrl);\n        mat._waitingRenderList = source.renderList;\n\n        return mat;\n    }\n\n    public static CreateDefaultMesh(name: string, scene: Scene): Mesh {\n        var mesh = Mesh.CreateGround(name, 512, 512, 32, scene, false);\n        return mesh;\n    }\n}\n\n_TypeStore.RegisteredTypes[\"BABYLON.WaterMaterial\"] = WaterMaterial;"],"sourceRoot":""}