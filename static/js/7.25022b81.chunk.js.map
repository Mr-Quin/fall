{"version":3,"sources":["../../../../sourceES6/loaders/src/glTF/glTFValidation.ts","../../../../sourceES6/loaders/src/glTF/glTFFileLoader.ts","../../../../../sourceES6/loaders/src/glTF/1.0/glTFLoaderInterfaces.ts","../../../../../sourceES6/loaders/src/glTF/1.0/glTFLoader.ts","../../../../../sourceES6/loaders/src/glTF/1.0/glTFLoaderUtils.ts","../../../../../sourceES6/loaders/src/glTF/1.0/glTFBinaryExtension.ts","../../../../../sourceES6/loaders/src/glTF/1.0/glTFMaterialsCommonExtension.ts","../../../../../sourceES6/loaders/src/glTF/2.0/glTFLoader.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/EXT_lights_image_based.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_draco_mesh_compression.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_lights_punctual.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_unlit.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_clearcoat.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_sheen.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_specular.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_mesh_quantization.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_texture_basisu.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_texture_transform.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/MSFT_audio_emitter.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/MSFT_lod.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/MSFT_minecraftMesh.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/MSFT_sRGBFactors.ts","../../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/ExtrasAsMetadata.ts","../node_modules/cannon/build/cannon.js"],"names":["validateAsync","data","rootUrl","fileName","getExternalResource","options","externalResourceFunction","uri","then","value","Uint8Array","ArrayBuffer","GLTFValidator","validateBytes","validateString","workerFunc","pendingExternalResources","onmessage","message","id","importScripts","url","Promise","resolve","reject","index","length","push","postMessage","reason","GLTFLoaderCoordinateSystemMode","GLTFLoaderAnimationStartMode","GLTFLoaderState","ValidateAsync","Worker","workerContent","workerBlobUrl","URL","createObjectURL","Blob","type","worker","onError","error","removeEventListener","onMessage","addEventListener","GetAbsoluteUrl","Configuration","this","_LoadScriptPromise","LoadScriptAsync","onParsedObservable","coordinateSystemMode","AUTO","animationStartMode","FIRST","compileMaterials","useClipPlane","compileShadowGenerators","transparencyAsCoverage","useRangeRequests","createInstances","preprocessUrlAsync","onMeshLoadedObservable","onTextureLoadedObservable","onMaterialLoadedObservable","onCameraLoadedObservable","onCompleteObservable","onErrorObservable","onDisposeObservable","onExtensionLoadedObservable","validate","onValidatedObservable","_loader","name","extensions","isBinary","_logIndentLevel","_loggingEnabled","_log","_logDisabled","_capturePerformanceCounters","_startPerformanceCounter","_startPerformanceCounterDisabled","_endPerformanceCounter","_endPerformanceCounterDisabled","callback","_onParsedObserver","remove","add","_onMeshLoadedObserver","_onTextureLoadedObserver","_onMaterialLoadedObserver","_onCameraLoadedObserver","_onCompleteObserver","_onErrorObserver","_onDisposeObserver","_onExtensionLoadedObserver","_logEnabled","_startPerformanceCounterEnabled","_endPerformanceCounterEnabled","_onValidatedObserver","dispose","_clear","notifyObservers","undefined","clear","requestFile","scene","onSuccess","onProgress","useArrayBuffer","Warn","Array","abort","forEach","fileRequest","readAsync","byteOffset","byteLength","_requestFile","webRequest","contentRange","getResponseHeader","Number","split","setRequestHeader","_unpackBinaryAsync","loaderData","request","arrayBuffer","response","_validate","GetFolderPath","GetFilename","json","_parseJson","readFile","file","_readFile","importMeshAsync","meshesNames","_getLoader","loadAsync","loadAssetContainerAsync","materials","material","textures","texture","result","container","prototype","apply","meshes","particleSystems","skeletons","animationGroups","lights","transformNodes","canDirectLoad","indexOf","directLoad","createPlugin","GLTFFileLoader","state","whenCompleteAsync","addOnce","_loadFileAsync","asset","version","minVersion","generator","_parseVersion","Error","_compareVersion","major","minor","createLoader","1","_CreateGLTF1Loader","2","_CreateGLTF2Loader","parsed","JSON","parse","dataReader","magic","readUint32","loggingEnabled","unpacked","buffer","_unpackBinaryV1Async","_unpackBinaryV2Async","contentLength","contentFormat","bodyLength","readString","bin","ChunkFormat","chunkLength","skipBytes","match","parseInt","a","b","_logOpen","_logClose","spaces","_logSpaces","substr","Log","counterName","StartPerformanceCounter","EndPerformanceCounter","IncrementalLoading","HomogeneousCoordinates","RegisterPlugin","EComponentType","EShaderType","EParameterType","ETextureWrapMode","ETextureFilterType","ETextureFormat","ECullingType","EBlendingFunction","ETokenType","SetMatrix","source","parameter","uniformName","shaderMaterial","mat","semantic","getWorldMatrix","getProjectionMatrix","getViewMatrix","Transpose","multiply","invert","getTransformMatrix","FLOAT_MAT2","setMatrix2x2","GetAsMatrix2x2","FLOAT_MAT3","setMatrix3x3","GetAsMatrix3x3","FLOAT_MAT4","setMatrix","SetUniform","uniform","FLOAT","setFloat","FLOAT_VEC2","setVector2","FromArray","FLOAT_VEC3","setVector3","FLOAT_VEC4","setVector4","GetWrapMode","mode","CLAMP_TO_EDGE","CLAMP_ADDRESSMODE","MIRRORED_REPEAT","MIRROR_ADDRESSMODE","REPEAT","WRAP_ADDRESSMODE","GetByteStrideFromType","accessor","GetTextureFilterMode","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","TRILINEAR_SAMPLINGMODE","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_SAMPLINGMODE","BILINEAR_SAMPLINGMODE","GetBufferFromBufferView","gltfRuntime","bufferView","componentType","loadedBufferView","loadedBufferViews","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","Uint16Array","Float32Array","GetBufferFromAccessor","bufferViews","count","GLTFUtils","DecodeBufferToText","view","i","String","fromCharCode","GetDefaultMaterial","_DefaultMaterial","ShadersStore","join","attributes","uniforms","samplers","needAlphaBlending","vertex","fragment","setColor4","toParse","_pos","currentToken","UNKNOWN","currentIdentifier","currentString","isLetterOrDigitPattern","_toParse","_maxPos","getNextToken","isEnd","END_OF_INPUT","read","test","IDENTIFIER","peek","forward","glTFTransforms","babylonTransforms","glTFAnimationPaths","babylonAnimationPaths","parseObject","parsedObjects","runtimeProperty","object","parsedObject","normalizeUVs","getAttribute","attributeParameter","channel","node","translation","rotation","scale","position","Compose","matrix","getParentBone","skins","jointName","newSkeleton","bones","nodes","nde","children","child","bone","getNodeToRoot","nodesToRoot","nodeToRoot","j","getJointNode","nodeIsInJoints","jointNames","mesh","babylonSkeleton","nodesToRootToAdd","k","_parent","jointNode","existingBone","getBoneByID","foundBone","parentBone","joint","prepare","newMesh","_blockEntityCollection","forAssetContainer","babylonNode","subMaterials","vertexData","verticesStarts","verticesCounts","indexStarts","indexCounts","meshIndex","meshID","primitives","tempVertexData","primitive","accessors","normals","set","positions","uvKind","UVKind","uvs","matricesIndices","matricesWeights","colors","indices","Int32Array","merge","getMaterialByID","computeWorldMatrix","subMeshes","AddToMesh","configureNode","newNode","scaling","rotationQuaternion","parent","lastNode","importOnlyMeshes","skin","importMeshesNames","skeleton","getLastSkeletonByID","light","camera","cameras","orthoCamera","Zero","ORTHOGRAPHIC_CAMERA","attachControl","getEngine","getInputElement","perspectiveCamera","persCamera","aspectRatio","getRenderWidth","getRenderHeight","znear","zfar","maxZ","minZ","ambienLight","hemiLight","color","diffuse","directionalLight","dirLight","pointLight","ptLight","spotLight","spLight","fallOfAngle","angle","fallOffExponent","exponent","dummy","decompose","updateCache","traverseNodes","meshIncluded","postLoad","currentScene","thing","scenes","anim","animations","animation","channels","lastAnimation","sampler","inputData","outputData","parameters","input","output","bufferInput","bufferOutput","targetID","target","targetNode","getNodeByID","getNodeByName","isBone","targetPath","path","targetPathIndex","animationType","ANIMATIONTYPE_MATRIX","ANIMATIONTYPE_QUATERNION","ANIMATIONTYPE_VECTOR3","babylonAnimation","keys","arrayOffset","modifyKey","getKeys","ANIMATIONLOOPMODE_CYCLE","getBaseMatrix","frame","setKeys","stopAnimation","beginAnimation","MAX_VALUE","onShaderCompileSuccess","technique","unTreatedUniforms","_","materialValues","values","techniqueUniforms","unif","onLoadTexture","setTexture","SAMPLER_2D","GLTFLoaderExtension","LoadTextureAsync","onBind","getEffect","babylonTexture","parseShaderUniforms","tokenizer","uniformParameter","transformIndex","importMaterials","LoadMaterialAsync","CreateRuntime","parsedData","buffers","images","shaders","programs","techniques","extensionsUsed","buffersCount","shaderscount","loadedBufferCount","loadedShaderCount","dummyNodes","parsedBuffers","buf","parsedBuffer","parseBuffers","parsedShaders","sha","parsedShader","parseShaders","LoadBufferAsync","IsBase64","setTimeout","DecodeBase64","LoadFile","status","statusText","LoadTextureBufferAsync","CreateTextureAsync","createMipMaps","minFilter","NEAREST_MIPMAP_LINEAR","samplingMode","blob","blobURL","revokeBlobURL","revokeObjectURL","newTexture","wrapS","wrapU","wrapT","wrapV","LoadShaderStringAsync","shader","shaderString","atob","defaultMaterial","diffuseColor","sideOrientation","CounterClockWiseSideOrientation","program","states","vertexShader","pixelShader","fragmentShader","newVertexShader","newPixelShader","vertexTokenizer","Tokenizer","pixelTokenizer","attr","attribute","foundAttribute","shaderPath","enable","effect","onShaderCompileError","onCompiled","functions","cullFace","BACK","backFaceCulling","blendFunc","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","alphaMode","ALPHA_COMBINE","ZERO","ALPHA_ONEONE","ALPHA_ADD","ONE_MINUS_SRC_COLOR","ALPHA_SUBTRACT","DST_COLOR","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","RegisterExtension","extension","GLTFLoader","Extensions","_importMeshAsync","useRightHandedSystem","LoadRuntimeAsync","_createNodes","skl","_loadBuffersAsync","_loadShadersAsync","_loadAsync","LoadRuntimeExtensionsAsync","onload","hasShaders","processShader","VERTEX","bind","onLoad","hasBuffers","processBuffer","_name","loadRuntimeAsync","loadRuntimeExtensionsAsync","loadBufferAsync","loadTextureBufferAsync","createTextureAsync","loadShaderStringAsync","loadMaterialAsync","ApplyExtensions","loaderExtension","func","defaultFunc","extensionName","_bin","sourceExt","binaryExtensionShader","shaderBytes","ambientLight","ambient","point","directional","spot","fallOffAngle","Math","PI","standardMaterial","disableLighting","doubleSided","alpha","transparency","specularPower","shininess","_loadTexture","ambientColor","emission","emissiveColor","specular","specularColor","propertyPath","Get","context","array","Assign","_completePromises","_forAssetContainer","_babylonLights","_disposed","_state","_extensions","_defaultBabylonMaterialData","_requests","factory","UnregisterExtension","_RegisteredExtensions","_gltf","_babylonScene","_rootBabylonMesh","_progressCallback","_rootUrl","_fileName","_loadData","map","_getMeshes","_getSkeletons","_getAnimationGroups","_getTransformNodes","resultFunc","_uniqueRootUrl","Date","now","_loadExtensions","_checkExtensions","loadingToReadyCounterName","LOADING","READY","loadingToCompleteCounterName","COMPLETE","_setState","_extensionsOnLoading","promises","oldBlockMaterialDirtyMechanism","blockMaterialDirtyMechanism","loadSceneAsync","ArrayItem","_compileMaterialsAsync","_compileShadowGeneratorsAsync","resultPromise","all","setEnabled","_extensionsOnReady","_startAnimations","SetImmediate","_setupData","binaryBuffer","nodeParents","rootNode","_createRootNode","parentIndex","sort","order","extensionsRequired","some","log","_babylonTransformNode","_LoadTransform","FORCE_RIGHT_HANDED","extensionPromise","_extensionsLoadSceneAsync","logOpen","loadNodeAsync","babylonMesh","_babylonBones","linkTransformNode","_loadAnimationsAsync","logClose","_forEachPrimitive","_primitiveBabylonMeshes","getClassName","_data","_babylonAnimationGroup","NONE","babylonAnimationGroups","start","ALL","assign","_extensionsLoadNodeAsync","loadNode","babylonTransformNode","AddPointerMetadata","loadCameraAsync","babylonCamera","childNode","childBabylonMesh","nodeName","_loadMeshAsync","refreshBoundingInfo","_loadMeshPrimitiveAsync","_loadSkinAsync","_extensionsLoadMeshPrimitiveAsync","babylonAbstractMesh","promise","shouldInstance","targets","_instanceData","babylonSourceMesh","createInstance","overrideMaterialSideOrientation","ClockWiseSideOrientation","_createMorphTargets","_loadVertexDataAsync","babylonGeometry","_loadMorphTargetsAsync","applyToMesh","babylonDrawMode","_GetDrawMode","babylonMaterial","_createDefaultMaterial","_loadMaterialAsync","_extensionsLoadVertexDataAsync","isUnIndexed","_loadIndicesAccessorAsync","setIndices","loadAttribute","kind","_delayInfo","_loadVertexAccessorAsync","babylonVertexBuffer","setVerticesBuffer","MatricesIndicesExtraKind","numBoneInfluencers","PositionKind","NormalKind","TangentKind","UV2Kind","MatricesIndicesKind","MatricesWeightsKind","MatricesWeightsExtraKind","ColorKind","hasVertexAlpha","_numMorphTargets","targetNames","extras","morphTargetManager","getScene","weight","weights","addTarget","numTargets","babylonMorphTarget","getTarget","_loadMorphTargetVertexDataAsync","setData","getVertexBuffer","_loadFloatAccessorAsync","setPositions","setNormals","tangents","dataIndex","setTangents","Identity","One","_extensionsLoadSkinAsync","assignSkeleton","skeletonId","overrideMesh","_loadBones","_loadSkinInverseBindMatricesDataAsync","inverseBindMatricesData","_updateBoneMatrices","babylonBones","joints","_loadBone","babylonBone","babylonParentBone","boneIndex","_getNodeMatrix","inverseBindMatrices","baseMatrix","_index","FromArrayToRef","invertToRef","getParent","multiplyToRef","getInvertedAbsoluteTransform","updateMatrix","_updateDifferenceMatrix","_extensionsLoadCameraAsync","perspective","fov","yfov","orthographic","orthoLeft","xmag","orthoRight","orthoBottom","ymag","orthoTop","loadAnimationAsync","_extensionsLoadAnimationAsync","babylonAnimationGroup","_loadAnimationChannelAsync","normalize","animationContext","animationTargetOverride","_loadAnimationSamplerAsync","ANIMATIONTYPE_FLOAT","getNextOutputValue","getNextKey","outputBufferOffset","interpolation","frameIndex","STEP","inTangent","outTangent","targetIndex","animationName","targetedAnimations","key","morphTarget","babylonAnimationClone","clone","addTargetedAnimation","inputAccessor","outputAccessor","_loadBufferAsync","_extensionsLoadBufferAsync","loadUriAsync","e","loadBufferViewAsync","_extensionsLoadBufferViewAsync","_loadAccessorAsync","constructor","numComponents","_GetNumComponents","byteStride","GetTypeByteLength","normalized","ForEach","_GetTypedArray","sparse","typedArray","indicesBufferView","valuesBufferView","indicesData","valuesData","sparseLength","sparseData","valuesIndex","indicesIndex","componentIndex","_GetTypedArrayConstructor","_loadVertexBufferViewAsync","_babylonBuffer","_babylonVertexBuffer","babylonBuffer","size","_loadMaterialMetallicRoughnessPropertiesAsync","properties","baseColorFactor","albedoColor","White","metallic","metallicFactor","roughness","roughnessFactor","baseColorTexture","loadTextureInfoAsync","albedoTexture","metallicRoughnessTexture","metallicTexture","useMetallnessFromMetallicTextureBlue","useRoughnessFromMetallicTextureGreen","useRoughnessFromMetallicTextureAlpha","_extensionsLoadMaterialAsync","babylonData","createMaterial","babylonMeshes","loadMaterialPropertiesAsync","splice","fillMode","enableSpecularAntiAliasing","useRadianceOverAlpha","useSpecularOverAlpha","transparencyMode","PBRMATERIAL_OPAQUE","_extensionsCreateMaterial","_extensionsLoadMaterialPropertiesAsync","loadMaterialBasePropertiesAsync","pbrMetallicRoughness","loadMaterialAlphaProperties","emissiveFactor","twoSidedLighting","normalTexture","bumpTexture","invertNormalMapX","invertNormalMapY","level","forceIrradianceInFragment","occlusionTexture","ambientTexture","useAmbientInGrayScale","strength","ambientTextureStrength","emissiveTexture","PBRMATERIAL_ALPHATEST","alphaCutOff","alphaCutoff","hasAlpha","PBRMATERIAL_ALPHABLEND","useAlphaFromAlbedoTexture","textureInfo","_extensionsLoadTextureInfoAsync","texCoord","_loadTextureAsync","coordinatesIndex","_extensionsLoadTextureAsync","DefaultSampler","image","_createTextureAsync","samplerData","_loadSampler","deferred","noMipMaps","exception","mimeType","loadImageAsync","dataUrl","updateURL","_GetTextureSamplingMode","_GetTextureWrapMode","property","_extensionsLoadUriAsync","_ValidateUri","fileData","event","_lengthComputable","lengthComputable","_loaded","loaded","_total","total","_onProgress","offlineProvider","babylonObject","pointer","metadata","gltf","pointers","magFilter","LINEAR_NEAREST","LINEAR_LINEAR","LINEAR_NEAREST_MIPNEAREST","LINEAR_LINEAR_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","LINEAR_LINEAR_MIPLINEAR","NEAREST_NEAREST","NEAREST_LINEAR","NEAREST_NEAREST_MIPNEAREST","NEAREST_LINEAR_MIPNEAREST","NEAREST_NEAREST_MIPLINEAR","NEAREST_LINEAR_MIPLINEAR","Uint32Array","PointListDrawMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","TriangleFillMode","TriangleStripDrawMode","TriangleFanDrawMode","forceCompilationAsync","useInstances","clipPlane","getShadowGenerator","_forEachExtensions","action","enabled","_applyExtensions","functionName","actionAsync","loaderProperty","_activeLoaderExtensionFunctions","activeLoaderExtensionFunctions","onLoading","onReady","_loadUriAsync","LoadExtensionAsync","LoadExtraAsync","extra","isExtensionUsed","startPerformanceCounter","endPerformanceCounter","NAME","loader","_lights","extensionContext","_loadLightAsync","babylonScene","environmentTexture","specularImages","mipmap","faces","face","specularImageContext","specularImageSize","_babylonTexture","intensity","Inverse","FromQuaternionToRef","getReflectionTextureMatrix","sphericalHarmonics","irradianceCoefficients","scaleInPlace","convertIrradianceToLambertianRadiance","sphericalPolynomial","FromHarmonics","lodGenerationScale","Log2","updateRGBDAsync","DecoderAvailable","dracoCompression","uniqueId","_dracoBabylonGeometry","Default","decodeMeshAsync","babylonVertexData","applyToGeometry","catch","LightType","babylonLight","DIRECTIONAL","Backward","POINT","SPOT","babylonSpotLight","outerConeAngle","innerAngle","innerConeAngle","falloffType","FALLOFF_GLTF","range","_loadSpecularGlossinessPropertiesAsync","diffuseFactor","reflectivityColor","specularFactor","microSurface","glossinessFactor","diffuseTexture","specularGlossinessTexture","reflectivityTexture","useMicroSurfaceFromReflectivityMapAlpha","_loadUnlitPropertiesAsync","unlit","_loadClearCoatPropertiesAsync","clearCoat","isEnabled","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","_loadSheenPropertiesAsync","sheen","intensityFactor","colorFactor","colorIntensityTexture","_loadSpecularPropertiesAsync","metallicF0Factor","specularTexture","useMetallicF0FactorFromMetallicTexture","KHR_mesh_quantization","gammaSpace","offset","uOffset","vOffset","uRotationCenter","vRotationCenter","wAng","uScale","vScale","_clips","_emitters","clips","emitters","emitterIndex","emitter","refDistance","maxDistance","rolloffFactor","distanceModel","outerAngle","_loadEmitterAsync","_babylonSounds","sound","attachToMesh","setLocalDirectionToMesh","Forward","setDirectionalCone","ToDegrees","events","_loadAnimationEventAsync","_loadClipAsync","clip","_objectURL","_babylonData","clipPromises","loop","autoplay","volume","clipContext","objectURL","_positionInEmitterSpace","weightedSound","directionalConeInnerAngle","directionalConeOuterAngle","_getEventAction","time","startOffset","currentFrame","frameOffset","play","stop","pause","babylonAnimationEvent","addEvent","onAnimationGroupEndObservable","onAnimationGroupPauseObservable","maxLODsToLoad","onNodeLODsLoadedObservable","onMaterialLODsLoadedObservable","_nodeIndexLOD","_nodeSignalLODs","_nodePromiseLODs","_materialIndexLOD","_materialSignalLODs","_materialPromiseLODs","_indexLOD","_bufferLODs","indexLOD","_loadBufferLOD","firstPromise","nodeLODs","_getLODs","ids","nodeLOD","previousNodeLOD","_disposeTransformNode","materialLODs","materialLOD","previousDataLOD","_disposeMaterials","previousIndexLOD","end","min","max","bufferLOD","babylonMaterials","getChildMeshes","babylonMaterialsToDispose","filter","every","babylonTextures","getActiveTextures","hasTexture","extraContext","forceDepthWrite","separateCullingPass","toLinearSpaceToRef","_assignExtras","gltfProp","Object","ExtrasAsMetadata","module","exports","t","n","r","s","o","u","f","call","_dereq_","AABB","ArrayCollisionMatrix","Body","Box","Broadphase","Constraint","ContactEquation","Narrowphase","ConeTwistConstraint","ContactMaterial","ConvexPolyhedron","Cylinder","DistanceConstraint","Equation","EventTarget","FrictionEquation","GSSolver","GridBroadphase","Heightfield","HingeConstraint","LockConstraint","Mat3","Material","NaiveBroadphase","ObjectCollisionMatrix","Pool","Particle","Plane","PointToPointConstraint","Quaternion","Ray","RaycastVehicle","RaycastResult","RigidVehicle","RotationalEquation","RotationalMotorEquation","SAPBroadphase","SPHSystem","Shape","Solver","Sphere","SplitSolver","Spring","Trimesh","Vec3","Vec3Pool","World","3","lowerBound","copy","upperBound","tmp","setFromPoints","points","quaternion","skinSize","l","q","vmult","p","x","y","z","vadd","aabb","extend","overlaps","l1","u1","l2","u2","contains","getCorners","c","d","g","h","transformIntoFrame_corners","toLocalFrame","corners","corner","pointToLocal","toWorldFrame","pointToWorld","4","get","temp","reset","setNumObjects","5","world","useBoundingBoxes","dirty","collisionPairs","p1","p2","Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC","STATIC","KINEMATIC","needBroadphaseCollision","bodyA","bodyB","collisionFilterGroup","collisionFilterMask","sleepState","SLEEPING","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","vsub","boundingRadiusSum2","pow","boundingRadius","norm2","aabbNeedsUpdate","computeAABB","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","makePairsUnique","N","id1","id2","pop","pairIndex","setWorld","bsc_dist","boundingSphereCheck","dist","shape","boundingSphereRadius","aabbQuery","console","warn","6","aabbMin","aabbMax","nx","ny","nz","nbins","bins","binLengths","GridBroadphase_collisionPairs_d","numObjects","bodies","xstep","ystep","xmax","ymax","zmax","xmin","ymin","zmin","xmult","ymult","zmult","binsizeX","binsizeY","binsizeZ","binRadius","sqrt","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","Nbins","ceil","addBoxToBins","x0","y0","z0","x1","y1","z1","bi","xoff0","yoff0","zoff0","xoff1","yoff1","zoff1","xoff","yoff","zoff","idx","si","radius","worldNormalNeedsUpdate","computeWorldNormal","planeNormal","worldNormal","xreset","yreset","zreset","xi","yi","zi","dot","binLength","bj","7","8","9","Transform","from","to","_direction","precision","checkCollisionResponse","skipBackfaces","ANY","hasHit","CLOSEST","tmpAABB","tmpArray","intersectWorld","_updateDirection","getAABB","broadphase","intersectBodies","v1","v2","pointInTriangle","v0","v","dot00","dot01","dot02","dot11","dot12","intersectBody_xi","intersectBody_qi","intersectBody","body","collisionResponse","qi","shapes","mult","shapeOrientations","shapeOffsets","intersectShape","_shouldStop","quat","direction","intersect","distanceTo","distanceFromIntersection","intersectMethod","intersectPoint","intersectBox","intersectConvex","convexPolyhedronRepresentation","intersectPlane","len","planeToFrom","n_dot_dir","abs","planePointToFrom","dir_scaled_with_t","hitPointWorld","reportIntersection","intersectConvexOptions","faceList","intersectHeightfield","elementSize","worldPillarOffset","localRay","pointToLocalFrame","iMinX","iMinY","iMaxX","iMaxY","inside","getIndexOfPosition","minMax","getRectMinMax","getConvexTrianglePillar","pointToWorldFrame","pillarOffset","pillarConvex","HEIGHTFIELD","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","intersectSphere","delta","intersectionPoint","normal","lerp","d1","d2","intersectConvex_normal","intersectConvex_vector","vector","vertices","faceNormals","fromToDistance","Nfaces","fi","faceNormal","scalar","distance","intersectTrimesh_normal","intersectTrimesh_localDirection","intersectTrimesh_localFrom","intersectTrimesh_localTo","intersectTrimesh_worldNormal","intersectTrimesh_worldIntersectPoint","intersectTrimesh_triangles","intersectTrimesh_treeTransform","intersectTrimesh","triangles","treeTransform","localDirection","localFrom","localTo","worldIntersectPoint","vectorToLocalFrame","fromToDistanceSquared","distanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","vectorToWorldFrame","TRIMESH","hitFaceIndex","10","rayFromWorld","rayToWorld","hitNormalWorld","setZero","11","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","insertionSortX","insertionSortY","insertionSortZ","sortList","checkBounds","biPos","bjPos","ri","rj","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","invN","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","axis","12","ConeEquation","maxForce","pivotA","pivotB","axisA","axisB","collideConnected","coneEquation","twistEquation","twistAngle","minForce","equations","update","cone","twist","maxAngle","13","Utils","defaults","wakeUpBodies","idCounter","wakeUp","eqs","disable","14","eq","distanceEquation","halfDist","ni","15","r1","rotationalEquation1","r2","rotationalEquation2","motor","motorEquation","enableMotor","disableMotor","setMotorSpeed","speed","targetVelocity","setMotorMaxForce","HingeConstraint_update_tmpVec1","HingeConstraint_update_tmpVec2","worldAxisA","worldAxisB","16","halfWay","r3","rotationalEquation3","UNIT_X","UNIT_Y","UNIT_Z","17","equationX","equationY","equationZ","18","tmpVec1","tmpVec2","computeB","nj","nixnj","njxni","GA","jacobianElementA","GB","jacobianElementB","cross","rotational","cos","computeGW","computeGiMf","19","restitution","ContactEquation_computeB_temp1","ContactEquation_computeB_temp2","ContactEquation_computeB_temp3","rixn","rjxn","vi","velocity","wi","angularVelocity","vj","force","torque","wj","penetrationVec","negate","spatial","ePlusOne","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","ContactEquation_getImpactVelocityAlongNormal_relVel","getImpactVelocityAlongNormal","xj","relVel","getVelocityAtWorldPoint","20","JacobianElement","eps","setSpookParams","stiffness","relaxation","timeStep","GW","computeGq","zero","multiplyVectors","computeGWlambda","vlambda","wlambda","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","ti","fj","tj","invMassi","invMassSolve","invMassj","invInertiaWorldSolve","computeGiMGt","invIi","invIj","addToWlambda_temp","addToWlambda","deltalambda","computeC","21","slipForce","FrictionEquation_computeB_temp1","FrictionEquation_computeB_temp2","rixt","rjxt","22","23","24","m1","m2","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","25","26","multiplyElement","element","27","elements","identity","setTrace","vec3","getTrace","smult","mmult","m","sum","solve","eqns","nr","np","multiplier","isNaN","Infinity","toString","row","column","reverse","setRotationFromQuaternion","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","28","toArray","setFromAxisAngle","sin","toAxisAngle","targetAxis","acos","sfv_t1","sfv_t2","setFromVectors","isAntiparallelTo","t1","t2","norm","Quaternion_mult_va","Quaternion_mult_vb","Quaternion_mult_vaxvb","va","vb","vaxvb","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","heading","attitude","bank","atan2","sqx","sqy","sqz","asin","setFromEuler","c1","c2","c3","s1","s2","s3","29","tmpQuat","worldPoint","localPoint","localVector","worldVector","30","vx","vy","vz","crossmat","unit","ninv","lengthSquared","px","py","pz","isZero","Vec3_tangents_n","Vec3_tangents_randVec","inorm","randVec","almostEquals","almostZero","antip_neg","31","preStep","postStep","previousPosition","initPosition","initVelocity","mass","invMass","linearDamping","DYNAMIC","allowSleep","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","_wakeUpAfterNarrowphase","initQuaternion","initAngularVelocity","interpolatedPosition","interpolatedQuaternion","inertia","invInertia","invInertiaWorld","invInertiaSolve","fixedRotation","angularDamping","addShape","updateMassProperties","AWAKE","SLEEPY","dispatchEvent","sleep","sleepyEvent","sleepEvent","sleepTick","speedSquared","speedLimitSquared","updateSolveMassProperties","tmpVec","_offset","_orientation","orientation","updateBoundingRadius","updateBoundingSphereRadius","computeAABB_shapeAABB","bodyQuat","shapeAABB","calculateWorldAABB","uiw_m1","uiw_m2","updateInertiaWorld","I","Body_applyForce_r","Body_applyForce_rotForce","applyForce","rotForce","Body_applyLocalForce_worldForce","Body_applyLocalForce_worldPoint","applyLocalForce","localForce","worldForce","Body_applyImpulse_r","Body_applyImpulse_velo","Body_applyImpulse_rotVelo","applyImpulse","impulse","velo","rotVelo","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_worldPoint","applyLocalImpulse","localImpulse","worldImpulse","Body_updateMassProperties_halfExtents","halfExtents","fixed","calculateInertia","32","WheelInfo","chassisBody","wheelInfos","sliding","indexRightAxis","indexForwardAxis","indexUpAxis","tmpVec4","tmpVec5","tmpVec6","addWheel","info","setSteeringValue","wheelIndex","steering","applyEngineForce","engineForce","setBrake","brake","addToWorld","constraints","that","preStepCallback","updateVehicle","dt","getVehicleAxisWorld","numWheels","updateWheelTransform","currentVehicleSpeedKmHour","forwardWorld","castRay","updateSuspension","relpos","suspensionForce","wheel","maxSuspensionForce","raycastResult","updateFriction","hitNormalWorldScaledWithProj","fwd","vel","chassisConnectionPointWorld","isInContact","proj","proj2","deltaRotation","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","deltaTime","chassisMass","w_it","length_diff","suspensionRestLength","suspensionLength","suspensionStiffness","clippedInvContactDotSuspension","projected_rel_vel","suspensionRelativeVelocity","dampingCompression","dampingRelaxation","removeFromWorld","castRay_rayvector","castRay_target","rayvector","updateWheelTransformWorld","depth","raylen","directionWorld","oldState","rayTest","groundObject","hitDistance","minSuspensionLength","maxSuspensionTravel","maxSuspensionLength","denominator","chassis_velocity_at_contactPoint","projVel","inv","chassisConnectionPointLocal","directionLocal","axleLocal","axleWorld","up","right","steeringOrn","rotatingOrn","worldTransform","directions","getWheelTransformWorld","updateFriction_surfNormalWS_scaled_proj","updateFriction_axle","updateFriction_forwardWS","surfNormalWS_scaled_proj","forwardWS","axle","sideImpulse","forwardImpulse","axlei","surfNormalWS","resolveSingleBilateral","rollingFriction","slipInfo","maxImpulse","calcRollingFriction","factor","skidInfo","maximp","frictionSlip","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","rollInfluence","calcRollingFriction_vel1","calcRollingFriction_vel2","calcRollingFriction_vel","body0","body1","frictionPosWorld","frictionDirectionWorld","j1","contactPosWorld","vel1","vel2","computeImpulseDenominator","computeImpulseDenominator_r0","computeImpulseDenominator_c0","computeImpulseDenominator_vec","computeImpulseDenominator_m","pos","r0","c0","vec","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","pos1","body2","pos2","33","wheelBodies","coordinateSystem","chassisShape","wheelAxes","wheelForces","wheelBody","worldPosition","hingeConstraint","motorTargetVelocity","setWheelForce","applyWheelForce","bodyTorque","concat","addConstraint","_update","removeConstraint","worldAxis","getWheelSpeed","34","particles","density","smoothingRadius","speedOfSound","viscosity","pressures","densities","neighbors","particle","SPHSystem_getNeighbors_dist","getNeighbors","R2","SPHSystem_update_dist","SPHSystem_update_a_pressure","SPHSystem_update_a_visc","SPHSystem_update_gradW","SPHSystem_update_r_vec","SPHSystem_update_u","cs","numNeighbors","a_pressure","a_visc","gradW","r_vec","Pij","nabla","neighbor","gradw","nablaw","rVec","resultVec","35","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","applyForce_ri_x_f","applyForce_rj_x_f","applyForce_tmp","r_unit","ri_x_f","rj_x_f","rlen","36","suspensionMaxLength","isFrontWheel","updateWheel","chassis","project","37","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateLocalInertia","getSideNormals","sixTargetVectors","sides","ex","worldCornerTempPos","forEachWorldCorner","worldCornersTemp","wc","38","uniqueAxes","worldVertices","worldVerticesNeedsUpdate","computeNormals","worldFaceNormalsNeedsUpdate","worldFaceNormals","uniqueEdges","slice","computeEdges","computeEdges_tmpEdge","edges","edge","numVertices","found","getFaceNormal","cb","ab","computeNormal","vc","cah_WorldNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","worldVertsB1","polyB","e0","worldb","clipFaceAgainstHull","fsa_faceANormalWS3","fsa_Worldnormal1","fsa_deltaC","fsa_worldEdge0","fsa_worldEdge1","fsa_Cross","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","testSepAxis","numFacesA","numFacesB","e1","maxminA","maxminB","maxA","minA","maxB","minB","d0","cli_aabbmin","cli_aabbmax","computeLocalAABB","getPlaneConstantOfFace","face_i","cfah_faceANormalWS","cfah_edge0","cfah_WorldEdge0","cfah_worldPlaneAnormal1","cfah_planeNormalWS1","cfah_worldA1","cfah_localPlaneNormal","cfah_planeNormalWS","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","planeEqWS","clipFaceAgainstPlane","shift","inVertices","outVertices","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","newv","computeWorldVertices","verts","worldVerts","aabbmin","aabbmax","computeWorldFaceNormals","worldNormals","max2","tempWorldVertex","minx","miny","minz","maxx","maxy","maxz","getAveragePointLocal","transformAllPoints","ConvexPolyhedron_pointIsInside","ConvexPolyhedron_vToP","ConvexPolyhedron_vToPointInside","pointIsInside","pointInside","vToP","vToPointInside","project_localAxis","project_localOrigin","hull","localAxis","localOrigin","vs","val","39","radiusTop","radiusBottom","height","numSegments","axes","bottomface","topface","theta","thetaN","40","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","clearCachedConvexTrianglePillar","clamp","floor","getHeightAt","edgeClamp","minmax","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","41","PARTICLE","42","tempNormal","maxVal","43","CYLINDER","44","ax","45","Octree","updateEdges","updateNormals","updateAABB","updateTree","computeNormals_n","triangleAABB","i3","_getUnscaledVertex","insert","removeEmptyNodes","unscaledAABB","getTrianglesInAABB","isx","isy","isz","setScale","wasUniform","isUniform","indexA","indexB","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector_va","getEdgeVector_vb","getEdgeVector","vectorStore","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","tube","radialSegments","tubularSegments","arc","46","iterations","tolerance","GSSolver_solve_lambda","GSSolver_solve_invCs","GSSolver_solve_Bs","B","invC","deltalambdaTot","lambdaj","iter","maxIter","tolSquared","Neq","Nbodies","invCs","Bs","lambda","47","addEquation","removeEquation","removeAllEquations","48","subsolver","nodePool","createNode","SplitSolver_solve_nodes","SplitSolver_solve_eqs","SplitSolver_solve_dummyWorld","getUnvisitedNode","Nnodes","visited","queue","bfs","root","visitFunc","bds","Neqs","sortById","dummyWorld","49","listener","_listeners","listeners","hasEventListener","listenerArray","50","OctreeNode","maxDepth","elementData","nodeData","subdivided","subdivide","halfDiagonal","ray","51","objects","release","Nargs","arguments","constructObject","52","TupleDictionary","53","54","55","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","enableFrictionReduction","createContactEquation","sj","rsi","rsj","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","averageNormal","averageContactPointA","averageContactPointB","createFrictionFromAverage","numContacts","f1","f2","invNumContacts","tmpQuat1","tmpQuat2","getContacts","oldcontacts","frictionPool","qj","bodyContactMaterial","getContactMaterial","shapeContactMaterial","defaultContactMaterial","resolver","boxBox","convexConvex","boxConvex","boxParticle","convexParticle","sphereSphere","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","planeTrimesh","planeShape","trimeshShape","planePos","trimeshPos","planeQuat","trimeshQuat","planeBody","trimeshBody","projected","sphereTrimesh_normal","sphereTrimesh_relpos","sphereTrimesh_v","sphereTrimesh_v2","sphereTrimesh_edgeVertexA","sphereTrimesh_edgeVertexB","sphereTrimesh_edgeVector","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_localSphereAABB","sphereTrimesh_triangles","sphereTrimesh","sphereShape","spherePos","sphereQuat","sphereBody","edgeVertexA","edgeVertexB","edgeVector","edgeVectorUnit","localSpherePos","localSphereAABB","sphereRadius","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","point_on_plane_to_sphere","plane_to_sphere_ortho","spherePlane","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","pointInPolygon","positiveResult","edge_x_normal","vertex_to_p","box_to_sphere","sphereBox_ns","sphereBox_ns1","sphereBox_ns2","sphereBox_sides","sphereBox_sphere_to_corner","sphereBox_side_ns","sphereBox_side_ns1","sphereBox_side_ns2","sphereBox","R","side_ns","side_ns1","side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","ns1","ns2","h1","h2","dot1","dot2","sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","convex_to_sphere","sphereConvex_edge","sphereConvex_edgeUnit","sphereConvex_sphereToCorner","sphereConvex_worldCorner","sphereConvex_worldNormal","sphereConvex_worldPoint","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","sphereConvex_sphereToWorldPoint","sphereConvex","worldCorner","nfaces","worldSpherePointClosestToPlane","penetration","worldPointToSphere","faceVerts","Nverts","worldVertex","penetrationVec2","penetrationSpherePoint","Nfaceverts","edgeUnit","v1_to_xi","xi_to_p","planeBox","planeConvex","planeConvex_v","planeConvex_normal","planeConvex_relpos","planeConvex_projected","convexShape","planePosition","convexPosition","convexQuat","convexBody","convexConvex_sepAxis","convexConvex_q","sepAxis","particlePlane_normal","particlePlane_relpos","particlePlane_projected","planeParticle","particleSphere_normal","sphereParticle","cqj","convexParticle_local","convexParticle_penetratedFaceNormal","convexParticle_vertexToParticle","convexParticle_worldPenetrationVec","penetratedFaceIndex","penetratedFaceNormal","worldPenetrationVec","minPenetration","local","boxHeightfield","convexHeightfield","convexHeightfield_tmp1","convexHeightfield_tmp2","convexHeightfield_faceList","hfShape","convexPos","hfPos","hfQuat","hfBody","localConvexPos","sphereHeightfield_tmp1","sphereHeightfield_tmp2","sphereHeightfield","numContactsBefore","56","contacts","frictionEquations","quatNormalizeSkip","quatNormalizeFast","stepnumber","default_dt","nextId","solver","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","doProfiling","profile","makeContactConstraints","integrate","subsystems","addBodyEvent","removeBodyEvent","tmpRay","collisionMatrixTick","addBody","raycastClosest","raycastAll","raycastAny","removeBody","addMaterial","addContactMaterial","cmat","performance","nowOffset","timing","navigationStart","step_tmp1","step","timeSinceLastCalled","maxSubSteps","internalStep","internalSteps","t0","h_div_dt","interpvelo","World_step_postStepEvent","World_step_preStepEvent","World_step_collideEvent","contact","World_step_oldContacts","World_step_frictionEquationPool","World_step_p1","World_step_p2","World_step_step_w","World_step_step_wq","invI_tau_dt","profilingStart","gx","gy","gz","Nsubsystems","Nconstraints","NoldContacts","NoldFrictionEquations","ncontacts","ld","av","ad","wq","DYNAMIC_OR_KINEMATIC","quatNormalize","half_dt","tau","angularVelo","clearForces"],"mappings":"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","file":"static/js/7.25022b81.chunk.js","sourcesContent":["import * as GLTF2 from 'babylonjs-gltf2interface';\r\nimport { Tools } from '@babylonjs/core/Misc/tools';\r\n\r\ndeclare var GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction validateAsync(data: string | ArrayBuffer, rootUrl: string, fileName: string, getExternalResource: (uri: string) => Promise<ArrayBuffer>): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: (uri) => getExternalResource(uri).then((value) => new Uint8Array(value))\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = (rootUrl === \"file:\" ? fileName : rootUrl + fileName);\r\n    }\r\n\r\n    return (data instanceof ArrayBuffer)\r\n        ? GLTFValidator.validateBytes(new Uint8Array(data), options)\r\n        : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction workerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void, reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                validateAsync(data.data, data.rootUrl, data.fileName, (uri) => new Promise((resolve, reject) => {\r\n                    const index = pendingExternalResources.length;\r\n                    pendingExternalResources.push({ resolve, reject });\r\n                    postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                })).then((value) => {\r\n                    postMessage({ id: \"validate.resolve\", value: value });\r\n                }, (reason) => {\r\n                    postMessage({ id: \"validate.reject\", reason: reason });\r\n                });\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: \"https://preview.babylonjs.com/gltf_validator.js\"\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(data: string | ArrayBuffer, rootUrl: string, fileName: string, getExternalResource: (uri: string) => Promise<ArrayBuffer>): Promise<GLTF2.IGLTFValidationResults>\r\n    {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${validateAsync}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then((value) => {\r\n                                worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value]);\r\n                            }, (reason) => {\r\n                                worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                            });\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(data.reason);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: Tools.GetAbsoluteUrl(this.Configuration.url) });\r\n                worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n            });\r\n        }\r\n        else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return validateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\r\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\r\nimport { IParticleSystem } from \"@babylonjs/core/Particles/IParticleSystem\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SceneLoader, ISceneLoaderPluginFactory, ISceneLoaderPlugin, ISceneLoaderPluginAsync, SceneLoaderProgressEvent, ISceneLoaderPluginExtensions } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\r\nimport { Scene, IDisposable } from \"@babylonjs/core/scene\";\r\nimport { WebRequest } from \"@babylonjs/core/Misc/webRequest\";\r\nimport { IFileRequest } from \"@babylonjs/core/Misc/fileRequest\";\r\nimport { Logger } from '@babylonjs/core/Misc/logger';\r\nimport { DataReader, IDataBuffer } from '@babylonjs/core/Misc/dataReader';\r\nimport { GLTFValidation } from './glTFValidation';\r\nimport { Light } from '@babylonjs/core/Lights/light';\r\nimport { TransformNode } from '@babylonjs/core/Meshes/transformNode';\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    json: Object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<IDataBuffer>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines the order of this extension.\r\n     * The loader sorts the extensions using these values when loading.\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE\r\n}\r\n\r\n/** @hidden */\r\nexport interface IImportMeshAsyncOutput {\r\n    meshes: AbstractMesh[];\r\n    particleSystems: IParticleSystem[];\r\n    skeletons: Skeleton[];\r\n    animationGroups: AnimationGroup[];\r\n    lights: Light[];\r\n    transformNodes: TransformNode[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    readonly state: Nullable<GLTFLoaderState>;\r\n    importMeshAsync: (meshesNames: any, scene: Scene, forAssetContainer: boolean, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string) => Promise<IImportMeshAsyncOutput>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @hidden */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @hidden */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: (loaderData: IGLTFLoaderData) => void) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        this._onParsedObserver = this.onParsedObservable.add(callback);\r\n    }\r\n\r\n    // ----------\r\n    // V1 options\r\n    // ----------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @hidden\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @hidden\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n    * The animation start mode. Defaults to FIRST.\r\n    */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Defines if the loader should use range requests when load binary glTF files from HTTP.\r\n     * Enabling will disable offline support and glTF validator.\r\n     * Defaults to false.\r\n     */\r\n    public useRangeRequests = false;\r\n\r\n    /**\r\n     * Defines if the loader should create instances when multiple glTF nodes point to the same glTF mesh. Defaults to true.\r\n     */\r\n    public createInstances = true;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     */\r\n    public set onMeshLoaded(callback: (mesh: AbstractMesh) => void) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: (texture: BaseTexture) => void) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: (material: Material) => void) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: (camera: Camera) => void) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        }\r\n        else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        }\r\n        else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public name = \"gltf\";\r\n\r\n    /** @hidden */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".gltf\": { isBinary: false },\r\n        \".glb\": { isBinary: true }\r\n    };\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        this._clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _clear(): void {\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n    }\r\n\r\n    /** @hidden */\r\n    public requestFile(scene: Scene, url: string, onSuccess: (data: any, request?: WebRequest) => void, onProgress?: (ev: ProgressEvent) => void, useArrayBuffer?: boolean, onError?: (error: any) => void): IFileRequest {\r\n        if (useArrayBuffer) {\r\n            if (this.useRangeRequests) {\r\n                if (this.validate) {\r\n                    Logger.Warn(\"glTF validation is not supported when range requests are enabled\");\r\n                }\r\n\r\n                const fileRequests = new Array<IFileRequest>();\r\n                const aggregatedFileRequest: IFileRequest = {\r\n                    abort: () => fileRequests.forEach((fileRequest) => fileRequest.abort()),\r\n                    onCompleteObservable: new Observable<IFileRequest>()\r\n                };\r\n\r\n                const dataBuffer = {\r\n                    readAsync: (byteOffset: number, byteLength: number) => {\r\n                        return new Promise<ArrayBufferView>((resolve, reject) => {\r\n                            fileRequests.push(scene._requestFile(url, (data, webRequest) => {\r\n                                const contentRange = webRequest!.getResponseHeader(\"Content-Range\");\r\n                                if (contentRange) {\r\n                                    dataBuffer.byteLength = Number(contentRange.split(\"/\")[1]);\r\n                                }\r\n                                resolve(new Uint8Array(data as ArrayBuffer));\r\n                            }, onProgress, true, true, (error) => {\r\n                                reject(error);\r\n                            }, (webRequest) => {\r\n                                webRequest.setRequestHeader(\"Range\", `bytes=${byteOffset}-${byteOffset + byteLength - 1}`);\r\n                            }));\r\n                        });\r\n                    },\r\n                    byteLength: 0\r\n                };\r\n\r\n                this._unpackBinaryAsync(new DataReader(dataBuffer)).then((loaderData) => {\r\n                    aggregatedFileRequest.onCompleteObservable.notifyObservers(aggregatedFileRequest);\r\n                    onSuccess(loaderData);\r\n                }, onError);\r\n\r\n                return aggregatedFileRequest;\r\n            }\r\n\r\n            return scene._requestFile(url, (data, request) => {\r\n                const arrayBuffer = data as ArrayBuffer;\r\n                this._unpackBinaryAsync(new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength)),\r\n                    byteLength: arrayBuffer.byteLength\r\n                })).then((loaderData) => {\r\n                     onSuccess(loaderData, request);\r\n                }, onError);\r\n            }, onProgress, true, true, onError);\r\n        }\r\n\r\n        return scene._requestFile(url, (data, response) => {\r\n            this._validate(scene, data, Tools.GetFolderPath(url), Tools.GetFilename(url));\r\n            onSuccess({ json: this._parseJson(data as string) }, response);\r\n        }, onProgress, true, false, onError);\r\n    }\r\n\r\n    /** @hidden */\r\n    public readFile(scene: Scene, file: File, onSuccess: (data: any) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: any) => void): IFileRequest {\r\n        return scene._readFile(file, (data) => {\r\n            this._validate(scene, data, \"file:\", file.name);\r\n            if (useArrayBuffer) {\r\n                const arrayBuffer = data as ArrayBuffer;\r\n                this._unpackBinaryAsync(new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength)),\r\n                    byteLength: arrayBuffer.byteLength\r\n                })).then(onSuccess, onError);\r\n            }\r\n            else {\r\n                onSuccess({ json: this._parseJson(data as string) });\r\n            }\r\n        }, onProgress, useArrayBuffer, onError);\r\n    }\r\n\r\n    /** @hidden */\r\n    public importMeshAsync(meshesNames: any, scene: Scene, data: any, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<{ meshes: AbstractMesh[], particleSystems: IParticleSystem[], skeletons: Skeleton[], animationGroups: AnimationGroup[] }> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.importMeshAsync(meshesNames, scene, false, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.loadAsync(scene, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadAssetContainerAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            const materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            const textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, true, data, rootUrl, onProgress, fileName).then((result) => {\r\n                const container = new AssetContainer(scene);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                Array.prototype.push.apply(container.lights, result.lights);\r\n                Array.prototype.push.apply(container.transformNodes, result.transformNodes);\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public canDirectLoad(data: string): boolean {\r\n        return data.indexOf(\"asset\") !== -1 && data.indexOf(\"version\") !== -1;\r\n    }\r\n\r\n    /** @hidden */\r\n    public directLoad(scene: Scene, data: string): any {\r\n        this._validate(scene, data);\r\n        return { json: this._parseJson(data) };\r\n    }\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    public rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n\r\n    /** @hidden */\r\n    public createPlugin(): ISceneLoaderPlugin | ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader();\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._loader ? this._loader.state : null;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _validate(scene: Scene, data: string | ArrayBuffer, rootUrl = \"\", fileName = \"\"): void {\r\n        if (!this.validate) {\r\n            return;\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n        GLTFValidation.ValidateAsync(data, rootUrl, fileName, (uri) => {\r\n            return this.preprocessUrlAsync(rootUrl + uri).then((url) => (scene._loadFileAsync(url, undefined, true, true) as Promise<ArrayBuffer>));\r\n        }).then((result) => {\r\n            this._endPerformanceCounter(\"Validate JSON\");\r\n            this.onValidatedObservable.notifyObservers(result);\r\n            this.onValidatedObservable.clear();\r\n        }, (reason) => {\r\n            this._endPerformanceCounter(\"Validate JSON\");\r\n            Tools.Warn(`Failed to validate: ${reason.message}`);\r\n            this.onValidatedObservable.clear();\r\n        });\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _parseJson(json: string): Object {\r\n        this._startPerformanceCounter(\"Parse JSON\");\r\n        this._log(`JSON length: ${json.length}`);\r\n        const parsed = JSON.parse(json);\r\n        this._endPerformanceCounter(\"Parse JSON\");\r\n        return parsed;\r\n    }\r\n\r\n    private _unpackBinaryAsync(dataReader: DataReader): Promise<IGLTFLoaderData> {\r\n        this._startPerformanceCounter(\"Unpack Binary\");\r\n\r\n        // Read magic + version + length + json length + json format\r\n        return dataReader.loadAsync(20).then(() => {\r\n            const Binary = {\r\n                Magic: 0x46546C67\r\n            };\r\n\r\n            const magic = dataReader.readUint32();\r\n            if (magic !== Binary.Magic) {\r\n                throw new Error(\"Unexpected magic: \" + magic);\r\n            }\r\n\r\n            const version = dataReader.readUint32();\r\n\r\n            if (this.loggingEnabled) {\r\n                this._log(`Binary version: ${version}`);\r\n            }\r\n\r\n            const length = dataReader.readUint32();\r\n            if (dataReader.buffer.byteLength != 0 && length !== dataReader.buffer.byteLength) {\r\n                throw new Error(`Length in header does not match actual data length: ${length} != ${dataReader.buffer.byteLength}`);\r\n            }\r\n\r\n            let unpacked: Promise<IGLTFLoaderData>;\r\n            switch (version) {\r\n                case 1: {\r\n                    unpacked = this._unpackBinaryV1Async(dataReader, length);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    unpacked = this._unpackBinaryV2Async(dataReader, length);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unsupported version: \" + version);\r\n                }\r\n            }\r\n\r\n            this._endPerformanceCounter(\"Unpack Binary\");\r\n\r\n            return unpacked;\r\n        });\r\n    }\r\n\r\n    private _unpackBinaryV1Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ContentFormat = {\r\n            JSON: 0\r\n        };\r\n\r\n        const contentLength = dataReader.readUint32();\r\n        const contentFormat = dataReader.readUint32();\r\n\r\n        if (contentFormat !== ContentFormat.JSON) {\r\n            throw new Error(`Unexpected content format: ${contentFormat}`);\r\n        }\r\n\r\n        const bodyLength = length - dataReader.byteOffset;\r\n\r\n        const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(contentLength)), bin: null };\r\n        if (bodyLength !== 0) {\r\n            const startByteOffset = dataReader.byteOffset;\r\n            data.bin = {\r\n                readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                byteLength: bodyLength\r\n            };\r\n        }\r\n\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    private _unpackBinaryV2Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ChunkFormat = {\r\n            JSON: 0x4E4F534A,\r\n            BIN: 0x004E4942\r\n        };\r\n\r\n        // Read the JSON chunk header.\r\n        const chunkLength = dataReader.readUint32();\r\n        const chunkFormat = dataReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n\r\n        // Bail if there are no other chunks.\r\n        if (dataReader.byteOffset + chunkLength === length) {\r\n            return dataReader.loadAsync(chunkLength).then(() => {\r\n                return { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n            });\r\n        }\r\n\r\n        // Read the JSON chunk and the length and type of the next chunk.\r\n        return dataReader.loadAsync(chunkLength + 8).then(() => {\r\n            const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n\r\n            const readAsync = (): Promise<IGLTFLoaderData> => {\r\n                const chunkLength = dataReader.readUint32();\r\n                const chunkFormat = dataReader.readUint32();\r\n\r\n                switch (chunkFormat) {\r\n                    case ChunkFormat.JSON: {\r\n                        throw new Error(\"Unexpected JSON chunk\");\r\n                    }\r\n                    case ChunkFormat.BIN: {\r\n                        const startByteOffset = dataReader.byteOffset;\r\n                        data.bin = {\r\n                            readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                            byteLength: chunkLength\r\n                        };\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        // ignore unrecognized chunkFormat\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (dataReader.byteOffset !== length) {\r\n                    return dataReader.loadAsync(8).then(readAsync);\r\n                }\r\n\r\n                return Promise.resolve(data);\r\n            };\r\n\r\n            return readAsync();\r\n        });\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number, minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2])\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number, minor: number }, b: { major: number, minor: number }): number {\r\n        if (a.major > b.major) { return 1; }\r\n        if (a.major < b.major) { return -1; }\r\n        if (a.minor > b.minor) { return 1; }\r\n        if (a.minor < b.minor) { return -1; }\r\n        return 0;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @hidden */\r\n    public _log = this._logDisabled;\r\n\r\n    /** @hidden */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substr(0, this._logIndentLevel * 2);\r\n        Logger.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {\r\n    }\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @hidden */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @hidden */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {\r\n    }\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new GLTFFileLoader());\r\n}\r\n","import { Bone } from \"@babylonjs/core/Bones/bone\";\r\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Node } from \"@babylonjs/core/node\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\n/**\r\n* Enums\r\n* @hidden\r\n*/\r\nexport enum EComponentType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    FLOAT = 5126\r\n}\r\n\r\n/** @hidden */\r\nexport enum EShaderType {\r\n    FRAGMENT = 35632,\r\n    VERTEX = 35633\r\n}\r\n\r\n/** @hidden */\r\nexport enum EParameterType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    INT = 5124,\r\n    UNSIGNED_INT = 5125,\r\n    FLOAT = 5126,\r\n    FLOAT_VEC2 = 35664,\r\n    FLOAT_VEC3 = 35665,\r\n    FLOAT_VEC4 = 35666,\r\n    INT_VEC2 = 35667,\r\n    INT_VEC3 = 35668,\r\n    INT_VEC4 = 35669,\r\n    BOOL = 35670,\r\n    BOOL_VEC2 = 35671,\r\n    BOOL_VEC3 = 35672,\r\n    BOOL_VEC4 = 35673,\r\n    FLOAT_MAT2 = 35674,\r\n    FLOAT_MAT3 = 35675,\r\n    FLOAT_MAT4 = 35676,\r\n    SAMPLER_2D = 35678\r\n}\r\n\r\n/** @hidden */\r\nexport enum ETextureWrapMode {\r\n    CLAMP_TO_EDGE = 33071,\r\n    MIRRORED_REPEAT = 33648,\r\n    REPEAT = 10497\r\n}\r\n\r\n/** @hidden */\r\nexport enum ETextureFilterType {\r\n    NEAREST = 9728,\r\n    LINEAR = 9728,\r\n    NEAREST_MIPMAP_NEAREST = 9984,\r\n    LINEAR_MIPMAP_NEAREST = 9985,\r\n    NEAREST_MIPMAP_LINEAR = 9986,\r\n    LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\n/** @hidden */\r\nexport enum ETextureFormat {\r\n    ALPHA = 6406,\r\n    RGB = 6407,\r\n    RGBA = 6408,\r\n    LUMINANCE = 6409,\r\n    LUMINANCE_ALPHA = 6410\r\n}\r\n\r\n/** @hidden */\r\nexport enum ECullingType {\r\n    FRONT = 1028,\r\n    BACK = 1029,\r\n    FRONT_AND_BACK = 1032\r\n}\r\n\r\n/** @hidden */\r\nexport enum EBlendingFunction {\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 768,\r\n    ONE_MINUS_SRC_COLOR = 769,\r\n    DST_COLOR = 774,\r\n    ONE_MINUS_DST_COLOR = 775,\r\n    SRC_ALPHA = 770,\r\n    ONE_MINUS_SRC_ALPHA = 771,\r\n    DST_ALPHA = 772,\r\n    ONE_MINUS_DST_ALPHA = 773,\r\n    CONSTANT_COLOR = 32769,\r\n    ONE_MINUS_CONSTANT_COLOR = 32770,\r\n    CONSTANT_ALPHA = 32771,\r\n    ONE_MINUS_CONSTANT_ALPHA = 32772,\r\n    SRC_ALPHA_SATURATE = 776\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFProperty {\r\n    extensions?: { [key: string]: any };\r\n    extras?: Object;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFChildRootProperty extends IGLTFProperty {\r\n    name?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAccessor extends IGLTFChildRootProperty {\r\n    bufferView: string;\r\n    byteOffset: number;\r\n    byteStride: number;\r\n    count: number;\r\n    type: string;\r\n    componentType: EComponentType;\r\n\r\n    max?: number[];\r\n    min?: number[];\r\n    name?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFBufferView extends IGLTFChildRootProperty {\r\n    buffer: string;\r\n    byteOffset: number;\r\n    byteLength: number;\r\n    byteStride: number;\r\n\r\n    target?: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFBuffer extends IGLTFChildRootProperty {\r\n    uri: string;\r\n\r\n    byteLength?: number;\r\n    type?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFShader extends IGLTFChildRootProperty {\r\n    uri: string;\r\n    type: EShaderType;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFProgram extends IGLTFChildRootProperty {\r\n    attributes: string[];\r\n    fragmentShader: string;\r\n    vertexShader: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTechniqueParameter {\r\n    type: number;\r\n\r\n    count?: number;\r\n    semantic?: string;\r\n    node?: string;\r\n    value?: number | boolean | string | Array<any>;\r\n    source?: string;\r\n\r\n    babylonValue?: any;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTechniqueCommonProfile {\r\n    lightingModel: string;\r\n    texcoordBindings: Object;\r\n\r\n    parameters?: Array<any>;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTechniqueStatesFunctions {\r\n    blendColor?: number[];\r\n    blendEquationSeparate?: number[];\r\n    blendFuncSeparate?: number[];\r\n    colorMask: boolean[];\r\n    cullFace: number[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTechniqueStates {\r\n    enable: number[];\r\n    functions: IGLTFTechniqueStatesFunctions;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTechnique extends IGLTFChildRootProperty {\r\n    parameters: { [key: string]: IGLTFTechniqueParameter };\r\n    program: string;\r\n\r\n    attributes: { [key: string]: string };\r\n    uniforms: { [key: string]: string };\r\n    states: IGLTFTechniqueStates;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFMaterial extends IGLTFChildRootProperty {\r\n    technique?: string;\r\n    values: string[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFMeshPrimitive extends IGLTFProperty {\r\n    attributes: { [key: string]: string };\r\n    indices: string;\r\n    material: string;\r\n\r\n    mode?: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFMesh extends IGLTFChildRootProperty {\r\n    primitives: IGLTFMeshPrimitive[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFImage extends IGLTFChildRootProperty {\r\n    uri: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFSampler extends IGLTFChildRootProperty {\r\n    magFilter?: number;\r\n    minFilter?: number;\r\n    wrapS?: number;\r\n    wrapT?: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFTexture extends IGLTFChildRootProperty {\r\n    sampler: string;\r\n    source: string;\r\n\r\n    format?: ETextureFormat;\r\n    internalFormat?: ETextureFormat;\r\n    target?: number;\r\n    type?: number;\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonTexture?: Texture;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAmbienLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFDirectionalLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFPointLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFSpotLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    fallOfAngle?: number;\r\n    fallOffExponent?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFLight extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFCameraOrthographic {\r\n    xmag: number;\r\n    ymag: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFCameraPerspective {\r\n    aspectRatio: number;\r\n    yfov: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFCamera extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAnimationChannelTarget {\r\n    id: string;\r\n    path: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAnimationChannel {\r\n    sampler: string;\r\n    target: IGLTFAnimationChannelTarget;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAnimationSampler {\r\n    input: string;\r\n    output: string;\r\n\r\n    interpolation?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFAnimation extends IGLTFChildRootProperty {\r\n    channels?: IGLTFAnimationChannel[];\r\n    parameters?: { [key: string]: string };\r\n    samplers?: { [key: string]: IGLTFAnimationSampler };\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFNodeInstanceSkin {\r\n    skeletons: string[];\r\n    skin: string;\r\n    meshes: string[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFSkins extends IGLTFChildRootProperty {\r\n    bindShapeMatrix: number[];\r\n    inverseBindMatrices: string;\r\n    jointNames: string[];\r\n\r\n    babylonSkeleton?: Skeleton;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFNode extends IGLTFChildRootProperty {\r\n    camera?: string;\r\n    children: string[];\r\n    skin?: string;\r\n    jointName?: string;\r\n    light?: string;\r\n    matrix: number[];\r\n    mesh?: string;\r\n    meshes?: string[];\r\n    rotation?: number[];\r\n    scale?: number[];\r\n    translation?: number[];\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonNode?: Node;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFScene extends IGLTFChildRootProperty {\r\n    nodes: string[];\r\n}\r\n\r\n/** @hidden */\r\nexport interface IGLTFRuntime {\r\n    extensions: { [key: string]: any };\r\n    accessors: { [key: string]: IGLTFAccessor };\r\n    buffers: { [key: string]: IGLTFBuffer };\r\n    bufferViews: { [key: string]: IGLTFBufferView };\r\n    meshes: { [key: string]: IGLTFMesh };\r\n    lights: { [key: string]: IGLTFLight };\r\n    cameras: { [key: string]: IGLTFCamera };\r\n    nodes: { [key: string]: IGLTFNode };\r\n    images: { [key: string]: IGLTFImage };\r\n    textures: { [key: string]: IGLTFTexture };\r\n    shaders: { [key: string]: IGLTFShader };\r\n    programs: { [key: string]: IGLTFProgram };\r\n    samplers: { [key: string]: IGLTFSampler };\r\n    techniques: { [key: string]: IGLTFTechnique };\r\n    materials: { [key: string]: IGLTFMaterial };\r\n    animations: { [key: string]: IGLTFAnimation };\r\n    skins: { [key: string]: IGLTFSkins };\r\n\r\n    currentScene?: Object;\r\n    scenes: { [key: string]: IGLTFScene }; // v1.1\r\n\r\n    extensionsUsed: string[];\r\n    extensionsRequired?: string[]; // v1.1\r\n\r\n    buffersCount: number;\r\n    shaderscount: number;\r\n\r\n    scene: Scene;\r\n    rootUrl: string;\r\n\r\n    loadedBufferCount: number;\r\n    loadedBufferViews: { [name: string]: ArrayBufferView };\r\n\r\n    loadedShaderCount: number;\r\n\r\n    importOnlyMeshes: boolean;\r\n    importMeshesNames?: string[];\r\n\r\n    dummyNodes: Node[];\r\n\r\n    forAssetContainer: boolean;\r\n}\r\n\r\n/** @hidden */\r\nexport interface INodeToRoot {\r\n    bone: Bone;\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n\r\n/** @hidden */\r\nexport interface IJointNode {\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n","import { IGLTFRuntime, IGLTFTechniqueParameter, IGLTFAnimation, IGLTFAnimationSampler, IGLTFNode, IGLTFSkins, INodeToRoot, IJointNode, IGLTFMesh, IGLTFAccessor, IGLTFLight, IGLTFAmbienLight, IGLTFDirectionalLight, IGLTFPointLight, IGLTFSpotLight, IGLTFCamera, IGLTFCameraPerspective, IGLTFScene, IGLTFTechnique, IGLTFMaterial, EParameterType, IGLTFProgram, IGLTFBuffer, IGLTFTexture, IGLTFImage, IGLTFSampler, ETextureFilterType, IGLTFShader, IGLTFTechniqueStates, ECullingType, EBlendingFunction, EShaderType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport { FloatArray, Nullable } from \"@babylonjs/core/types\";\r\nimport { Quaternion, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\r\nimport { Animation } from \"@babylonjs/core/Animations/animation\";\r\nimport { Bone } from \"@babylonjs/core/Bones/bone\";\r\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\r\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { MultiMaterial } from \"@babylonjs/core/Materials/multiMaterial\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Node } from \"@babylonjs/core/node\";\r\nimport { VertexData } from \"@babylonjs/core/Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { Geometry } from \"@babylonjs/core/Meshes/geometry\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\r\nimport { PointLight } from \"@babylonjs/core/Lights/pointLight\";\r\nimport { SpotLight } from \"@babylonjs/core/Lights/spotLight\";\r\nimport { SceneLoaderProgressEvent } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport { GLTFFileLoader, IGLTFLoader, GLTFLoaderState, IGLTFLoaderData, IImportMeshAsyncOutput } from \"../glTFFileLoader\";\r\nimport { Constants } from '@babylonjs/core/Engines/constants';\r\n\r\n/**\r\n* Tokenizer. Used for shaders compatibility\r\n* Automatically map world, view, projection, worldViewProjection, attributes and so on\r\n*/\r\nenum ETokenType {\r\n    IDENTIFIER = 1,\r\n\r\n    UNKNOWN = 2,\r\n    END_OF_INPUT = 3\r\n}\r\n\r\nclass Tokenizer {\r\n    private _toParse: string;\r\n    private _pos: number = 0;\r\n    private _maxPos: number;\r\n\r\n    public currentToken: ETokenType = ETokenType.UNKNOWN;\r\n    public currentIdentifier: string = \"\";\r\n    public currentString: string = \"\";\r\n    public isLetterOrDigitPattern: RegExp = /^[a-zA-Z0-9]+$/;\r\n\r\n    constructor(toParse: string) {\r\n        this._toParse = toParse;\r\n        this._maxPos = toParse.length;\r\n    }\r\n\r\n    public getNextToken(): ETokenType {\r\n        if (this.isEnd()) { return ETokenType.END_OF_INPUT; }\r\n\r\n        this.currentString = this.read();\r\n        this.currentToken = ETokenType.UNKNOWN;\r\n\r\n        if (this.currentString === \"_\" || this.isLetterOrDigitPattern.test(this.currentString)) {\r\n            this.currentToken = ETokenType.IDENTIFIER;\r\n            this.currentIdentifier = this.currentString;\r\n            while (!this.isEnd() && (this.isLetterOrDigitPattern.test(this.currentString = this.peek()) || this.currentString === \"_\")) {\r\n                this.currentIdentifier += this.currentString;\r\n                this.forward();\r\n            }\r\n        }\r\n\r\n        return this.currentToken;\r\n    }\r\n\r\n    public peek(): string {\r\n        return this._toParse[this._pos];\r\n    }\r\n\r\n    public read(): string {\r\n        return this._toParse[this._pos++];\r\n    }\r\n\r\n    public forward(): void {\r\n        this._pos++;\r\n    }\r\n\r\n    public isEnd(): boolean {\r\n        return this._pos >= this._maxPos;\r\n    }\r\n}\r\n\r\n/**\r\n* Values\r\n*/\r\nvar glTFTransforms = [\"MODEL\", \"VIEW\", \"PROJECTION\", \"MODELVIEW\", \"MODELVIEWPROJECTION\", \"JOINTMATRIX\"];\r\nvar babylonTransforms = [\"world\", \"view\", \"projection\", \"worldView\", \"worldViewProjection\", \"mBones\"];\r\n\r\nvar glTFAnimationPaths = [\"translation\", \"rotation\", \"scale\"];\r\nvar babylonAnimationPaths = [\"position\", \"rotationQuaternion\", \"scaling\"];\r\n\r\n/**\r\n* Parse\r\n*/\r\nvar parseBuffers = (parsedBuffers: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (var buf in parsedBuffers) {\r\n        var parsedBuffer = parsedBuffers[buf];\r\n        gltfRuntime.buffers[buf] = parsedBuffer;\r\n        gltfRuntime.buffersCount++;\r\n    }\r\n};\r\n\r\nvar parseShaders = (parsedShaders: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (var sha in parsedShaders) {\r\n        var parsedShader = parsedShaders[sha];\r\n        gltfRuntime.shaders[sha] = parsedShader;\r\n        gltfRuntime.shaderscount++;\r\n    }\r\n};\r\n\r\nvar parseObject = (parsedObjects: any, runtimeProperty: string, gltfRuntime: IGLTFRuntime) => {\r\n    for (var object in parsedObjects) {\r\n        var parsedObject = parsedObjects[object];\r\n        (<any>gltfRuntime)[runtimeProperty][object] = parsedObject;\r\n    }\r\n};\r\n\r\n/**\r\n* Utils\r\n*/\r\nvar normalizeUVs = (buffer: any) => {\r\n    if (!buffer) {\r\n        return;\r\n    }\r\n\r\n    for (var i = 0; i < buffer.length / 2; i++) {\r\n        buffer[i * 2 + 1] = 1.0 - buffer[i * 2 + 1];\r\n    }\r\n};\r\n\r\nvar getAttribute = (attributeParameter: IGLTFTechniqueParameter): Nullable<string> => {\r\n    if (attributeParameter.semantic === \"NORMAL\") {\r\n        return \"normal\";\r\n    } else if (attributeParameter.semantic === \"POSITION\") {\r\n        return \"position\";\r\n    } else if (attributeParameter.semantic === \"JOINT\") {\r\n        return \"matricesIndices\";\r\n    } else if (attributeParameter.semantic === \"WEIGHT\") {\r\n        return \"matricesWeights\";\r\n    } else if (attributeParameter.semantic === \"COLOR\") {\r\n        return \"color\";\r\n    } else if (attributeParameter.semantic && attributeParameter.semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n        var channel = Number(attributeParameter.semantic.split(\"_\")[1]);\r\n        return \"uv\" + (channel === 0 ? \"\" : channel + 1);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n* Loads and creates animations\r\n*/\r\nvar loadAnimations = (gltfRuntime: IGLTFRuntime) => {\r\n    for (var anim in gltfRuntime.animations) {\r\n        var animation: IGLTFAnimation = gltfRuntime.animations[anim];\r\n\r\n        if (!animation.channels || !animation.samplers) {\r\n            continue;\r\n        }\r\n\r\n        var lastAnimation: Nullable<Animation> = null;\r\n\r\n        for (var i = 0; i < animation.channels.length; i++) {\r\n            // Get parameters and load buffers\r\n            var channel = animation.channels[i];\r\n            var sampler: IGLTFAnimationSampler = animation.samplers[channel.sampler];\r\n\r\n            if (!sampler) {\r\n                continue;\r\n            }\r\n\r\n            var inputData: Nullable<string> = null;\r\n            var outputData: Nullable<string> = null;\r\n\r\n            if (animation.parameters) {\r\n                inputData = animation.parameters[sampler.input];\r\n                outputData = animation.parameters[sampler.output];\r\n            }\r\n            else {\r\n                inputData = sampler.input;\r\n                outputData = sampler.output;\r\n            }\r\n\r\n            var bufferInput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[inputData]);\r\n            var bufferOutput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[outputData]);\r\n\r\n            var targetID = channel.target.id;\r\n            var targetNode: any = gltfRuntime.scene.getNodeByID(targetID);\r\n\r\n            if (targetNode === null) {\r\n                targetNode = gltfRuntime.scene.getNodeByName(targetID);\r\n            }\r\n\r\n            if (targetNode === null) {\r\n                Tools.Warn(\"Creating animation named \" + anim + \". But cannot find node named \" + targetID + \" to attach to\");\r\n                continue;\r\n            }\r\n\r\n            var isBone = targetNode instanceof Bone;\r\n\r\n            // Get target path (position, rotation or scaling)\r\n            var targetPath = channel.target.path;\r\n            var targetPathIndex = glTFAnimationPaths.indexOf(targetPath);\r\n\r\n            if (targetPathIndex !== -1) {\r\n                targetPath = babylonAnimationPaths[targetPathIndex];\r\n            }\r\n\r\n            // Determine animation type\r\n            var animationType = Animation.ANIMATIONTYPE_MATRIX;\r\n\r\n            if (!isBone) {\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    animationType = Animation.ANIMATIONTYPE_QUATERNION;\r\n                    targetNode.rotationQuaternion = new Quaternion();\r\n                }\r\n                else {\r\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\r\n                }\r\n            }\r\n\r\n            // Create animation and key frames\r\n            var babylonAnimation: Nullable<Animation> = null;\r\n            var keys = [];\r\n            var arrayOffset = 0;\r\n            var modifyKey = false;\r\n\r\n            if (isBone && lastAnimation && lastAnimation.getKeys().length === bufferInput.length) {\r\n                babylonAnimation = lastAnimation;\r\n                modifyKey = true;\r\n            }\r\n\r\n            if (!modifyKey) {\r\n                gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n                babylonAnimation = new Animation(anim, isBone ? \"_matrix\" : targetPath, 1, animationType, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n                gltfRuntime.scene._blockEntityCollection = false;\r\n            }\r\n\r\n            // For each frame\r\n            for (var j = 0; j < bufferInput.length; j++) {\r\n                var value: any = null;\r\n\r\n                if (targetPath === \"rotationQuaternion\") { // VEC4\r\n                    value = Quaternion.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2], bufferOutput[arrayOffset + 3]]);\r\n                    arrayOffset += 4;\r\n                }\r\n                else { // Position and scaling are VEC3\r\n                    value = Vector3.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2]]);\r\n                    arrayOffset += 3;\r\n                }\r\n\r\n                if (isBone) {\r\n                    var bone = <Bone>targetNode;\r\n                    var translation = Vector3.Zero();\r\n                    var rotationQuaternion = new Quaternion();\r\n                    var scaling = Vector3.Zero();\r\n\r\n                    // Warning on decompose\r\n                    var mat = bone.getBaseMatrix();\r\n\r\n                    if (modifyKey && lastAnimation) {\r\n                        mat = lastAnimation.getKeys()[j].value;\r\n                    }\r\n\r\n                    mat.decompose(scaling, rotationQuaternion, translation);\r\n\r\n                    if (targetPath === \"position\") {\r\n                        translation = value;\r\n                    }\r\n                    else if (targetPath === \"rotationQuaternion\") {\r\n                        rotationQuaternion = value;\r\n                    }\r\n                    else {\r\n                        scaling = value;\r\n                    }\r\n\r\n                    value = Matrix.Compose(scaling, rotationQuaternion, translation);\r\n                }\r\n\r\n                if (!modifyKey) {\r\n                    keys.push({\r\n                        frame: bufferInput[j],\r\n                        value: value\r\n                    });\r\n                }\r\n                else if (lastAnimation) {\r\n                    lastAnimation.getKeys()[j].value = value;\r\n                }\r\n            }\r\n\r\n            // Finish\r\n            if (!modifyKey && babylonAnimation) {\r\n                babylonAnimation.setKeys(keys);\r\n                targetNode.animations.push(babylonAnimation);\r\n            }\r\n\r\n            lastAnimation = babylonAnimation;\r\n\r\n            gltfRuntime.scene.stopAnimation(targetNode);\r\n            gltfRuntime.scene.beginAnimation(targetNode, 0, bufferInput[bufferInput.length - 1], true, 1.0);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Returns the bones transformation matrix\r\n*/\r\nvar configureBoneTransformation = (node: IGLTFNode): Matrix => {\r\n    var mat: Nullable<Matrix> = null;\r\n\r\n    if (node.translation || node.rotation || node.scale) {\r\n        var scale = Vector3.FromArray(node.scale || [1, 1, 1]);\r\n        var rotation = Quaternion.FromArray(node.rotation || [0, 0, 0, 1]);\r\n        var position = Vector3.FromArray(node.translation || [0, 0, 0]);\r\n\r\n        mat = Matrix.Compose(scale, rotation, position);\r\n    }\r\n    else {\r\n        mat = Matrix.FromArray(node.matrix);\r\n    }\r\n\r\n    return mat;\r\n};\r\n\r\n/**\r\n* Returns the parent bone\r\n*/\r\nvar getParentBone = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, jointName: string, newSkeleton: Skeleton): Nullable<Bone> => {\r\n    // Try to find\r\n    for (var i = 0; i < newSkeleton.bones.length; i++) {\r\n        if (newSkeleton.bones[i].name === jointName) {\r\n            return newSkeleton.bones[i];\r\n        }\r\n    }\r\n\r\n    // Not found, search in gltf nodes\r\n    var nodes = gltfRuntime.nodes;\r\n    for (var nde in nodes) {\r\n        var node: IGLTFNode = nodes[nde];\r\n\r\n        if (!node.jointName) {\r\n            continue;\r\n        }\r\n\r\n        var children = node.children;\r\n        for (var i = 0; i < children.length; i++) {\r\n            var child: IGLTFNode = gltfRuntime.nodes[children[i]];\r\n            if (!child.jointName) {\r\n                continue;\r\n            }\r\n\r\n            if (child.jointName === jointName) {\r\n                var mat = configureBoneTransformation(node);\r\n                var bone = new Bone(node.name || \"\", newSkeleton, getParentBone(gltfRuntime, skins, node.jointName, newSkeleton), mat);\r\n                bone.id = nde;\r\n                return bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n* Returns the appropriate root node\r\n*/\r\nvar getNodeToRoot = (nodesToRoot: INodeToRoot[], id: string): Nullable<Bone> => {\r\n    for (var i = 0; i < nodesToRoot.length; i++) {\r\n        var nodeToRoot = nodesToRoot[i];\r\n\r\n        for (var j = 0; j < nodeToRoot.node.children.length; j++) {\r\n            var child = nodeToRoot.node.children[j];\r\n            if (child === id) {\r\n                return nodeToRoot.bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n* Returns the node with the joint name\r\n*/\r\nvar getJointNode = (gltfRuntime: IGLTFRuntime, jointName: string): Nullable<IJointNode> => {\r\n    var nodes = gltfRuntime.nodes;\r\n    var node: IGLTFNode = nodes[jointName];\r\n    if (node) {\r\n        return {\r\n            node: node,\r\n            id: jointName\r\n        };\r\n    }\r\n\r\n    for (var nde in nodes) {\r\n        node = nodes[nde];\r\n        if (node.jointName === jointName) {\r\n            return {\r\n                node: node,\r\n                id: nde\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n* Checks if a nodes is in joints\r\n*/\r\nvar nodeIsInJoints = (skins: IGLTFSkins, id: string): boolean => {\r\n    for (var i = 0; i < skins.jointNames.length; i++) {\r\n        if (skins.jointNames[i] === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n* Fills the nodes to root for bones and builds hierarchy\r\n*/\r\nvar getNodesToRoot = (gltfRuntime: IGLTFRuntime, newSkeleton: Skeleton, skins: IGLTFSkins, nodesToRoot: INodeToRoot[]) => {\r\n    // Creates nodes for root\r\n    for (var nde in gltfRuntime.nodes) {\r\n        var node: IGLTFNode = gltfRuntime.nodes[nde];\r\n        var id = nde;\r\n\r\n        if (!node.jointName || nodeIsInJoints(skins, node.jointName)) {\r\n            continue;\r\n        }\r\n\r\n        // Create node to root bone\r\n        var mat = configureBoneTransformation(node);\r\n        var bone = new Bone(node.name || \"\", newSkeleton, null, mat);\r\n        bone.id = id;\r\n        nodesToRoot.push({ bone: bone, node: node, id: id });\r\n    }\r\n\r\n    // Parenting\r\n    for (var i = 0; i < nodesToRoot.length; i++) {\r\n        var nodeToRoot = nodesToRoot[i];\r\n        var children = nodeToRoot.node.children;\r\n\r\n        for (var j = 0; j < children.length; j++) {\r\n            var child: Nullable<INodeToRoot> = null;\r\n\r\n            for (var k = 0; k < nodesToRoot.length; k++) {\r\n                if (nodesToRoot[k].id === children[j]) {\r\n                    child = nodesToRoot[k];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (child) {\r\n                (<any>child.bone)._parent = nodeToRoot.bone;\r\n                nodeToRoot.bone.children.push(child.bone);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Imports a skeleton\r\n*/\r\nvar importSkeleton = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, mesh: Mesh, newSkeleton: Skeleton | undefined, id: string): Skeleton => {\r\n\r\n    if (!newSkeleton) {\r\n        newSkeleton = new Skeleton(skins.name || \"\", \"\", gltfRuntime.scene);\r\n    }\r\n\r\n    if (!skins.babylonSkeleton) {\r\n        return newSkeleton;\r\n    }\r\n\r\n    // Find the root bones\r\n    var nodesToRoot: INodeToRoot[] = [];\r\n    var nodesToRootToAdd: Bone[] = [];\r\n\r\n    getNodesToRoot(gltfRuntime, newSkeleton, skins, nodesToRoot);\r\n    newSkeleton.bones = [];\r\n\r\n    // Joints\r\n    for (var i = 0; i < skins.jointNames.length; i++) {\r\n        var jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        var node = jointNode.node;\r\n\r\n        if (!node) {\r\n            Tools.Warn(\"Joint named \" + skins.jointNames[i] + \" does not exist\");\r\n            continue;\r\n        }\r\n\r\n        var id = jointNode.id;\r\n\r\n        // Optimize, if the bone already exists...\r\n        var existingBone = gltfRuntime.scene.getBoneByID(id);\r\n        if (existingBone) {\r\n            newSkeleton.bones.push(existingBone);\r\n            continue;\r\n        }\r\n\r\n        // Search for parent bone\r\n        var foundBone = false;\r\n        var parentBone: Nullable<Bone> = null;\r\n\r\n        for (var j = 0; j < i; j++) {\r\n            let jointNode = getJointNode(gltfRuntime, skins.jointNames[j]);\r\n\r\n            if (!jointNode) {\r\n                continue;\r\n            }\r\n\r\n            var joint: IGLTFNode = jointNode.node;\r\n\r\n            if (!joint) {\r\n                Tools.Warn(\"Joint named \" + skins.jointNames[j] + \" does not exist when looking for parent\");\r\n                continue;\r\n            }\r\n\r\n            var children = joint.children;\r\n            if (!children) {\r\n                continue;\r\n            }\r\n            foundBone = false;\r\n\r\n            for (var k = 0; k < children.length; k++) {\r\n                if (children[k] === id) {\r\n                    parentBone = getParentBone(gltfRuntime, skins, skins.jointNames[j], newSkeleton);\r\n                    foundBone = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundBone) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Create bone\r\n        var mat = configureBoneTransformation(node);\r\n\r\n        if (!parentBone && nodesToRoot.length > 0) {\r\n            parentBone = getNodeToRoot(nodesToRoot, id);\r\n\r\n            if (parentBone) {\r\n                if (nodesToRootToAdd.indexOf(parentBone) === -1) {\r\n                    nodesToRootToAdd.push(parentBone);\r\n                }\r\n            }\r\n        }\r\n\r\n        var bone = new Bone(node.jointName || \"\", newSkeleton, parentBone, mat);\r\n        bone.id = id;\r\n    }\r\n\r\n    // Polish\r\n    var bones = newSkeleton.bones;\r\n    newSkeleton.bones = [];\r\n\r\n    for (var i = 0; i < skins.jointNames.length; i++) {\r\n        var jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        for (var j = 0; j < bones.length; j++) {\r\n            if (bones[j].id === jointNode.id) {\r\n                newSkeleton.bones.push(bones[j]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    newSkeleton.prepare();\r\n\r\n    // Finish\r\n    for (var i = 0; i < nodesToRootToAdd.length; i++) {\r\n        newSkeleton.bones.push(nodesToRootToAdd[i]);\r\n    }\r\n\r\n    return newSkeleton;\r\n};\r\n\r\n/**\r\n* Imports a mesh and its geometries\r\n*/\r\nvar importMesh = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, meshes: string[], id: string, newMesh: Mesh): Mesh => {\r\n    if (!newMesh) {\r\n        gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n        newMesh = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n        gltfRuntime.scene._blockEntityCollection = false;\r\n        newMesh.id = id;\r\n    }\r\n\r\n    if (!node.babylonNode) {\r\n        return newMesh;\r\n    }\r\n\r\n    const subMaterials: Material[] = [];\r\n\r\n    var vertexData: Nullable<VertexData> = null;\r\n    var verticesStarts = new Array<number>();\r\n    var verticesCounts = new Array<number>();\r\n    var indexStarts = new Array<number>();\r\n    var indexCounts = new Array<number>();\r\n\r\n    for (var meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        var meshID = meshes[meshIndex];\r\n        var mesh: IGLTFMesh = gltfRuntime.meshes[meshID];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        // Positions, normals and UVs\r\n        for (var i = 0; i < mesh.primitives.length; i++) {\r\n            // Temporary vertex data\r\n            var tempVertexData = new VertexData();\r\n\r\n            var primitive = mesh.primitives[i];\r\n            if (primitive.mode !== 4) {\r\n                // continue;\r\n            }\r\n\r\n            var attributes = primitive.attributes;\r\n            var accessor: Nullable<IGLTFAccessor> = null;\r\n            var buffer: any = null;\r\n\r\n            // Set positions, normal and uvs\r\n            for (var semantic in attributes) {\r\n\r\n                // Link accessor and buffer view\r\n                accessor = gltfRuntime.accessors[attributes[semantic]];\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                if (semantic === \"NORMAL\") {\r\n                    tempVertexData.normals = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.normals).set(buffer);\r\n                }\r\n                else if (semantic === \"POSITION\") {\r\n                    if (GLTFFileLoader.HomogeneousCoordinates) {\r\n                        tempVertexData.positions = new Float32Array(buffer.length - buffer.length / 4);\r\n\r\n                        for (var j = 0; j < buffer.length; j += 4) {\r\n                            tempVertexData.positions[j] = buffer[j];\r\n                            tempVertexData.positions[j + 1] = buffer[j + 1];\r\n                            tempVertexData.positions[j + 2] = buffer[j + 2];\r\n                        }\r\n                    }\r\n                    else {\r\n                        tempVertexData.positions = new Float32Array(buffer.length);\r\n                        (<Float32Array>tempVertexData.positions).set(buffer);\r\n                    }\r\n\r\n                    verticesCounts.push(tempVertexData.positions.length);\r\n                }\r\n                else if (semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n                    var channel = Number(semantic.split(\"_\")[1]);\r\n                    var uvKind = VertexBuffer.UVKind + (channel === 0 ? \"\" : (channel + 1));\r\n                    var uvs = new Float32Array(buffer.length);\r\n                    (<Float32Array>uvs).set(buffer);\r\n                    normalizeUVs(uvs);\r\n                    tempVertexData.set(uvs, uvKind);\r\n                }\r\n                else if (semantic === \"JOINT\") {\r\n                    tempVertexData.matricesIndices = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesIndices).set(buffer);\r\n                }\r\n                else if (semantic === \"WEIGHT\") {\r\n                    tempVertexData.matricesWeights = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesWeights).set(buffer);\r\n                }\r\n                else if (semantic === \"COLOR\") {\r\n                    tempVertexData.colors = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.colors).set(buffer);\r\n                }\r\n            }\r\n\r\n            // Indices\r\n            accessor = gltfRuntime.accessors[primitive.indices];\r\n            if (accessor) {\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                tempVertexData.indices = new Int32Array(buffer.length);\r\n                tempVertexData.indices.set(buffer);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            }\r\n            else {\r\n                // Set indices on the fly\r\n                var indices: number[] = [];\r\n                for (var j = 0; j < (<FloatArray>tempVertexData.positions).length / 3; j++) {\r\n                    indices.push(j);\r\n                }\r\n\r\n                tempVertexData.indices = new Int32Array(indices);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            }\r\n\r\n            if (!vertexData) {\r\n                vertexData = tempVertexData;\r\n            }\r\n            else {\r\n                vertexData.merge(tempVertexData);\r\n            }\r\n\r\n            // Sub material\r\n            let material = gltfRuntime.scene.getMaterialByID(primitive.material);\r\n\r\n            subMaterials.push(material === null ? GLTFUtils.GetDefaultMaterial(gltfRuntime.scene) : material);\r\n\r\n            // Update vertices start and index start\r\n            verticesStarts.push(verticesStarts.length === 0 ? 0 : verticesStarts[verticesStarts.length - 1] + verticesCounts[verticesCounts.length - 2]);\r\n            indexStarts.push(indexStarts.length === 0 ? 0 : indexStarts[indexStarts.length - 1] + indexCounts[indexCounts.length - 2]);\r\n        }\r\n    }\r\n    let material: StandardMaterial | MultiMaterial;\r\n    gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n    if (subMaterials.length > 1) {\r\n        material = new MultiMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n        (material as MultiMaterial).subMaterials = subMaterials;\r\n    }\r\n    else {\r\n        material = new StandardMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n    }\r\n\r\n    if (subMaterials.length === 1) {\r\n        material = (subMaterials[0] as StandardMaterial);\r\n    }\r\n\r\n    if (!newMesh.material) {\r\n        newMesh.material = material;\r\n    }\r\n\r\n    // Apply geometry\r\n    new Geometry(id, gltfRuntime.scene, vertexData!, false, newMesh);\r\n    newMesh.computeWorldMatrix(true);\r\n\r\n    gltfRuntime.scene._blockEntityCollection = false;\r\n\r\n    // Apply submeshes\r\n    newMesh.subMeshes = [];\r\n    var index = 0;\r\n    for (var meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        var meshID = meshes[meshIndex];\r\n        var mesh: IGLTFMesh = gltfRuntime.meshes[meshID];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        for (var i = 0; i < mesh.primitives.length; i++) {\r\n            if (mesh.primitives[i].mode !== 4) {\r\n                //continue;\r\n            }\r\n\r\n            SubMesh.AddToMesh(index, verticesStarts[index], verticesCounts[index], indexStarts[index], indexCounts[index], newMesh, newMesh, true);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Finish\r\n    return newMesh;\r\n};\r\n\r\n/**\r\n* Configure node transformation from position, rotation and scaling\r\n*/\r\nvar configureNode = (newNode: any, position: Vector3, rotation: Quaternion, scaling: Vector3) => {\r\n    if (newNode.position) {\r\n        newNode.position = position;\r\n    }\r\n\r\n    if (newNode.rotationQuaternion || newNode.rotation) {\r\n        newNode.rotationQuaternion = rotation;\r\n    }\r\n\r\n    if (newNode.scaling) {\r\n        newNode.scaling = scaling;\r\n    }\r\n};\r\n\r\n/**\r\n* Configures node from transformation matrix\r\n*/\r\nvar configureNodeFromMatrix = (newNode: Mesh, node: IGLTFNode, parent: Nullable<Node>) => {\r\n    if (node.matrix) {\r\n        var position = new Vector3(0, 0, 0);\r\n        var rotation = new Quaternion();\r\n        var scaling = new Vector3(0, 0, 0);\r\n        var mat = Matrix.FromArray(node.matrix);\r\n        mat.decompose(scaling, rotation, position);\r\n\r\n        configureNode(newNode, position, rotation, scaling);\r\n    }\r\n    else if (node.translation && node.rotation && node.scale) {\r\n        configureNode(newNode, Vector3.FromArray(node.translation), Quaternion.FromArray(node.rotation), Vector3.FromArray(node.scale));\r\n    }\r\n\r\n    newNode.computeWorldMatrix(true);\r\n};\r\n\r\n/**\r\n* Imports a node\r\n*/\r\nvar importNode = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, id: string, parent: Nullable<Node>): Nullable<Node> => {\r\n    var lastNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && (node.skin || node.meshes)) {\r\n        if (gltfRuntime.importMeshesNames && gltfRuntime.importMeshesNames.length > 0 && gltfRuntime.importMeshesNames.indexOf(node.name || \"\") === -1) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Meshes\r\n    if (node.skin) {\r\n        if (node.meshes) {\r\n            var skin: IGLTFSkins = gltfRuntime.skins[node.skin];\r\n\r\n            var newMesh = importMesh(gltfRuntime, node, node.meshes, id, <Mesh>node.babylonNode);\r\n            newMesh.skeleton = gltfRuntime.scene.getLastSkeletonByID(node.skin);\r\n\r\n            if (newMesh.skeleton === null) {\r\n                newMesh.skeleton = importSkeleton(gltfRuntime, skin, newMesh, skin.babylonSkeleton, node.skin);\r\n\r\n                if (!skin.babylonSkeleton) {\r\n                    skin.babylonSkeleton = newMesh.skeleton;\r\n                }\r\n            }\r\n\r\n            lastNode = newMesh;\r\n        }\r\n    }\r\n    else if (node.meshes) {\r\n        /**\r\n        * Improve meshes property\r\n        */\r\n        var newMesh = importMesh(gltfRuntime, node, node.mesh ? [node.mesh] : node.meshes, id, <Mesh>node.babylonNode);\r\n        lastNode = newMesh;\r\n    }\r\n    // Lights\r\n    else if (node.light && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        var light: IGLTFLight = gltfRuntime.lights[node.light];\r\n\r\n        if (light) {\r\n            if (light.type === \"ambient\") {\r\n                var ambienLight: IGLTFAmbienLight = (<any>light)[light.type];\r\n                var hemiLight = new HemisphericLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                hemiLight.name = node.name || \"\";\r\n\r\n                if (ambienLight.color) {\r\n                    hemiLight.diffuse = Color3.FromArray(ambienLight.color);\r\n                }\r\n\r\n                lastNode = hemiLight;\r\n            }\r\n            else if (light.type === \"directional\") {\r\n                var directionalLight: IGLTFDirectionalLight = (<any>light)[light.type];\r\n                var dirLight = new DirectionalLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                dirLight.name = node.name || \"\";\r\n\r\n                if (directionalLight.color) {\r\n                    dirLight.diffuse = Color3.FromArray(directionalLight.color);\r\n                }\r\n\r\n                lastNode = dirLight;\r\n            }\r\n            else if (light.type === \"point\") {\r\n                var pointLight: IGLTFPointLight = (<any>light)[light.type];\r\n                var ptLight = new PointLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                ptLight.name = node.name || \"\";\r\n\r\n                if (pointLight.color) {\r\n                    ptLight.diffuse = Color3.FromArray(pointLight.color);\r\n                }\r\n\r\n                lastNode = ptLight;\r\n            }\r\n            else if (light.type === \"spot\") {\r\n                var spotLight: IGLTFSpotLight = (<any>light)[light.type];\r\n                var spLight = new SpotLight(node.light, Vector3.Zero(), Vector3.Zero(), 0, 0, gltfRuntime.scene);\r\n                spLight.name = node.name || \"\";\r\n\r\n                if (spotLight.color) {\r\n                    spLight.diffuse = Color3.FromArray(spotLight.color);\r\n                }\r\n\r\n                if (spotLight.fallOfAngle) {\r\n                    spLight.angle = spotLight.fallOfAngle;\r\n                }\r\n\r\n                if (spotLight.fallOffExponent) {\r\n                    spLight.exponent = spotLight.fallOffExponent;\r\n                }\r\n\r\n                lastNode = spLight;\r\n            }\r\n        }\r\n    }\r\n    // Cameras\r\n    else if (node.camera && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        var camera: IGLTFCamera = gltfRuntime.cameras[node.camera];\r\n\r\n        if (camera) {\r\n\r\n            gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n            if (camera.type === \"orthographic\") {\r\n                var orthoCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                orthoCamera.name = node.name || \"\";\r\n                orthoCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                orthoCamera.attachControl(<HTMLElement>gltfRuntime.scene.getEngine().getInputElement());\r\n\r\n                lastNode = orthoCamera;\r\n            }\r\n            else if (camera.type === \"perspective\") {\r\n                var perspectiveCamera: IGLTFCameraPerspective = (<any>camera)[camera.type];\r\n                var persCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                persCamera.name = node.name || \"\";\r\n                persCamera.attachControl(<HTMLElement>gltfRuntime.scene.getEngine().getInputElement());\r\n\r\n                if (!perspectiveCamera.aspectRatio) {\r\n                    perspectiveCamera.aspectRatio = gltfRuntime.scene.getEngine().getRenderWidth() / gltfRuntime.scene.getEngine().getRenderHeight();\r\n                }\r\n\r\n                if (perspectiveCamera.znear && perspectiveCamera.zfar) {\r\n                    persCamera.maxZ = perspectiveCamera.zfar;\r\n                    persCamera.minZ = perspectiveCamera.znear;\r\n                }\r\n\r\n                lastNode = persCamera;\r\n            }\r\n\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n        }\r\n    }\r\n\r\n    // Empty node\r\n    if (!node.jointName) {\r\n        if (node.babylonNode) {\r\n            return node.babylonNode;\r\n        }\r\n        else if (lastNode === null) {\r\n            gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n            var dummy = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            node.babylonNode = dummy;\r\n            lastNode = dummy;\r\n        }\r\n    }\r\n\r\n    if (lastNode !== null) {\r\n        if (node.matrix && lastNode instanceof Mesh) {\r\n            configureNodeFromMatrix(lastNode, node, parent);\r\n        }\r\n        else {\r\n            var translation = node.translation || [0, 0, 0];\r\n            var rotation = node.rotation || [0, 0, 0, 1];\r\n            var scale = node.scale || [1, 1, 1];\r\n            configureNode(lastNode, Vector3.FromArray(translation), Quaternion.FromArray(rotation), Vector3.FromArray(scale));\r\n        }\r\n\r\n        lastNode.updateCache(true);\r\n        node.babylonNode = lastNode;\r\n    }\r\n\r\n    return lastNode;\r\n};\r\n\r\n/**\r\n* Traverses nodes and creates them\r\n*/\r\nvar traverseNodes = (gltfRuntime: IGLTFRuntime, id: string, parent: Nullable<Node>, meshIncluded: boolean = false) => {\r\n    var node: IGLTFNode = gltfRuntime.nodes[id];\r\n    var newNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && !meshIncluded && gltfRuntime.importMeshesNames) {\r\n        if (gltfRuntime.importMeshesNames.indexOf(node.name || \"\") !== -1 || gltfRuntime.importMeshesNames.length === 0) {\r\n            meshIncluded = true;\r\n        }\r\n        else {\r\n            meshIncluded = false;\r\n        }\r\n    }\r\n    else {\r\n        meshIncluded = true;\r\n    }\r\n\r\n    if (!node.jointName && meshIncluded) {\r\n        newNode = importNode(gltfRuntime, node, id, parent);\r\n\r\n        if (newNode !== null) {\r\n            newNode.id = id;\r\n            newNode.parent = parent;\r\n        }\r\n    }\r\n\r\n    if (node.children) {\r\n        for (var i = 0; i < node.children.length; i++) {\r\n            traverseNodes(gltfRuntime, node.children[i], newNode, meshIncluded);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* do stuff after buffers, shaders are loaded (e.g. hook up materials, load animations, etc.)\r\n*/\r\nvar postLoad = (gltfRuntime: IGLTFRuntime) => {\r\n    // Nodes\r\n    var currentScene: IGLTFScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n    if (currentScene) {\r\n        for (var i = 0; i < currentScene.nodes.length; i++) {\r\n            traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n        }\r\n    }\r\n    else {\r\n        for (var thing in gltfRuntime.scenes) {\r\n            currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n            for (var i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set animations\r\n    loadAnimations(gltfRuntime);\r\n\r\n    for (var i = 0; i < gltfRuntime.scene.skeletons.length; i++) {\r\n        var skeleton = gltfRuntime.scene.skeletons[i];\r\n        gltfRuntime.scene.beginAnimation(skeleton, 0, Number.MAX_VALUE, true, 1.0);\r\n    }\r\n};\r\n\r\n/**\r\n* onBind shaderrs callback to set uniforms and matrices\r\n*/\r\nvar onBindShaderMaterial = (mesh: AbstractMesh, gltfRuntime: IGLTFRuntime, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }, shaderMaterial: ShaderMaterial, technique: IGLTFTechnique, material: IGLTFMaterial, onSuccess: (shaderMaterial: ShaderMaterial) => void) => {\r\n    var materialValues = material.values || technique.parameters;\r\n\r\n    for (var unif in unTreatedUniforms) {\r\n        var uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        var type = uniform.type;\r\n\r\n        if (type === EParameterType.FLOAT_MAT2 || type === EParameterType.FLOAT_MAT3 || type === EParameterType.FLOAT_MAT4) {\r\n            if (uniform.semantic && !uniform.source && !uniform.node) {\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, mesh, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            }\r\n            else if (uniform.semantic && (uniform.source || uniform.node)) {\r\n                var source = gltfRuntime.scene.getNodeByName(uniform.source || uniform.node || \"\");\r\n                if (source === null) {\r\n                    source = gltfRuntime.scene.getNodeByID(uniform.source || uniform.node || \"\");\r\n                }\r\n                if (source === null) {\r\n                    continue;\r\n                }\r\n\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, source, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            }\r\n        }\r\n        else {\r\n            var value = (<any>materialValues)[technique.uniforms[unif]];\r\n            if (!value) {\r\n                continue;\r\n            }\r\n\r\n            if (type === EParameterType.SAMPLER_2D) {\r\n                var texture = gltfRuntime.textures[material.values ? value : uniform.value].babylonTexture;\r\n\r\n                if (texture === null || texture === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                (<Effect>shaderMaterial.getEffect()).setTexture(unif, texture);\r\n            }\r\n            else {\r\n                GLTFUtils.SetUniform(<Effect>(shaderMaterial.getEffect()), unif, value, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSuccess(shaderMaterial);\r\n};\r\n\r\n/**\r\n* Prepare uniforms to send the only one time\r\n* Loads the appropriate textures\r\n*/\r\nvar prepareShaderMaterialUniforms = (gltfRuntime: IGLTFRuntime, shaderMaterial: ShaderMaterial, technique: IGLTFTechnique, material: IGLTFMaterial, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }) => {\r\n    var materialValues = material.values || technique.parameters;\r\n    var techniqueUniforms = technique.uniforms;\r\n\r\n    /**\r\n    * Prepare values here (not matrices)\r\n    */\r\n    for (var unif in unTreatedUniforms) {\r\n        var uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        var type = uniform.type;\r\n        var value = (<any>materialValues)[techniqueUniforms[unif]];\r\n\r\n        if (value === undefined) {\r\n            // In case the value is the same for all materials\r\n            value = <any>uniform.value;\r\n        }\r\n\r\n        if (!value) {\r\n            continue;\r\n        }\r\n\r\n        var onLoadTexture = (uniformName: Nullable<string>) => {\r\n            return (texture: Texture) => {\r\n                if (uniform.value && uniformName) {\r\n                    // Static uniform\r\n                    shaderMaterial.setTexture(uniformName, texture);\r\n                    delete unTreatedUniforms[uniformName];\r\n                }\r\n            };\r\n        };\r\n\r\n        // Texture (sampler2D)\r\n        if (type === EParameterType.SAMPLER_2D) {\r\n            GLTFLoaderExtension.LoadTextureAsync(gltfRuntime, material.values ? value : uniform.value, onLoadTexture(unif), () => onLoadTexture(null));\r\n        }\r\n        // Others\r\n        else {\r\n            if (uniform.value && GLTFUtils.SetUniform(shaderMaterial, unif, material.values ? value : uniform.value, type)) {\r\n                // Static uniform\r\n                delete unTreatedUniforms[unif];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Shader compilation failed\r\n*/\r\nvar onShaderCompileError = (program: IGLTFProgram, shaderMaterial: ShaderMaterial, onError: (message: string) => void) => {\r\n    return (effect: Effect, error: string) => {\r\n        shaderMaterial.dispose(true);\r\n        onError(\"Cannot compile program named \" + program.name + \". Error: \" + error + \". Default material will be applied\");\r\n    };\r\n};\r\n\r\n/**\r\n* Shader compilation success\r\n*/\r\nvar onShaderCompileSuccess = (gltfRuntime: IGLTFRuntime, shaderMaterial: ShaderMaterial, technique: IGLTFTechnique, material: IGLTFMaterial, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }, onSuccess: (shaderMaterial: ShaderMaterial) => void) => {\r\n    return (_: Effect) => {\r\n        prepareShaderMaterialUniforms(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms);\r\n\r\n        shaderMaterial.onBind = (mesh: AbstractMesh) => {\r\n            onBindShaderMaterial(mesh, gltfRuntime, unTreatedUniforms, shaderMaterial, technique, material, onSuccess);\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n* Returns the appropriate uniform if already handled by babylon\r\n*/\r\nvar parseShaderUniforms = (tokenizer: Tokenizer, technique: IGLTFTechnique, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }): string => {\r\n    for (var unif in technique.uniforms) {\r\n        var uniform = technique.uniforms[unif];\r\n        var uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n        if (tokenizer.currentIdentifier === unif) {\r\n            if (uniformParameter.semantic && !uniformParameter.source && !uniformParameter.node) {\r\n                var transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n\r\n                if (transformIndex !== -1) {\r\n                    delete unTreatedUniforms[unif];\r\n                    return babylonTransforms[transformIndex];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tokenizer.currentIdentifier;\r\n};\r\n\r\n/**\r\n* All shaders loaded. Create materials one by one\r\n*/\r\nvar importMaterials = (gltfRuntime: IGLTFRuntime) => {\r\n    // Create materials\r\n    for (var mat in gltfRuntime.materials) {\r\n        GLTFLoaderExtension.LoadMaterialAsync(gltfRuntime, mat, (material: Material) => { }, () => { });\r\n    }\r\n};\r\n\r\n/**\r\n* Implementation of the base glTF spec\r\n* @hidden\r\n*/\r\nexport class GLTFLoaderBase {\r\n    public static CreateRuntime(parsedData: any, scene: Scene, rootUrl: string): IGLTFRuntime {\r\n        var gltfRuntime: IGLTFRuntime = {\r\n            extensions: {},\r\n            accessors: {},\r\n            buffers: {},\r\n            bufferViews: {},\r\n            meshes: {},\r\n            lights: {},\r\n            cameras: {},\r\n            nodes: {},\r\n            images: {},\r\n            textures: {},\r\n            shaders: {},\r\n            programs: {},\r\n            samplers: {},\r\n            techniques: {},\r\n            materials: {},\r\n            animations: {},\r\n            skins: {},\r\n            extensionsUsed: [],\r\n\r\n            scenes: {},\r\n\r\n            buffersCount: 0,\r\n            shaderscount: 0,\r\n\r\n            scene: scene,\r\n            rootUrl: rootUrl,\r\n\r\n            loadedBufferCount: 0,\r\n            loadedBufferViews: {},\r\n\r\n            loadedShaderCount: 0,\r\n\r\n            importOnlyMeshes: false,\r\n\r\n            dummyNodes: [],\r\n\r\n            forAssetContainer: false\r\n        };\r\n\r\n        // Parse\r\n        if (parsedData.extensions) {\r\n            parseObject(parsedData.extensions, \"extensions\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.extensionsUsed) {\r\n            parseObject(parsedData.extensionsUsed, \"extensionsUsed\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.buffers) {\r\n            parseBuffers(parsedData.buffers, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.bufferViews) {\r\n            parseObject(parsedData.bufferViews, \"bufferViews\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.accessors) {\r\n            parseObject(parsedData.accessors, \"accessors\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.meshes) {\r\n            parseObject(parsedData.meshes, \"meshes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.lights) {\r\n            parseObject(parsedData.lights, \"lights\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.cameras) {\r\n            parseObject(parsedData.cameras, \"cameras\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.nodes) {\r\n            parseObject(parsedData.nodes, \"nodes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.images) {\r\n            parseObject(parsedData.images, \"images\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.textures) {\r\n            parseObject(parsedData.textures, \"textures\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.shaders) {\r\n            parseShaders(parsedData.shaders, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.programs) {\r\n            parseObject(parsedData.programs, \"programs\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.samplers) {\r\n            parseObject(parsedData.samplers, \"samplers\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.techniques) {\r\n            parseObject(parsedData.techniques, \"techniques\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.materials) {\r\n            parseObject(parsedData.materials, \"materials\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.animations) {\r\n            parseObject(parsedData.animations, \"animations\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.skins) {\r\n            parseObject(parsedData.skins, \"skins\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.scenes) {\r\n            gltfRuntime.scenes = parsedData.scenes;\r\n        }\r\n\r\n        if (parsedData.scene && parsedData.scenes) {\r\n            gltfRuntime.currentScene = parsedData.scenes[parsedData.scene];\r\n        }\r\n\r\n        return gltfRuntime;\r\n    }\r\n\r\n    public static LoadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void, onProgress?: () => void): void {\r\n        var buffer: IGLTFBuffer = gltfRuntime.buffers[id];\r\n\r\n        if (Tools.IsBase64(buffer.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(buffer.uri))));\r\n        }\r\n        else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + buffer.uri, (data) => onSuccess(new Uint8Array(data as ArrayBuffer)), onProgress, undefined, true, (request) => {\r\n                if (request) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static LoadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: Nullable<ArrayBufferView>) => void, onError: (message: string) => void): void {\r\n        var texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (!texture || !texture.source) {\r\n            onError(\"\");\r\n            return;\r\n        }\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(null);\r\n            return;\r\n        }\r\n\r\n        var source: IGLTFImage = gltfRuntime.images[texture.source];\r\n\r\n        if (Tools.IsBase64(source.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(source.uri))));\r\n        }\r\n        else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + source.uri, (data) => onSuccess(new Uint8Array(data as ArrayBuffer)), undefined, undefined, true, (request) => {\r\n                if (request) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static CreateTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: Nullable<ArrayBufferView>, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        var texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(texture.babylonTexture);\r\n            return;\r\n        }\r\n\r\n        var sampler: IGLTFSampler = gltfRuntime.samplers[texture.sampler];\r\n\r\n        var createMipMaps =\r\n            (sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_NEAREST) ||\r\n            (sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_LINEAR) ||\r\n            (sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_NEAREST) ||\r\n            (sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_LINEAR);\r\n\r\n        var samplingMode = Texture.BILINEAR_SAMPLINGMODE;\r\n\r\n        var blob = buffer == null ? new Blob() : new Blob([buffer]);\r\n        var blobURL = URL.createObjectURL(blob);\r\n        var revokeBlobURL = () => URL.revokeObjectURL(blobURL);\r\n        var newTexture = new Texture(blobURL, gltfRuntime.scene, !createMipMaps, true, samplingMode, revokeBlobURL, revokeBlobURL);\r\n        if (sampler.wrapS !== undefined) {\r\n            newTexture.wrapU = GLTFUtils.GetWrapMode(sampler.wrapS);\r\n        }\r\n        if (sampler.wrapT !== undefined) {\r\n            newTexture.wrapV = GLTFUtils.GetWrapMode(sampler.wrapT);\r\n        }\r\n        newTexture.name = id;\r\n\r\n        texture.babylonTexture = newTexture;\r\n        onSuccess(newTexture);\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string | ArrayBuffer) => void, onError?: (message: string) => void): void {\r\n        var shader: IGLTFShader = gltfRuntime.shaders[id];\r\n\r\n        if (Tools.IsBase64(shader.uri)) {\r\n            var shaderString = atob(shader.uri.split(\",\")[1]);\r\n            if (onSuccess) {\r\n                onSuccess(shaderString);\r\n            }\r\n        }\r\n        else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + shader.uri, onSuccess, undefined, undefined, false, (request) => {\r\n                if (request && onError) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        var material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material.technique) {\r\n            if (onError) {\r\n                onError(\"No technique found.\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var technique: IGLTFTechnique = gltfRuntime.techniques[material.technique];\r\n        if (!technique) {\r\n            gltfRuntime.scene._blockEntityCollection = gltfRuntime.forAssetContainer;\r\n            var defaultMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            defaultMaterial.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n            defaultMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n            onSuccess(defaultMaterial);\r\n            return;\r\n        }\r\n\r\n        var program: IGLTFProgram = gltfRuntime.programs[technique.program];\r\n        var states: IGLTFTechniqueStates = technique.states;\r\n\r\n        var vertexShader: string = Effect.ShadersStore[program.vertexShader + \"VertexShader\"];\r\n        var pixelShader: string = Effect.ShadersStore[program.fragmentShader + \"PixelShader\"];\r\n        var newVertexShader = \"\";\r\n        var newPixelShader = \"\";\r\n\r\n        var vertexTokenizer = new Tokenizer(vertexShader);\r\n        var pixelTokenizer = new Tokenizer(pixelShader);\r\n\r\n        var unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter } = {};\r\n        var uniforms: string[] = [];\r\n        var attributes: string[] = [];\r\n        var samplers: string[] = [];\r\n\r\n        // Fill uniform, sampler2D and attributes\r\n        for (var unif in technique.uniforms) {\r\n            var uniform = technique.uniforms[unif];\r\n            var uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n            unTreatedUniforms[unif] = uniformParameter;\r\n\r\n            if (uniformParameter.semantic && !uniformParameter.node && !uniformParameter.source) {\r\n                var transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n                if (transformIndex !== -1) {\r\n                    uniforms.push(babylonTransforms[transformIndex]);\r\n                    delete unTreatedUniforms[unif];\r\n                }\r\n                else {\r\n                    uniforms.push(unif);\r\n                }\r\n            }\r\n            else if (uniformParameter.type === EParameterType.SAMPLER_2D) {\r\n                samplers.push(unif);\r\n            }\r\n            else {\r\n                uniforms.push(unif);\r\n            }\r\n        }\r\n\r\n        for (var attr in technique.attributes) {\r\n            var attribute = technique.attributes[attr];\r\n            var attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n            if (attributeParameter.semantic) {\r\n                let name = getAttribute(attributeParameter);\r\n                if (name) {\r\n                    attributes.push(name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Configure vertex shader\r\n        while (!vertexTokenizer.isEnd() && vertexTokenizer.getNextToken()) {\r\n            var tokenType = vertexTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newVertexShader += vertexTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            var foundAttribute = false;\r\n\r\n            for (var attr in technique.attributes) {\r\n                var attribute = technique.attributes[attr];\r\n                var attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n                if (vertexTokenizer.currentIdentifier === attr && attributeParameter.semantic) {\r\n                    newVertexShader += getAttribute(attributeParameter);\r\n                    foundAttribute = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundAttribute) {\r\n                continue;\r\n            }\r\n\r\n            newVertexShader += parseShaderUniforms(vertexTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Configure pixel shader\r\n        while (!pixelTokenizer.isEnd() && pixelTokenizer.getNextToken()) {\r\n            var tokenType = pixelTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newPixelShader += pixelTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            newPixelShader += parseShaderUniforms(pixelTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Create shader material\r\n        var shaderPath = {\r\n            vertex: program.vertexShader + id,\r\n            fragment: program.fragmentShader + id\r\n        };\r\n\r\n        var options = {\r\n            attributes: attributes,\r\n            uniforms: uniforms,\r\n            samplers: samplers,\r\n            needAlphaBlending: states && states.enable && states.enable.indexOf(3042) !== -1\r\n        };\r\n\r\n        Effect.ShadersStore[program.vertexShader + id + \"VertexShader\"] = newVertexShader;\r\n        Effect.ShadersStore[program.fragmentShader + id + \"PixelShader\"] = newPixelShader;\r\n\r\n        var shaderMaterial = new ShaderMaterial(id, gltfRuntime.scene, shaderPath, options);\r\n        shaderMaterial.onError = onShaderCompileError(program, shaderMaterial, onError);\r\n        shaderMaterial.onCompiled = onShaderCompileSuccess(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms, onSuccess);\r\n        shaderMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (states && states.functions) {\r\n            var functions = states.functions;\r\n            if (functions.cullFace && functions.cullFace[0] !== ECullingType.BACK) {\r\n                shaderMaterial.backFaceCulling = false;\r\n            }\r\n\r\n            var blendFunc = functions.blendFuncSeparate;\r\n            if (blendFunc) {\r\n                if (blendFunc[0] === EBlendingFunction.SRC_ALPHA && blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_ALPHA && blendFunc[2] === EBlendingFunction.ONE && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_COMBINE;\r\n                }\r\n                else if (blendFunc[0] === EBlendingFunction.ONE && blendFunc[1] === EBlendingFunction.ONE && blendFunc[2] === EBlendingFunction.ZERO && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ONEONE;\r\n                }\r\n                else if (blendFunc[0] === EBlendingFunction.SRC_ALPHA && blendFunc[1] === EBlendingFunction.ONE && blendFunc[2] === EBlendingFunction.ZERO && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ADD;\r\n                }\r\n                else if (blendFunc[0] === EBlendingFunction.ZERO && blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR && blendFunc[2] === EBlendingFunction.ONE && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_SUBTRACT;\r\n                }\r\n                else if (blendFunc[0] === EBlendingFunction.DST_COLOR && blendFunc[1] === EBlendingFunction.ZERO && blendFunc[2] === EBlendingFunction.ONE && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MULTIPLY;\r\n                }\r\n                else if (blendFunc[0] === EBlendingFunction.SRC_ALPHA && blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR && blendFunc[2] === EBlendingFunction.ONE && blendFunc[3] === EBlendingFunction.ONE) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MAXIMIZED;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* glTF V1 Loader\r\n* @hidden\r\n*/\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    public static Extensions: { [name: string]: GLTFLoaderExtension } = {};\r\n\r\n    public static RegisterExtension(extension: GLTFLoaderExtension): void {\r\n        if (GLTFLoader.Extensions[extension.name]) {\r\n            Tools.Error(\"Tool with the same name \\\"\" + extension.name + \"\\\" already exists\");\r\n            return;\r\n        }\r\n\r\n        GLTFLoader.Extensions[extension.name] = extension;\r\n    }\r\n\r\n    public state: Nullable<GLTFLoaderState> = null;\r\n\r\n    public dispose(): void {\r\n        // do nothing\r\n    }\r\n\r\n    private _importMeshAsync(meshesNames: any, scene: Scene, data: IGLTFLoaderData, rootUrl: string, forAssetContainer: boolean, onSuccess: (meshes: AbstractMesh[], skeletons: Skeleton[]) => void, onProgress?: (event: SceneLoaderProgressEvent) => void, onError?: (message: string) => void): boolean {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(scene, data, rootUrl, (gltfRuntime) => {\r\n            gltfRuntime.forAssetContainer = forAssetContainer;\r\n            gltfRuntime.importOnlyMeshes = true;\r\n\r\n            if (meshesNames === \"\") {\r\n                gltfRuntime.importMeshesNames = [];\r\n            }\r\n            else if (typeof meshesNames === \"string\") {\r\n                gltfRuntime.importMeshesNames = [meshesNames];\r\n            }\r\n            else if (meshesNames && !(meshesNames instanceof Array)) {\r\n                gltfRuntime.importMeshesNames = [meshesNames];\r\n            }\r\n            else {\r\n                gltfRuntime.importMeshesNames = [];\r\n                Tools.Warn(\"Argument meshesNames must be of type string or string[]\");\r\n            }\r\n\r\n            // Create nodes\r\n            this._createNodes(gltfRuntime);\r\n\r\n            var meshes = new Array<AbstractMesh>();\r\n            var skeletons = new Array<Skeleton>();\r\n\r\n            // Fill arrays of meshes and skeletons\r\n            for (var nde in gltfRuntime.nodes) {\r\n                var node: IGLTFNode = gltfRuntime.nodes[nde];\r\n\r\n                if (node.babylonNode instanceof AbstractMesh) {\r\n                    meshes.push(<AbstractMesh>node.babylonNode);\r\n                }\r\n            }\r\n\r\n            for (var skl in gltfRuntime.skins) {\r\n                var skin: IGLTFSkins = gltfRuntime.skins[skl];\r\n\r\n                if (skin.babylonSkeleton instanceof Skeleton) {\r\n                    skeletons.push(skin.babylonSkeleton);\r\n                }\r\n            }\r\n\r\n            // Load buffers, shaders, materials, etc.\r\n            this._loadBuffersAsync(gltfRuntime, () => {\r\n                this._loadShadersAsync(gltfRuntime, () => {\r\n                    importMaterials(gltfRuntime);\r\n                    postLoad(gltfRuntime);\r\n\r\n                    if (!GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                        onSuccess(meshes, skeletons);\r\n                    }\r\n                });\r\n            }, onProgress);\r\n\r\n            if (GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                onSuccess(meshes, skeletons);\r\n            }\r\n        }, onError);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Imports one or more meshes from a loaded gltf file and adds them to the scene\r\n    * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n    * @param scene the scene the meshes should be added to\r\n    * @param forAssetContainer defines if the entities must be stored in the scene\r\n    * @param data gltf data containing information of the meshes in a loaded file\r\n    * @param rootUrl root url to load from\r\n    * @param onProgress event that fires when loading progress has occured\r\n    * @returns a promise containg the loaded meshes, particles, skeletons and animations\r\n    */\r\n    public importMeshAsync(meshesNames: any, scene: Scene, forAssetContainer: boolean, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void): Promise<IImportMeshAsyncOutput> {\r\n        return new Promise((resolve, reject) => {\r\n            this._importMeshAsync(meshesNames, scene, data, rootUrl, forAssetContainer, (meshes, skeletons) => {\r\n                resolve({\r\n                    meshes: meshes,\r\n                    particleSystems: [],\r\n                    skeletons: skeletons,\r\n                    animationGroups: [],\r\n                    lights: [],\r\n                    transformNodes: []\r\n                });\r\n            }, onProgress, (message) => {\r\n                reject(new Error(message));\r\n            });\r\n        });\r\n    }\r\n\r\n    private _loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, forAssetContainer: boolean, onSuccess: () => void, onProgress?: (event: SceneLoaderProgressEvent) => void, onError?: (message: string) => void): void {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(scene, data, rootUrl, (gltfRuntime) => {\r\n            // Load runtime extensios\r\n            GLTFLoaderExtension.LoadRuntimeExtensionsAsync(gltfRuntime, () => {\r\n                // Create nodes\r\n                this._createNodes(gltfRuntime);\r\n\r\n                // Load buffers, shaders, materials, etc.\r\n                this._loadBuffersAsync(gltfRuntime, () => {\r\n                    this._loadShadersAsync(gltfRuntime, () => {\r\n                        importMaterials(gltfRuntime);\r\n                        postLoad(gltfRuntime);\r\n\r\n                        if (!GLTFFileLoader.IncrementalLoading) {\r\n                            onSuccess();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (GLTFFileLoader.IncrementalLoading) {\r\n                    onSuccess();\r\n                }\r\n            }, onError);\r\n        }, onError);\r\n    }\r\n\r\n    /**\r\n    * Imports all objects from a loaded gltf file and adds them to the scene\r\n    * @param scene the scene the objects should be added to\r\n    * @param data gltf data containing information of the meshes in a loaded file\r\n    * @param rootUrl root url to load from\r\n    * @param onProgress event that fires when loading progress has occured\r\n    * @returns a promise which completes when objects have been loaded to the scene\r\n    */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadAsync(scene, data, rootUrl, false, () => {\r\n                resolve();\r\n            }, onProgress, (message) => {\r\n                reject(new Error(message));\r\n            });\r\n        });\r\n    }\r\n\r\n    private _loadShadersAsync(gltfRuntime: IGLTFRuntime, onload: () => void): void {\r\n        var hasShaders = false;\r\n\r\n        var processShader = (sha: string, shader: IGLTFShader) => {\r\n            GLTFLoaderExtension.LoadShaderStringAsync(gltfRuntime, sha, (shaderString) => {\r\n                if (shaderString instanceof ArrayBuffer) {\r\n                    return;\r\n                }\r\n\r\n                gltfRuntime.loadedShaderCount++;\r\n\r\n                if (shaderString) {\r\n                    Effect.ShadersStore[sha + (shader.type === EShaderType.VERTEX ? \"VertexShader\" : \"PixelShader\")] = shaderString;\r\n                }\r\n\r\n                if (gltfRuntime.loadedShaderCount === gltfRuntime.shaderscount) {\r\n                    onload();\r\n                }\r\n            }, () => {\r\n                Tools.Error(\"Error when loading shader program named \" + sha + \" located at \" + shader.uri);\r\n            });\r\n        };\r\n\r\n        for (var sha in gltfRuntime.shaders) {\r\n            hasShaders = true;\r\n\r\n            var shader: IGLTFShader = gltfRuntime.shaders[sha];\r\n            if (shader) {\r\n                processShader.bind(this, sha, shader)();\r\n            }\r\n            else {\r\n                Tools.Error(\"No shader named: \" + sha);\r\n            }\r\n        }\r\n\r\n        if (!hasShaders) {\r\n            onload();\r\n        }\r\n    }\r\n\r\n    private _loadBuffersAsync(gltfRuntime: IGLTFRuntime, onLoad: () => void, onProgress?: (event: SceneLoaderProgressEvent) => void): void {\r\n        var hasBuffers = false;\r\n\r\n        var processBuffer = (buf: string, buffer: IGLTFBuffer) => {\r\n            GLTFLoaderExtension.LoadBufferAsync(gltfRuntime, buf, (bufferView) => {\r\n                gltfRuntime.loadedBufferCount++;\r\n\r\n                if (bufferView) {\r\n                    if (bufferView.byteLength != gltfRuntime.buffers[buf].byteLength) {\r\n                        Tools.Error(\"Buffer named \" + buf + \" is length \" + bufferView.byteLength + \". Expected: \" + buffer.byteLength); // Improve error message\r\n                    }\r\n\r\n                    gltfRuntime.loadedBufferViews[buf] = bufferView;\r\n                }\r\n\r\n                if (gltfRuntime.loadedBufferCount === gltfRuntime.buffersCount) {\r\n                    onLoad();\r\n                }\r\n            }, () => {\r\n                Tools.Error(\"Error when loading buffer named \" + buf + \" located at \" + buffer.uri);\r\n            });\r\n        };\r\n\r\n        for (var buf in gltfRuntime.buffers) {\r\n            hasBuffers = true;\r\n\r\n            var buffer: IGLTFBuffer = gltfRuntime.buffers[buf];\r\n            if (buffer) {\r\n                processBuffer.bind(this, buf, buffer)();\r\n            }\r\n            else {\r\n                Tools.Error(\"No buffer named: \" + buf);\r\n            }\r\n        }\r\n\r\n        if (!hasBuffers) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    private _createNodes(gltfRuntime: IGLTFRuntime): void {\r\n        var currentScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n        if (currentScene) {\r\n            // Only one scene even if multiple scenes are defined\r\n            for (var i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        }\r\n        else {\r\n            // Load all scenes\r\n            for (var thing in gltfRuntime.scenes) {\r\n                currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n                for (var i = 0; i < currentScene.nodes.length; i++) {\r\n                    traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport abstract class GLTFLoaderExtension {\r\n    private _name: string;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for loading the runtime\r\n    * Return true to stop further extensions from loading the runtime\r\n    */\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess?: (gltfRuntime: IGLTFRuntime) => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an onverride for creating gltf runtime\r\n     * Return true to stop further extensions from creating the runtime\r\n     */\r\n    public loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for loading buffers\r\n    * Return true to stop further extensions from loading this buffer\r\n    */\r\n    public loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void, onProgress?: () => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for loading texture buffers\r\n    * Return true to stop further extensions from loading this texture data\r\n    */\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for creating textures\r\n    * Return true to stop further extensions from loading this texture\r\n    */\r\n    public createTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: ArrayBufferView, onSuccess: (texture: Texture) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for loading shader strings\r\n    * Return true to stop further extensions from loading this shader data\r\n    */\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Defines an override for loading materials\r\n    * Return true to stop further extensions from loading this material\r\n    */\r\n    public loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ---------\r\n    // Utilities\r\n    // ---------\r\n\r\n    public static LoadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess?: (gltfRuntime: IGLTFRuntime) => void, onError?: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadRuntimeAsync(scene, data, rootUrl, onSuccess, onError);\r\n        }, () => {\r\n            setTimeout(() => {\r\n                if (!onSuccess) {\r\n                    return;\r\n                }\r\n                onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n            });\r\n        });\r\n    }\r\n\r\n    public static LoadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadRuntimeExtensionsAsync(gltfRuntime, onSuccess, onError);\r\n        }, () => {\r\n            setTimeout(() => {\r\n                onSuccess();\r\n            });\r\n        });\r\n    }\r\n\r\n    public static LoadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (bufferView: ArrayBufferView) => void, onError: (message: string) => void, onProgress?: () => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n        }, () => {\r\n            GLTFLoaderBase.LoadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n        });\r\n    }\r\n\r\n    public static LoadTextureAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension.LoadTextureBufferAsync(gltfRuntime, id,\r\n            (buffer) => {\r\n                if (buffer) {\r\n                    GLTFLoaderExtension.CreateTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n                }\r\n            }, onError);\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderData: string | ArrayBuffer) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n        }, () => {\r\n            GLTFLoaderBase.LoadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n        });\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n        }, () => {\r\n            GLTFLoaderBase.LoadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n        });\r\n    }\r\n\r\n    private static LoadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: Nullable<ArrayBufferView>) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.loadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n        }, () => {\r\n            GLTFLoaderBase.LoadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n        });\r\n    }\r\n\r\n    private static CreateTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: ArrayBufferView, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension.ApplyExtensions((loaderExtension) => {\r\n            return loaderExtension.createTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n        }, () => {\r\n            GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n        });\r\n    }\r\n\r\n    private static ApplyExtensions(func: (loaderExtension: GLTFLoaderExtension) => boolean, defaultFunc: () => void): void {\r\n        for (var extensionName in GLTFLoader.Extensions) {\r\n            var loaderExtension = GLTFLoader.Extensions[extensionName];\r\n            if (func(loaderExtension)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        defaultFunc();\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF1Loader = () => new GLTFLoader();\r\n","import { IGLTFTechniqueParameter, EParameterType, ETextureWrapMode, IGLTFAccessor, ETextureFilterType, IGLTFRuntime, IGLTFBufferView, EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector2, Vector3, Vector4, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color4 } from '@babylonjs/core/Maths/math.color';\r\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\r\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Node } from \"@babylonjs/core/node\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\n/**\r\n* Utils functions for GLTF\r\n* @hidden\r\n*/\r\nexport class GLTFUtils {\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param scene: the Scene object\r\n     * @param source: the source node where to pick the matrix\r\n     * @param parameter: the GLTF technique parameter\r\n     * @param uniformName: the name of the shader's uniform\r\n     * @param shaderMaterial: the shader material\r\n     */\r\n    public static SetMatrix(scene: Scene, source: Node, parameter: IGLTFTechniqueParameter, uniformName: string, shaderMaterial: ShaderMaterial | Effect): void {\r\n        var mat: Nullable<Matrix> = null;\r\n\r\n        if (parameter.semantic === \"MODEL\") {\r\n            mat = source.getWorldMatrix();\r\n        }\r\n        else if (parameter.semantic === \"PROJECTION\") {\r\n            mat = scene.getProjectionMatrix();\r\n        }\r\n        else if (parameter.semantic === \"VIEW\") {\r\n            mat = scene.getViewMatrix();\r\n        }\r\n        else if (parameter.semantic === \"MODELVIEWINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().multiply(scene.getViewMatrix()).invert());\r\n        }\r\n        else if (parameter.semantic === \"MODELVIEW\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix());\r\n        }\r\n        else if (parameter.semantic === \"MODELVIEWPROJECTION\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix());\r\n        }\r\n        else if (parameter.semantic === \"MODELINVERSE\") {\r\n            mat = source.getWorldMatrix().invert();\r\n        }\r\n        else if (parameter.semantic === \"VIEWINVERSE\") {\r\n            mat = scene.getViewMatrix().invert();\r\n        }\r\n        else if (parameter.semantic === \"PROJECTIONINVERSE\") {\r\n            mat = scene.getProjectionMatrix().invert();\r\n        }\r\n        else if (parameter.semantic === \"MODELVIEWINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix()).invert();\r\n        }\r\n        else if (parameter.semantic === \"MODELVIEWPROJECTIONINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix()).invert();\r\n        }\r\n        else if (parameter.semantic === \"MODELINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().invert());\r\n        }\r\n        else {\r\n            debugger;\r\n        }\r\n\r\n        if (mat) {\r\n            switch (parameter.type) {\r\n                case EParameterType.FLOAT_MAT2: shaderMaterial.setMatrix2x2(uniformName, Matrix.GetAsMatrix2x2(mat)); break;\r\n                case EParameterType.FLOAT_MAT3: shaderMaterial.setMatrix3x3(uniformName, Matrix.GetAsMatrix3x3(mat)); break;\r\n                case EParameterType.FLOAT_MAT4: shaderMaterial.setMatrix(uniformName, mat); break;\r\n                default: break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param shaderMaterial: the shader material\r\n     * @param uniform: the name of the shader's uniform\r\n     * @param value: the value of the uniform\r\n     * @param type: the uniform's type (EParameterType FLOAT, VEC2, VEC3 or VEC4)\r\n     */\r\n    public static SetUniform(shaderMaterial: ShaderMaterial | Effect, uniform: string, value: any, type: number): boolean {\r\n        switch (type) {\r\n            case EParameterType.FLOAT: shaderMaterial.setFloat(uniform, value); return true;\r\n            case EParameterType.FLOAT_VEC2: shaderMaterial.setVector2(uniform, Vector2.FromArray(value)); return true;\r\n            case EParameterType.FLOAT_VEC3: shaderMaterial.setVector3(uniform, Vector3.FromArray(value)); return true;\r\n            case EParameterType.FLOAT_VEC4: shaderMaterial.setVector4(uniform, Vector4.FromArray(value)); return true;\r\n            default: return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns the wrap mode of the texture\r\n    * @param mode: the mode value\r\n    */\r\n    public static GetWrapMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureWrapMode.CLAMP_TO_EDGE: return Texture.CLAMP_ADDRESSMODE;\r\n            case ETextureWrapMode.MIRRORED_REPEAT: return Texture.MIRROR_ADDRESSMODE;\r\n            case ETextureWrapMode.REPEAT: return Texture.WRAP_ADDRESSMODE;\r\n            default: return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the byte stride giving an accessor\r\n     * @param accessor: the GLTF accessor objet\r\n     */\r\n    public static GetByteStrideFromType(accessor: IGLTFAccessor): number {\r\n        // Needs this function since \"byteStride\" isn't requiered in glTF format\r\n        var type = accessor.type;\r\n\r\n        switch (type) {\r\n            case \"VEC2\": return 2;\r\n            case \"VEC3\": return 3;\r\n            case \"VEC4\": return 4;\r\n            case \"MAT2\": return 4;\r\n            case \"MAT3\": return 9;\r\n            case \"MAT4\": return 16;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture filter mode giving a mode value\r\n     * @param mode: the filter mode value\r\n     */\r\n    public static GetTextureFilterMode(mode: number): ETextureFilterType {\r\n        switch (mode) {\r\n            case ETextureFilterType.LINEAR:\r\n            case ETextureFilterType.LINEAR_MIPMAP_NEAREST:\r\n            case ETextureFilterType.LINEAR_MIPMAP_LINEAR: return Texture.TRILINEAR_SAMPLINGMODE;\r\n            case ETextureFilterType.NEAREST:\r\n            case ETextureFilterType.NEAREST_MIPMAP_NEAREST: return Texture.NEAREST_SAMPLINGMODE;\r\n            default: return Texture.BILINEAR_SAMPLINGMODE;\r\n        }\r\n    }\r\n\r\n    public static GetBufferFromBufferView(gltfRuntime: IGLTFRuntime, bufferView: IGLTFBufferView, byteOffset: number, byteLength: number, componentType: EComponentType): ArrayBufferView {\r\n        var byteOffset = bufferView.byteOffset + byteOffset;\r\n\r\n        var loadedBufferView = gltfRuntime.loadedBufferViews[bufferView.buffer];\r\n        if (byteOffset + byteLength > loadedBufferView.byteLength) {\r\n            throw new Error(\"Buffer access is out of range\");\r\n        }\r\n\r\n        var buffer = loadedBufferView.buffer;\r\n        byteOffset += loadedBufferView.byteOffset;\r\n\r\n        switch (componentType) {\r\n            case EComponentType.BYTE: return new Int8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_BYTE: return new Uint8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.SHORT: return new Int16Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_SHORT: return new Uint16Array(buffer, byteOffset, byteLength);\r\n            default: return new Float32Array(buffer, byteOffset, byteLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a buffer from its accessor\r\n     * @param gltfRuntime: the GLTF runtime\r\n     * @param accessor: the GLTF accessor\r\n     */\r\n    public static GetBufferFromAccessor(gltfRuntime: IGLTFRuntime, accessor: IGLTFAccessor): any {\r\n        var bufferView: IGLTFBufferView = gltfRuntime.bufferViews[accessor.bufferView];\r\n        var byteLength = accessor.count * GLTFUtils.GetByteStrideFromType(accessor);\r\n        return GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, accessor.byteOffset, byteLength, accessor.componentType);\r\n    }\r\n\r\n    /**\r\n     * Decodes a buffer view into a string\r\n     * @param view: the buffer view\r\n     */\r\n    public static DecodeBufferToText(view: ArrayBufferView): string {\r\n        var result = \"\";\r\n        var length = view.byteLength;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            result += String.fromCharCode((<any>view)[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the default material of gltf. Related to\r\n     * https://github.com/KhronosGroup/glTF/tree/master/specification/1.0#appendix-a-default-material\r\n     * @param scene: the Babylon.js scene\r\n     */\r\n    public static GetDefaultMaterial(scene: Scene): ShaderMaterial {\r\n        if (!GLTFUtils._DefaultMaterial) {\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialVertexShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform mat4 worldView;\",\r\n                \"uniform mat4 projection;\",\r\n                \"\",\r\n                \"attribute vec3 position;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_Position = projection * worldView * vec4(position, 1.0);\",\r\n                \"}\"\r\n            ].join(\"\\n\");\r\n\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialPixelShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform vec4 u_emission;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_FragColor = u_emission;\",\r\n                \"}\"\r\n            ].join(\"\\n\");\r\n\r\n            var shaderPath = {\r\n                vertex: \"GLTFDefaultMaterial\",\r\n                fragment: \"GLTFDefaultMaterial\"\r\n            };\r\n\r\n            var options = {\r\n                attributes: [\"position\"],\r\n                uniforms: [\"worldView\", \"projection\", \"u_emission\"],\r\n                samplers: new Array<string>(),\r\n                needAlphaBlending: false\r\n            };\r\n\r\n            GLTFUtils._DefaultMaterial = new ShaderMaterial(\"GLTFDefaultMaterial\", scene, shaderPath, options);\r\n            GLTFUtils._DefaultMaterial.setColor4(\"u_emission\", new Color4(0.5, 0.5, 0.5, 1.0));\r\n        }\r\n\r\n        return GLTFUtils._DefaultMaterial;\r\n    }\r\n\r\n    // The GLTF default material\r\n    private static _DefaultMaterial: Nullable<ShaderMaterial> = null;\r\n}","import { GLTFLoaderExtension } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, EComponentType, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { IDataBuffer } from '@babylonjs/core/Misc/dataReader';\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/** @hidden */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void, onError: (message: string) => void): boolean {\r\n        var extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    public loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        var texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        var source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        var sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        var bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        var buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void, onError: (message: string) => void): boolean {\r\n        var shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        var binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        var bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        var shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            var shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());","import { GLTFLoaderExtension } from \"./glTFLoader\";\nimport { GLTFLoaderBase } from \"./glTFLoader\";\n\nimport { IGLTFRuntime, IGLTFMaterial } from \"./glTFLoaderInterfaces\";\n\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\nimport { PointLight } from \"@babylonjs/core/Lights/pointLight\";\nimport { SpotLight } from \"@babylonjs/core/Lights/spotLight\";\n\nimport { GLTFLoader } from \"./glTFLoader\";\n\ninterface IGLTFMaterialsCommonExtensionValues {\n    ambient?: number[] | string;\n    diffuse?: number[] | string;\n    emission?: number[] | string;\n    specular?: number[] | string;\n    shininess?: number;\n    transparency?: number;\n}\n\ninterface IGLTFMaterialsCommonExtension {\n    technique: string;\n    transparent?: number;\n    doubleSided?: boolean;\n    values: IGLTFMaterialsCommonExtensionValues;\n}\n\ninterface IGLTFRuntimeCommonExtension {\n    lights: { [key: string]: IGLTFLightCommonExtension };\n}\n\ninterface IGLTFLightCommonExtension {\n    name: string;\n    type: string;\n\n    ambient?: IGLTFAmbientLightCommonExtension;\n    point?: IGLTFPointLightCommonExtension;\n    directional?: IGLTFDirectionalLightCommonExtension;\n    spot?: IGLTFSpotLightCommonExtension;\n}\n\ninterface IGLTFPointLightCommonExtension {\n    color: number[];\n    constantAttenuation: number;\n    linearAttenuation: number;\n    quadraticAttenuation: number;\n}\n\ninterface IGLTFAmbientLightCommonExtension {\n    color: number[];\n}\n\ninterface IGLTFDirectionalLightCommonExtension {\n    color: number[];\n}\n\ninterface IGLTFSpotLightCommonExtension {\n    color: number[];\n    constantAttenuation: number;\n    fallOffAngle: number;\n    fallOffExponent: number;\n    linearAttenuation: number;\n    quadraticAttenuation: number;\n}\n\n/** @hidden */\nexport class GLTFMaterialsCommonExtension extends GLTFLoaderExtension {\n\n    constructor() {\n        super(\"KHR_materials_common\");\n    }\n\n    public loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError: (message: string) => void): boolean {\n        if (!gltfRuntime.extensions) { return false; }\n\n        var extension: IGLTFRuntimeCommonExtension = gltfRuntime.extensions[this.name];\n        if (!extension) { return false; }\n\n        // Create lights\n        var lights = extension.lights;\n        if (lights) {\n            for (var thing in lights) {\n                var light: IGLTFLightCommonExtension = lights[thing];\n\n                switch (light.type) {\n                    case \"ambient\":\n                        var ambientLight = new HemisphericLight(light.name, new Vector3(0, 1, 0), gltfRuntime.scene);\n                        var ambient = light.ambient;\n                        if (ambient) {\n                            ambientLight.diffuse = Color3.FromArray(ambient.color || [1, 1, 1]);\n                        }\n                        break;\n                    case \"point\":\n                        var pointLight = new PointLight(light.name, new Vector3(10, 10, 10), gltfRuntime.scene);\n                        var point = light.point;\n                        if (point) {\n                            pointLight.diffuse = Color3.FromArray(point.color || [1, 1, 1]);\n                        }\n                        break;\n                    case \"directional\":\n                        var dirLight = new DirectionalLight(light.name, new Vector3(0, -1, 0), gltfRuntime.scene);\n                        var directional = light.directional;\n                        if (directional) {\n                            dirLight.diffuse = Color3.FromArray(directional.color || [1, 1, 1]);\n                        }\n                        break;\n                    case \"spot\":\n                        var spot = light.spot;\n                        if (spot) {\n                            var spotLight = new SpotLight(light.name, new Vector3(0, 10, 0), new Vector3(0, -1, 0),\n                                spot.fallOffAngle || Math.PI,\n                                spot.fallOffExponent || 0.0,\n                                gltfRuntime.scene);\n                            spotLight.diffuse = Color3.FromArray(spot.color || [1, 1, 1]);\n                        }\n                        break;\n                    default: Tools.Warn(\"GLTF Material Common extension: light type \\\"\" + light.type + \"\\” not supported\"); break;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\n        var material: IGLTFMaterial = gltfRuntime.materials[id];\n        if (!material || !material.extensions) { return false; }\n\n        var extension: IGLTFMaterialsCommonExtension = material.extensions[this.name];\n        if (!extension) { return false; }\n\n        var standardMaterial = new StandardMaterial(id, gltfRuntime.scene);\n        standardMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\n\n        if (extension.technique === \"CONSTANT\") {\n            standardMaterial.disableLighting = true;\n        }\n\n        standardMaterial.backFaceCulling = extension.doubleSided === undefined ? false : !extension.doubleSided;\n        standardMaterial.alpha = extension.values.transparency === undefined ? 1.0 : extension.values.transparency;\n        standardMaterial.specularPower = extension.values.shininess === undefined ? 0.0 : extension.values.shininess;\n\n        // Ambient\n        if (typeof extension.values.ambient === \"string\") {\n            this._loadTexture(gltfRuntime, extension.values.ambient, standardMaterial, \"ambientTexture\", onError);\n        }\n        else {\n            standardMaterial.ambientColor = Color3.FromArray(extension.values.ambient || [0, 0, 0]);\n        }\n\n        // Diffuse\n        if (typeof extension.values.diffuse === \"string\") {\n            this._loadTexture(gltfRuntime, extension.values.diffuse, standardMaterial, \"diffuseTexture\", onError);\n        }\n        else {\n            standardMaterial.diffuseColor = Color3.FromArray(extension.values.diffuse || [0, 0, 0]);\n        }\n\n        // Emission\n        if (typeof extension.values.emission === \"string\") {\n            this._loadTexture(gltfRuntime, extension.values.emission, standardMaterial, \"emissiveTexture\", onError);\n        }\n        else {\n            standardMaterial.emissiveColor = Color3.FromArray(extension.values.emission || [0, 0, 0]);\n        }\n\n        // Specular\n        if (typeof extension.values.specular === \"string\") {\n            this._loadTexture(gltfRuntime, extension.values.specular, standardMaterial, \"specularTexture\", onError);\n        }\n        else {\n            standardMaterial.specularColor = Color3.FromArray(extension.values.specular || [0, 0, 0]);\n        }\n\n        return true;\n    }\n\n    private _loadTexture(gltfRuntime: IGLTFRuntime, id: string, material: StandardMaterial, propertyPath: string, onError: (message: string) => void): void {\n        // Create buffer from texture url\n        GLTFLoaderBase.LoadTextureBufferAsync(gltfRuntime, id, (buffer) => {\n            // Create texture from buffer\n            GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, (texture) => (<any>material)[propertyPath] = texture, onError);\n        }, onError);\n    }\n}\n\nGLTFLoader.RegisterExtension(new GLTFMaterialsCommonExtension());\n","import { IndicesArray, Nullable } from \"@babylonjs/core/types\";\nimport { Deferred } from \"@babylonjs/core/Misc/deferred\";\nimport { Quaternion, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { IFileRequest } from \"@babylonjs/core/Misc/fileRequest\";\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\nimport { Animation } from \"@babylonjs/core/Animations/animation\";\nimport { Bone } from \"@babylonjs/core/Bones/bone\";\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\nimport { Buffer, VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\nimport { Geometry } from \"@babylonjs/core/Meshes/geometry\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { InstancedMesh } from \"@babylonjs/core/Meshes/instancedMesh\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MorphTarget } from \"@babylonjs/core/Morph/morphTarget\";\nimport { MorphTargetManager } from \"@babylonjs/core/Morph/morphTargetManager\";\nimport { SceneLoaderProgressEvent } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { IProperty, AccessorType, CameraType, AnimationChannelTargetPath, AnimationSamplerInterpolation, AccessorComponentType, MaterialAlphaMode, TextureMinFilter, TextureWrapMode, TextureMagFilter, MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\nimport { _IAnimationSamplerData, IGLTF, ISampler, INode, IScene, IMesh, IAccessor, ISkin, ICamera, IAnimation, IAnimationChannel, IAnimationSampler, IBuffer, IBufferView, IMaterialPbrMetallicRoughness, IMaterial, ITextureInfo, ITexture, IImage, IMeshPrimitive, IArrayItem as IArrItem, _ISamplerData } from \"./glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\nimport { IGLTFLoader, GLTFFileLoader, GLTFLoaderState, IGLTFLoaderData, GLTFLoaderCoordinateSystemMode, GLTFLoaderAnimationStartMode, IImportMeshAsyncOutput } from \"../glTFFileLoader\";\nimport { IAnimationKey, AnimationKeyInterpolation } from '@babylonjs/core/Animations/animationKey';\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\nimport { IDataBuffer } from '@babylonjs/core/Misc/dataReader';\nimport { LoadFileError } from '@babylonjs/core/Misc/fileTools';\nimport { Logger } from '@babylonjs/core/Misc/logger';\nimport { Light } from '@babylonjs/core/Lights/light';\n\ninterface TypedArrayLike extends ArrayBufferView {\n    readonly length: number;\n    [n: number]: number;\n}\n\ninterface TypedArrayConstructor {\n    new(length: number): TypedArrayLike;\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): TypedArrayLike;\n}\n\ninterface IFileRequestInfo extends IFileRequest {\n    _lengthComputable?: boolean;\n    _loaded?: number;\n    _total?: number;\n}\n\ninterface ILoaderProperty extends IProperty {\n    _activeLoaderExtensionFunctions: {\n        [id: string]: boolean\n    };\n}\n\ninterface IRegisteredExtension {\n    factory: (loader: GLTFLoader) => IGLTFLoaderExtension;\n}\n\n/**\n * Helper class for working with arrays when loading the glTF asset\n */\nexport class ArrayItem {\n    /**\n     * Gets an item from the given array.\n     * @param context The context when loading the asset\n     * @param array The array to get the item from\n     * @param index The index to the array\n     * @returns The array item\n     */\n    public static Get<T>(context: string, array: ArrayLike<T> | undefined, index: number | undefined): T {\n        if (!array || index == undefined || !array[index]) {\n            throw new Error(`${context}: Failed to find index (${index})`);\n        }\n\n        return array[index];\n    }\n\n    /**\n     * Assign an `index` field to each item of the given array.\n     * @param array The array of items\n     */\n    public static Assign(array?: IArrItem[]): void {\n        if (array) {\n            for (let index = 0; index < array.length; index++) {\n                array[index].index = index;\n            }\n        }\n    }\n}\n\n/**\n * The glTF 2.0 loader\n */\nexport class GLTFLoader implements IGLTFLoader {\n    /** @hidden */\n    public _completePromises = new Array<Promise<any>>();\n\n    /** @hidden */\n    public _forAssetContainer = false;\n\n    /** Storage */\n    public _babylonLights: Light[] = [];\n\n    private _disposed = false;\n    private _parent: GLTFFileLoader;\n    private _state: Nullable<GLTFLoaderState> = null;\n    private _extensions = new Array<IGLTFLoaderExtension>();\n    private _rootUrl: string;\n    private _fileName: string;\n    private _uniqueRootUrl: string;\n    private _gltf: IGLTF;\n    private _bin: Nullable<IDataBuffer>;\n    private _babylonScene: Scene;\n    private _rootBabylonMesh: Mesh;\n    private _defaultBabylonMaterialData: { [drawMode: number]: Material } = {};\n    private _progressCallback?: (event: SceneLoaderProgressEvent) => void;\n    private _requests = new Array<IFileRequestInfo>();\n\n    private static _RegisteredExtensions: { [name: string]: IRegisteredExtension } = {};\n\n    /**\n     * The default glTF sampler.\n     */\n    public static readonly DefaultSampler: ISampler = { index: -1 };\n\n    /**\n     * Registers a loader extension.\n     * @param name The name of the loader extension.\n     * @param factory The factory function that creates the loader extension.\n     */\n    public static RegisterExtension(name: string, factory: (loader: GLTFLoader) => IGLTFLoaderExtension): void {\n        if (GLTFLoader.UnregisterExtension(name)) {\n            Logger.Warn(`Extension with the name '${name}' already exists`);\n        }\n\n        GLTFLoader._RegisteredExtensions[name] = {\n            factory: factory\n        };\n    }\n\n    /**\n     * Unregisters a loader extension.\n     * @param name The name of the loader extension.\n     * @returns A boolean indicating whether the extension has been unregistered\n     */\n    public static UnregisterExtension(name: string): boolean {\n        if (!GLTFLoader._RegisteredExtensions[name]) {\n            return false;\n        }\n\n        delete GLTFLoader._RegisteredExtensions[name];\n        return true;\n    }\n\n    /**\n     * The loader state.\n     */\n    public get state(): Nullable<GLTFLoaderState> {\n        return this._state;\n    }\n\n    /**\n     * The object that represents the glTF JSON.\n     */\n    public get gltf(): IGLTF {\n        return this._gltf;\n    }\n\n    /**\n     * The BIN chunk of a binary glTF.\n     */\n    public get bin(): Nullable<IDataBuffer> {\n        return this._bin;\n    }\n\n    /**\n     * The parent file loader.\n     */\n    public get parent(): GLTFFileLoader {\n        return this._parent;\n    }\n\n    /**\n     * The Babylon scene when loading the asset.\n     */\n    public get babylonScene(): Scene {\n        return this._babylonScene;\n    }\n\n    /**\n     * The root Babylon mesh when loading the asset.\n     */\n    public get rootBabylonMesh(): Mesh {\n        return this._rootBabylonMesh;\n    }\n\n    /** @hidden */\n    constructor(parent: GLTFFileLoader) {\n        this._parent = parent;\n    }\n\n    /** @hidden */\n    public dispose(): void {\n        if (this._disposed) {\n            return;\n        }\n\n        this._disposed = true;\n\n        for (const request of this._requests) {\n            request.abort();\n        }\n\n        this._requests.length = 0;\n\n        this._completePromises.length = 0;\n\n        for (const name in this._extensions) {\n            const extension = this._extensions[name];\n            extension.dispose && extension.dispose();\n            delete this._extensions[name];\n        }\n\n        delete this._gltf;\n        delete this._babylonScene;\n        delete this._rootBabylonMesh;\n        delete this._progressCallback;\n\n        this._parent._clear();\n    }\n\n    /** @hidden */\n    public importMeshAsync(meshesNames: any, scene: Scene, forAssetContainer: boolean, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<IImportMeshAsyncOutput> {\n        return Promise.resolve().then(() => {\n            this._babylonScene = scene;\n            this._rootUrl = rootUrl;\n            this._fileName = fileName || \"scene\";\n            this._progressCallback = onProgress;\n            this._forAssetContainer = forAssetContainer;\n            this._loadData(data);\n\n            let nodes: Nullable<Array<number>> = null;\n\n            if (meshesNames) {\n                const nodeMap: { [name: string]: number } = {};\n                if (this._gltf.nodes) {\n                    for (const node of this._gltf.nodes) {\n                        if (node.name) {\n                            nodeMap[node.name] = node.index;\n                        }\n                    }\n                }\n\n                const names = (meshesNames instanceof Array) ? meshesNames : [meshesNames];\n                nodes = names.map((name) => {\n                    const node = nodeMap[name];\n                    if (node === undefined) {\n                        throw new Error(`Failed to find node '${name}'`);\n                    }\n\n                    return node;\n                });\n            }\n\n            return this._loadAsync(nodes, () => {\n                return {\n                    meshes: this._getMeshes(),\n                    particleSystems: [],\n                    skeletons: this._getSkeletons(),\n                    animationGroups: this._getAnimationGroups(),\n                    lights: this._babylonLights,\n                    transformNodes: this._getTransformNodes()\n                };\n            });\n        });\n    }\n\n    /** @hidden */\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: SceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\n        return Promise.resolve().then(() => {\n            this._babylonScene = scene;\n            this._rootUrl = rootUrl;\n            this._fileName = fileName || \"scene\";\n            this._progressCallback = onProgress;\n            this._loadData(data);\n            return this._loadAsync(null, () => undefined);\n        });\n    }\n\n    private _loadAsync<T>(nodes: Nullable<Array<number>>, resultFunc: () => T): Promise<T> {\n        return Promise.resolve().then(() => {\n            this._uniqueRootUrl = (this._rootUrl.indexOf(\"file:\") === -1 && this._fileName) ? this._rootUrl : `${this._rootUrl}${Date.now()}/`;\n\n            this._loadExtensions();\n            this._checkExtensions();\n\n            const loadingToReadyCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.READY]}`;\n            const loadingToCompleteCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.COMPLETE]}`;\n\n            this._parent._startPerformanceCounter(loadingToReadyCounterName);\n            this._parent._startPerformanceCounter(loadingToCompleteCounterName);\n\n            this._setState(GLTFLoaderState.LOADING);\n            this._extensionsOnLoading();\n\n            const promises = new Array<Promise<any>>();\n\n            // Block the marking of materials dirty until the scene is loaded.\n            const oldBlockMaterialDirtyMechanism = this._babylonScene.blockMaterialDirtyMechanism;\n            this._babylonScene.blockMaterialDirtyMechanism = true;\n\n            if (nodes) {\n                promises.push(this.loadSceneAsync(\"/nodes\", { nodes: nodes, index: -1 }));\n            }\n            else if (this._gltf.scene != undefined || (this._gltf.scenes && this._gltf.scenes[0])) {\n                const scene = ArrayItem.Get(`/scene`, this._gltf.scenes, this._gltf.scene || 0);\n                promises.push(this.loadSceneAsync(`/scenes/${scene.index}`, scene));\n            }\n\n            // Restore the blocking of material dirty.\n            this._babylonScene.blockMaterialDirtyMechanism = oldBlockMaterialDirtyMechanism;\n\n            if (this._parent.compileMaterials) {\n                promises.push(this._compileMaterialsAsync());\n            }\n\n            if (this._parent.compileShadowGenerators) {\n                promises.push(this._compileShadowGeneratorsAsync());\n            }\n\n            const resultPromise = Promise.all(promises).then(() => {\n                if (this._rootBabylonMesh) {\n                    this._rootBabylonMesh.setEnabled(true);\n                }\n\n                this._setState(GLTFLoaderState.READY);\n                this._extensionsOnReady();\n\n                this._startAnimations();\n\n                return resultFunc();\n            });\n\n            resultPromise.then(() => {\n                this._parent._endPerformanceCounter(loadingToReadyCounterName);\n\n                Tools.SetImmediate(() => {\n                    if (!this._disposed) {\n                        Promise.all(this._completePromises).then(() => {\n                            this._parent._endPerformanceCounter(loadingToCompleteCounterName);\n\n                            this._setState(GLTFLoaderState.COMPLETE);\n\n                            this._parent.onCompleteObservable.notifyObservers(undefined);\n                            this._parent.onCompleteObservable.clear();\n\n                            this.dispose();\n                        }, (error) => {\n                            this._parent.onErrorObservable.notifyObservers(error);\n                            this._parent.onErrorObservable.clear();\n\n                            this.dispose();\n                        });\n                    }\n                });\n            });\n\n            return resultPromise;\n        }, (error) => {\n            if (!this._disposed) {\n                this._parent.onErrorObservable.notifyObservers(error);\n                this._parent.onErrorObservable.clear();\n\n                this.dispose();\n            }\n\n            throw error;\n        });\n    }\n\n    private _loadData(data: IGLTFLoaderData): void {\n        this._gltf = data.json as IGLTF;\n        this._setupData();\n\n        if (data.bin) {\n            const buffers = this._gltf.buffers;\n            if (buffers && buffers[0] && !buffers[0].uri) {\n                const binaryBuffer = buffers[0];\n                if (binaryBuffer.byteLength < data.bin.byteLength - 3 || binaryBuffer.byteLength > data.bin.byteLength) {\n                    Logger.Warn(`Binary buffer length (${binaryBuffer.byteLength}) from JSON does not match chunk length (${data.bin.byteLength})`);\n                }\n\n                this._bin = data.bin;\n            }\n            else {\n                Logger.Warn(\"Unexpected BIN chunk\");\n            }\n        }\n    }\n\n    private _setupData(): void {\n        ArrayItem.Assign(this._gltf.accessors);\n        ArrayItem.Assign(this._gltf.animations);\n        ArrayItem.Assign(this._gltf.buffers);\n        ArrayItem.Assign(this._gltf.bufferViews);\n        ArrayItem.Assign(this._gltf.cameras);\n        ArrayItem.Assign(this._gltf.images);\n        ArrayItem.Assign(this._gltf.materials);\n        ArrayItem.Assign(this._gltf.meshes);\n        ArrayItem.Assign(this._gltf.nodes);\n        ArrayItem.Assign(this._gltf.samplers);\n        ArrayItem.Assign(this._gltf.scenes);\n        ArrayItem.Assign(this._gltf.skins);\n        ArrayItem.Assign(this._gltf.textures);\n\n        if (this._gltf.nodes) {\n            const nodeParents: { [index: number]: number } = {};\n            for (const node of this._gltf.nodes) {\n                if (node.children) {\n                    for (const index of node.children) {\n                        nodeParents[index] = node.index;\n                    }\n                }\n            }\n\n            const rootNode = this._createRootNode();\n            for (const node of this._gltf.nodes) {\n                const parentIndex = nodeParents[node.index];\n                node.parent = parentIndex === undefined ? rootNode : this._gltf.nodes[parentIndex];\n            }\n        }\n    }\n\n    private _loadExtensions(): void {\n        for (const name in GLTFLoader._RegisteredExtensions) {\n            const extension = GLTFLoader._RegisteredExtensions[name].factory(this);\n            if (extension.name !== name) {\n                Logger.Warn(`The name of the glTF loader extension instance does not match the registered name: ${extension.name} !== ${name}`);\n            }\n\n            this._extensions.push(extension);\n            this._parent.onExtensionLoadedObservable.notifyObservers(extension);\n        }\n\n        this._extensions.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));\n        this._parent.onExtensionLoadedObservable.clear();\n    }\n\n    private _checkExtensions(): void {\n        if (this._gltf.extensionsRequired) {\n            for (const name of this._gltf.extensionsRequired) {\n                const available = this._extensions.some((extension) => extension.name === name && extension.enabled);\n                if (!available) {\n                    throw new Error(`Require extension ${name} is not available`);\n                }\n            }\n        }\n    }\n\n    private _setState(state: GLTFLoaderState): void {\n        this._state = state;\n        this.log(GLTFLoaderState[this._state]);\n    }\n\n    private _createRootNode(): INode {\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        this._rootBabylonMesh = new Mesh(\"__root__\", this._babylonScene);\n        this._babylonScene._blockEntityCollection = false;\n        this._rootBabylonMesh.setEnabled(false);\n\n        const rootNode: INode = {\n            _babylonTransformNode: this._rootBabylonMesh,\n            index: -1\n        };\n\n        switch (this._parent.coordinateSystemMode) {\n            case GLTFLoaderCoordinateSystemMode.AUTO: {\n                if (!this._babylonScene.useRightHandedSystem) {\n                    rootNode.rotation = [0, 1, 0, 0];\n                    rootNode.scale = [1, 1, -1];\n                    GLTFLoader._LoadTransform(rootNode, this._rootBabylonMesh);\n                }\n                break;\n            }\n            case GLTFLoaderCoordinateSystemMode.FORCE_RIGHT_HANDED: {\n                this._babylonScene.useRightHandedSystem = true;\n                break;\n            }\n            default: {\n                throw new Error(`Invalid coordinate system mode (${this._parent.coordinateSystemMode})`);\n            }\n        }\n\n        this._parent.onMeshLoadedObservable.notifyObservers(this._rootBabylonMesh);\n        return rootNode;\n    }\n\n    /**\n     * Loads a glTF scene.\n     * @param context The context when loading the asset\n     * @param scene The glTF scene property\n     * @returns A promise that resolves when the load is complete\n     */\n    public loadSceneAsync(context: string, scene: IScene): Promise<void> {\n        const extensionPromise = this._extensionsLoadSceneAsync(context, scene);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        this.logOpen(`${context} ${scene.name || \"\"}`);\n\n        if (scene.nodes) {\n            for (let index of scene.nodes) {\n                const node = ArrayItem.Get(`${context}/nodes/${index}`, this._gltf.nodes, index);\n                promises.push(this.loadNodeAsync(`/nodes/${node.index}`, node, (babylonMesh) => {\n                    babylonMesh.parent = this._rootBabylonMesh;\n                }));\n            }\n        }\n\n        // Link all Babylon bones for each glTF node with the corresponding Babylon transform node.\n        // A glTF joint is a pointer to a glTF node in the glTF node hierarchy similar to Unity3D.\n        if (this._gltf.nodes) {\n            for (const node of this._gltf.nodes) {\n                if (node._babylonTransformNode && node._babylonBones) {\n                    for (const babylonBone of node._babylonBones) {\n                        babylonBone.linkTransformNode(node._babylonTransformNode);\n                    }\n                }\n            }\n        }\n\n        promises.push(this._loadAnimationsAsync());\n\n        this.logClose();\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    private _forEachPrimitive(node: INode, callback: (babylonMesh: AbstractMesh) => void): void {\n        if (node._primitiveBabylonMeshes) {\n            for (const babylonMesh of node._primitiveBabylonMeshes) {\n                callback(babylonMesh);\n            }\n        }\n    }\n\n    private _getMeshes(): AbstractMesh[] {\n        const meshes = new Array<AbstractMesh>();\n\n        // Root mesh is always first.\n        meshes.push(this._rootBabylonMesh);\n\n        const nodes = this._gltf.nodes;\n        if (nodes) {\n            for (const node of nodes) {\n                this._forEachPrimitive(node, (babylonMesh) => {\n                    meshes.push(babylonMesh);\n                });\n            }\n        }\n\n        return meshes;\n    }\n\n    private _getTransformNodes(): TransformNode[] {\n        const transformNodes = new Array<TransformNode>();\n\n        const nodes = this._gltf.nodes;\n        if (nodes) {\n            for (const node of nodes) {\n                if (node._babylonTransformNode && node._babylonTransformNode.getClassName() === \"TransformNode\") {\n                    transformNodes.push(node._babylonTransformNode);\n                }\n            }\n        }\n\n        return transformNodes;\n    }\n\n    private _getSkeletons(): Skeleton[] {\n        const skeletons = new Array<Skeleton>();\n\n        const skins = this._gltf.skins;\n        if (skins) {\n            for (const skin of skins) {\n                if (skin._data) {\n                    skeletons.push(skin._data.babylonSkeleton);\n                }\n            }\n        }\n\n        return skeletons;\n    }\n\n    private _getAnimationGroups(): AnimationGroup[] {\n        const animationGroups = new Array<AnimationGroup>();\n\n        const animations = this._gltf.animations;\n        if (animations) {\n            for (const animation of animations) {\n                if (animation._babylonAnimationGroup) {\n                    animationGroups.push(animation._babylonAnimationGroup);\n                }\n            }\n        }\n\n        return animationGroups;\n    }\n\n    private _startAnimations(): void {\n        switch (this._parent.animationStartMode) {\n            case GLTFLoaderAnimationStartMode.NONE: {\n                // do nothing\n                break;\n            }\n            case GLTFLoaderAnimationStartMode.FIRST: {\n                const babylonAnimationGroups = this._getAnimationGroups();\n                if (babylonAnimationGroups.length !== 0) {\n                    babylonAnimationGroups[0].start(true);\n                }\n                break;\n            }\n            case GLTFLoaderAnimationStartMode.ALL: {\n                const babylonAnimationGroups = this._getAnimationGroups();\n                for (const babylonAnimationGroup of babylonAnimationGroups) {\n                    babylonAnimationGroup.start(true);\n                }\n                break;\n            }\n            default: {\n                Logger.Error(`Invalid animation start mode (${this._parent.animationStartMode})`);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Loads a glTF node.\n     * @param context The context when loading the asset\n     * @param node The glTF node property\n     * @param assign A function called synchronously after parsing the glTF properties\n     * @returns A promise that resolves with the loaded Babylon mesh when the load is complete\n     */\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void = () => { }): Promise<TransformNode> {\n        const extensionPromise = this._extensionsLoadNodeAsync(context, node, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        if (node._babylonTransformNode) {\n            throw new Error(`${context}: Invalid recursive node hierarchy`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        this.logOpen(`${context} ${node.name || \"\"}`);\n\n        const loadNode = (babylonTransformNode: TransformNode) => {\n            GLTFLoader.AddPointerMetadata(babylonTransformNode, context);\n            GLTFLoader._LoadTransform(node, babylonTransformNode);\n\n            if (node.camera != undefined) {\n                const camera = ArrayItem.Get(`${context}/camera`, this._gltf.cameras, node.camera);\n                promises.push(this.loadCameraAsync(`/cameras/${camera.index}`, camera, (babylonCamera) => {\n                    babylonCamera.parent = babylonTransformNode;\n                }));\n            }\n\n            if (node.children) {\n                for (const index of node.children) {\n                    const childNode = ArrayItem.Get(`${context}/children/${index}`, this._gltf.nodes, index);\n                    promises.push(this.loadNodeAsync(`/nodes/${childNode.index}`, childNode, (childBabylonMesh) => {\n                        childBabylonMesh.parent = babylonTransformNode;\n                    }));\n                }\n            }\n\n            assign(babylonTransformNode);\n        };\n\n        if (node.mesh == undefined) {\n            const nodeName = node.name || `node${node.index}`;\n            this._babylonScene._blockEntityCollection = this._forAssetContainer;\n            node._babylonTransformNode = new TransformNode(nodeName, this._babylonScene);\n            this._babylonScene._blockEntityCollection = false;\n            loadNode(node._babylonTransformNode);\n        }\n        else {\n            const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\n            promises.push(this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, loadNode));\n        }\n\n        this.logClose();\n\n        return Promise.all(promises).then(() => {\n            this._forEachPrimitive(node, (babylonMesh) => {\n                babylonMesh.refreshBoundingInfo(true);\n            });\n\n            return node._babylonTransformNode!;\n        });\n    }\n\n    private _loadMeshAsync(context: string, node: INode, mesh: IMesh, assign: (babylonTransformNode: TransformNode) => void): Promise<TransformNode> {\n        const primitives = mesh.primitives;\n        if (!primitives || !primitives.length) {\n            throw new Error(`${context}: Primitives are missing`);\n        }\n\n        if (primitives[0].index == undefined) {\n            ArrayItem.Assign(primitives);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        this.logOpen(`${context} ${mesh.name || \"\"}`);\n\n        const name = node.name || `node${node.index}`;\n\n        if (primitives.length === 1) {\n            const primitive = mesh.primitives[0];\n            promises.push(this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, name, node, mesh, primitive, (babylonMesh) => {\n                node._babylonTransformNode = babylonMesh;\n                node._primitiveBabylonMeshes = [babylonMesh];\n            }));\n        }\n        else {\n            node._babylonTransformNode = new TransformNode(name, this._babylonScene);\n            node._primitiveBabylonMeshes = [];\n            for (const primitive of primitives) {\n                promises.push(this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, `${name}_primitive${primitive.index}`, node, mesh, primitive, (babylonMesh) => {\n                    babylonMesh.parent = node._babylonTransformNode!;\n                    node._primitiveBabylonMeshes!.push(babylonMesh);\n                }));\n            }\n        }\n\n        if (node.skin != undefined) {\n            const skin = ArrayItem.Get(`${context}/skin`, this._gltf.skins, node.skin);\n            promises.push(this._loadSkinAsync(`/skins/${skin.index}`, node, skin));\n        }\n\n        assign(node._babylonTransformNode!);\n\n        this.logClose();\n\n        return Promise.all(promises).then(() => {\n            return node._babylonTransformNode!;\n        });\n    }\n\n    /**\n     * @hidden Define this method to modify the default behavior when loading data for mesh primitives.\n     * @param context The context when loading the asset\n     * @param name The mesh name when loading the asset\n     * @param node The glTF node when loading the asset\n     * @param mesh The glTF mesh when loading the asset\n     * @param primitive The glTF mesh primitive property\n     * @param assign A function called synchronously after parsing the glTF properties\n     * @returns A promise that resolves with the loaded mesh when the load is complete or null if not handled\n     */\n    public _loadMeshPrimitiveAsync(context: string, name: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, assign: (babylonMesh: AbstractMesh) => void): Promise<AbstractMesh> {\n        const extensionPromise = this._extensionsLoadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        this.logOpen(`${context}`);\n\n        const shouldInstance = this._parent.createInstances && (node.skin == undefined && !mesh.primitives[0].targets);\n\n        let babylonAbstractMesh: AbstractMesh;\n        let promise: Promise<any>;\n\n        if (shouldInstance && primitive._instanceData) {\n            babylonAbstractMesh = primitive._instanceData.babylonSourceMesh.createInstance(name) as InstancedMesh;\n            promise = primitive._instanceData.promise;\n        }\n        else {\n            const promises = new Array<Promise<any>>();\n\n            this._babylonScene._blockEntityCollection = this._forAssetContainer;\n            const babylonMesh = new Mesh(name, this._babylonScene);\n            this._babylonScene._blockEntityCollection = false;\n            babylonMesh.overrideMaterialSideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n\n            this._createMorphTargets(context, node, mesh, primitive, babylonMesh);\n            promises.push(this._loadVertexDataAsync(context, primitive, babylonMesh).then((babylonGeometry) => {\n                return this._loadMorphTargetsAsync(context, primitive, babylonMesh, babylonGeometry).then(() => {\n                    babylonGeometry.applyToMesh(babylonMesh);\n                });\n            }));\n\n            const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\n            if (primitive.material == undefined) {\n                let babylonMaterial = this._defaultBabylonMaterialData[babylonDrawMode];\n                if (!babylonMaterial) {\n                    babylonMaterial = this._createDefaultMaterial(\"__GLTFLoader._default\", babylonDrawMode);\n                    this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\n                    this._defaultBabylonMaterialData[babylonDrawMode] = babylonMaterial;\n                }\n                babylonMesh.material = babylonMaterial;\n            }\n            else {\n                const material = ArrayItem.Get(`${context}/material`, this._gltf.materials, primitive.material);\n                promises.push(this._loadMaterialAsync(`/materials/${material.index}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\n                    babylonMesh.material = babylonMaterial;\n                }));\n            }\n\n            promise = Promise.all(promises);\n\n            if (shouldInstance) {\n                primitive._instanceData = {\n                    babylonSourceMesh: babylonMesh,\n                    promise: promise\n                };\n            }\n\n            babylonAbstractMesh = babylonMesh;\n        }\n\n        GLTFLoader.AddPointerMetadata(babylonAbstractMesh, context);\n        this._parent.onMeshLoadedObservable.notifyObservers(babylonAbstractMesh);\n        assign(babylonAbstractMesh);\n\n        this.logClose();\n\n        return promise.then(() => {\n            return babylonAbstractMesh;\n        });\n    }\n\n    private _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Promise<Geometry> {\n        const extensionPromise = this._extensionsLoadVertexDataAsync(context, primitive, babylonMesh);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const attributes = primitive.attributes;\n        if (!attributes) {\n            throw new Error(`${context}: Attributes are missing`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        const babylonGeometry = new Geometry(babylonMesh.name, this._babylonScene);\n\n        if (primitive.indices == undefined) {\n            babylonMesh.isUnIndexed = true;\n        }\n        else {\n            const accessor = ArrayItem.Get(`${context}/indices`, this._gltf.accessors, primitive.indices);\n            promises.push(this._loadIndicesAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\n                babylonGeometry.setIndices(data);\n            }));\n        }\n\n        const loadAttribute = (attribute: string, kind: string, callback?: (accessor: IAccessor) => void) => {\n            if (attributes[attribute] == undefined) {\n                return;\n            }\n\n            babylonMesh._delayInfo = babylonMesh._delayInfo || [];\n            if (babylonMesh._delayInfo.indexOf(kind) === -1) {\n                babylonMesh._delayInfo.push(kind);\n            }\n\n            const accessor = ArrayItem.Get(`${context}/attributes/${attribute}`, this._gltf.accessors, attributes[attribute]);\n            promises.push(this._loadVertexAccessorAsync(`/accessors/${accessor.index}`, accessor, kind).then((babylonVertexBuffer) => {\n                babylonGeometry.setVerticesBuffer(babylonVertexBuffer, accessor.count);\n            }));\n\n            if (kind == VertexBuffer.MatricesIndicesExtraKind) {\n                babylonMesh.numBoneInfluencers = 8;\n            }\n\n            if (callback) {\n                callback(accessor);\n            }\n        };\n\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\n        loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\n        loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\n        loadAttribute(\"JOINTS_1\", VertexBuffer.MatricesIndicesExtraKind);\n        loadAttribute(\"WEIGHTS_1\", VertexBuffer.MatricesWeightsExtraKind);\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (accessor) => {\n            if (accessor.type === AccessorType.VEC4) {\n                babylonMesh.hasVertexAlpha = true;\n            }\n        });\n\n        return Promise.all(promises).then(() => {\n            return babylonGeometry;\n        });\n    }\n\n    private _createMorphTargets(context: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, babylonMesh: Mesh): void {\n        if (!primitive.targets) {\n            return;\n        }\n\n        if (node._numMorphTargets == undefined) {\n            node._numMorphTargets = primitive.targets.length;\n        }\n        else if (primitive.targets.length !== node._numMorphTargets) {\n            throw new Error(`${context}: Primitives do not have the same number of targets`);\n        }\n\n        const targetNames = mesh.extras ? mesh.extras.targetNames : null;\n\n        babylonMesh.morphTargetManager = new MorphTargetManager(babylonMesh.getScene());\n        for (let index = 0; index < primitive.targets.length; index++) {\n            const weight = node.weights ? node.weights[index] : mesh.weights ? mesh.weights[index] : 0;\n            const name = targetNames ? targetNames[index] : `morphTarget${index}`;\n            babylonMesh.morphTargetManager.addTarget(new MorphTarget(name, weight, babylonMesh.getScene()));\n            // TODO: tell the target whether it has positions, normals, tangents\n        }\n    }\n\n    private _loadMorphTargetsAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh, babylonGeometry: Geometry): Promise<void> {\n        if (!primitive.targets) {\n            return Promise.resolve();\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        const morphTargetManager = babylonMesh.morphTargetManager!;\n        for (let index = 0; index < morphTargetManager.numTargets; index++) {\n            const babylonMorphTarget = morphTargetManager.getTarget(index);\n            promises.push(this._loadMorphTargetVertexDataAsync(`${context}/targets/${index}`, babylonGeometry, primitive.targets[index], babylonMorphTarget));\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    private _loadMorphTargetVertexDataAsync(context: string, babylonGeometry: Geometry, attributes: { [name: string]: number }, babylonMorphTarget: MorphTarget): Promise<void> {\n        const promises = new Array<Promise<any>>();\n\n        const loadAttribute = (attribute: string, kind: string, setData: (babylonVertexBuffer: VertexBuffer, data: Float32Array) => void) => {\n            if (attributes[attribute] == undefined) {\n                return;\n            }\n\n            const babylonVertexBuffer = babylonGeometry.getVertexBuffer(kind);\n            if (!babylonVertexBuffer) {\n                return;\n            }\n\n            const accessor = ArrayItem.Get(`${context}/${attribute}`, this._gltf.accessors, attributes[attribute]);\n            promises.push(this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\n                setData(babylonVertexBuffer, data);\n            }));\n        };\n\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind, (babylonVertexBuffer, data) => {\n            const positions = new Float32Array(data.length);\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\n                positions[index] = data[index] + value;\n            });\n\n            babylonMorphTarget.setPositions(positions);\n        });\n\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind, (babylonVertexBuffer, data) => {\n            const normals = new Float32Array(data.length);\n            babylonVertexBuffer.forEach(normals.length, (value, index) => {\n                normals[index] = data[index] + value;\n            });\n\n            babylonMorphTarget.setNormals(normals);\n        });\n\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind, (babylonVertexBuffer, data) => {\n            const tangents = new Float32Array(data.length / 3 * 4);\n            let dataIndex = 0;\n            babylonVertexBuffer.forEach(data.length / 3 * 4, (value, index) => {\n                // Tangent data for morph targets is stored as xyz delta.\n                // The vertexData.tangent is stored as xyzw.\n                // So we need to skip every fourth vertexData.tangent.\n                if (((index + 1) % 4) !== 0) {\n                    tangents[dataIndex] = data[dataIndex] + value;\n                    dataIndex++;\n                }\n            });\n            babylonMorphTarget.setTangents(tangents);\n        });\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    private static _LoadTransform(node: INode, babylonNode: TransformNode): void {\n        // Ignore the TRS of skinned nodes.\n        // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\n        if (node.skin != undefined) {\n            return;\n        }\n\n        let position = Vector3.Zero();\n        let rotation = Quaternion.Identity();\n        let scaling = Vector3.One();\n\n        if (node.matrix) {\n            const matrix = Matrix.FromArray(node.matrix);\n            matrix.decompose(scaling, rotation, position);\n        }\n        else {\n            if (node.translation) { position = Vector3.FromArray(node.translation); }\n            if (node.rotation) { rotation = Quaternion.FromArray(node.rotation); }\n            if (node.scale) { scaling = Vector3.FromArray(node.scale); }\n        }\n\n        babylonNode.position = position;\n        babylonNode.rotationQuaternion = rotation;\n        babylonNode.scaling = scaling;\n    }\n\n    private _loadSkinAsync(context: string, node: INode, skin: ISkin): Promise<void> {\n        const extensionPromise = this._extensionsLoadSkinAsync(context, node, skin);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const assignSkeleton = (skeleton: Skeleton) => {\n            this._forEachPrimitive(node, (babylonMesh) => {\n                babylonMesh.skeleton = skeleton;\n            });\n        };\n\n        if (skin._data) {\n            assignSkeleton(skin._data.babylonSkeleton);\n            return skin._data.promise;\n        }\n\n        const skeletonId = `skeleton${skin.index}`;\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        const babylonSkeleton = new Skeleton(skin.name || skeletonId, skeletonId, this._babylonScene);\n        this._babylonScene._blockEntityCollection = false;\n\n        // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\n        babylonSkeleton.overrideMesh = this._rootBabylonMesh;\n\n        this._loadBones(context, skin, babylonSkeleton);\n        assignSkeleton(babylonSkeleton);\n\n        const promise = this._loadSkinInverseBindMatricesDataAsync(context, skin).then((inverseBindMatricesData) => {\n            this._updateBoneMatrices(babylonSkeleton, inverseBindMatricesData);\n        });\n\n        skin._data = {\n            babylonSkeleton: babylonSkeleton,\n            promise: promise\n        };\n\n        return promise;\n    }\n\n    private _loadBones(context: string, skin: ISkin, babylonSkeleton: Skeleton): void {\n        const babylonBones: { [index: number]: Bone } = {};\n        for (const index of skin.joints) {\n            const node = ArrayItem.Get(`${context}/joints/${index}`, this._gltf.nodes, index);\n            this._loadBone(node, skin, babylonSkeleton, babylonBones);\n        }\n    }\n\n    private _loadBone(node: INode, skin: ISkin, babylonSkeleton: Skeleton, babylonBones: { [index: number]: Bone }): Bone {\n        let babylonBone = babylonBones[node.index];\n        if (babylonBone) {\n            return babylonBone;\n        }\n\n        let babylonParentBone: Nullable<Bone> = null;\n        if (node.parent && node.parent._babylonTransformNode !== this._rootBabylonMesh) {\n            babylonParentBone = this._loadBone(node.parent, skin, babylonSkeleton, babylonBones);\n        }\n\n        const boneIndex = skin.joints.indexOf(node.index);\n\n        babylonBone = new Bone(node.name || `joint${node.index}`, babylonSkeleton, babylonParentBone, this._getNodeMatrix(node), null, null, boneIndex);\n        babylonBones[node.index] = babylonBone;\n\n        node._babylonBones = node._babylonBones || [];\n        node._babylonBones.push(babylonBone);\n\n        return babylonBone;\n    }\n\n    private _loadSkinInverseBindMatricesDataAsync(context: string, skin: ISkin): Promise<Nullable<Float32Array>> {\n        if (skin.inverseBindMatrices == undefined) {\n            return Promise.resolve(null);\n        }\n\n        const accessor = ArrayItem.Get(`${context}/inverseBindMatrices`, this._gltf.accessors, skin.inverseBindMatrices);\n        return this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor);\n    }\n\n    private _updateBoneMatrices(babylonSkeleton: Skeleton, inverseBindMatricesData: Nullable<Float32Array>): void {\n        for (const babylonBone of babylonSkeleton.bones) {\n            let baseMatrix = Matrix.Identity();\n            const boneIndex = babylonBone._index!;\n            if (inverseBindMatricesData && boneIndex !== -1) {\n                Matrix.FromArrayToRef(inverseBindMatricesData, boneIndex * 16, baseMatrix);\n                baseMatrix.invertToRef(baseMatrix);\n            }\n\n            const babylonParentBone = babylonBone.getParent();\n            if (babylonParentBone) {\n                baseMatrix.multiplyToRef(babylonParentBone.getInvertedAbsoluteTransform(), baseMatrix);\n            }\n\n            babylonBone.updateMatrix(baseMatrix, false, false);\n            babylonBone._updateDifferenceMatrix(undefined, false);\n        }\n    }\n\n    private _getNodeMatrix(node: INode): Matrix {\n        return node.matrix ?\n            Matrix.FromArray(node.matrix) :\n            Matrix.Compose(\n                node.scale ? Vector3.FromArray(node.scale) : Vector3.One(),\n                node.rotation ? Quaternion.FromArray(node.rotation) : Quaternion.Identity(),\n                node.translation ? Vector3.FromArray(node.translation) : Vector3.Zero());\n    }\n\n    /**\n     * Loads a glTF camera.\n     * @param context The context when loading the asset\n     * @param camera The glTF camera property\n     * @param assign A function called synchronously after parsing the glTF properties\n     * @returns A promise that resolves with the loaded Babylon camera when the load is complete\n     */\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void = () => { }): Promise<Camera> {\n        const extensionPromise = this._extensionsLoadCameraAsync(context, camera, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        this.logOpen(`${context} ${camera.name || \"\"}`);\n\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        const babylonCamera = new FreeCamera(camera.name || `camera${camera.index}`, Vector3.Zero(), this._babylonScene, false);\n        this._babylonScene._blockEntityCollection = false;\n\n        babylonCamera.rotation = new Vector3(0, Math.PI, 0);\n\n        switch (camera.type) {\n            case CameraType.PERSPECTIVE: {\n                const perspective = camera.perspective;\n                if (!perspective) {\n                    throw new Error(`${context}: Camera perspective properties are missing`);\n                }\n\n                babylonCamera.fov = perspective.yfov;\n                babylonCamera.minZ = perspective.znear;\n                babylonCamera.maxZ = perspective.zfar || Number.MAX_VALUE;\n                break;\n            }\n            case CameraType.ORTHOGRAPHIC: {\n                if (!camera.orthographic) {\n                    throw new Error(`${context}: Camera orthographic properties are missing`);\n                }\n\n                babylonCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\n                babylonCamera.orthoLeft = -camera.orthographic.xmag;\n                babylonCamera.orthoRight = camera.orthographic.xmag;\n                babylonCamera.orthoBottom = -camera.orthographic.ymag;\n                babylonCamera.orthoTop = camera.orthographic.ymag;\n                babylonCamera.minZ = camera.orthographic.znear;\n                babylonCamera.maxZ = camera.orthographic.zfar;\n                break;\n            }\n            default: {\n                throw new Error(`${context}: Invalid camera type (${camera.type})`);\n            }\n        }\n\n        GLTFLoader.AddPointerMetadata(babylonCamera, context);\n        this._parent.onCameraLoadedObservable.notifyObservers(babylonCamera);\n        assign(babylonCamera);\n\n        return Promise.all(promises).then(() => {\n            return babylonCamera;\n        });\n    }\n\n    private _loadAnimationsAsync(): Promise<void> {\n        const animations = this._gltf.animations;\n        if (!animations) {\n            return Promise.resolve();\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        for (let index = 0; index < animations.length; index++) {\n            const animation = animations[index];\n            promises.push(this.loadAnimationAsync(`/animations/${animation.index}`, animation));\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    /**\n     * Loads a glTF animation.\n     * @param context The context when loading the asset\n     * @param animation The glTF animation property\n     * @returns A promise that resolves with the loaded Babylon animation group when the load is complete\n     */\n    public loadAnimationAsync(context: string, animation: IAnimation): Promise<AnimationGroup> {\n        const promise = this._extensionsLoadAnimationAsync(context, animation);\n        if (promise) {\n            return promise;\n        }\n\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        const babylonAnimationGroup = new AnimationGroup(animation.name || `animation${animation.index}`, this._babylonScene);\n        this._babylonScene._blockEntityCollection = false;\n        animation._babylonAnimationGroup = babylonAnimationGroup;\n\n        const promises = new Array<Promise<any>>();\n\n        ArrayItem.Assign(animation.channels);\n        ArrayItem.Assign(animation.samplers);\n\n        for (const channel of animation.channels) {\n            promises.push(this._loadAnimationChannelAsync(`${context}/channels/${channel.index}`, context, animation, channel, babylonAnimationGroup));\n        }\n\n        return Promise.all(promises).then(() => {\n            babylonAnimationGroup.normalize(0);\n            return babylonAnimationGroup;\n        });\n    }\n\n    /**\n     * @hidden Loads a glTF animation channel.\n     * @param context The context when loading the asset\n     * @param animationContext The context of the animation when loading the asset\n     * @param animation The glTF animation property\n     * @param channel The glTF animation channel property\n     * @param babylonAnimationGroup The babylon animation group property\n     * @param animationTargetOverride The babylon animation channel target override property. My be null.\n     * @returns A void promise when the channel load is complete\n     */\n    public _loadAnimationChannelAsync(context: string, animationContext: string, animation: IAnimation, channel: IAnimationChannel, babylonAnimationGroup: AnimationGroup, animationTargetOverride: Nullable<IAnimatable> = null): Promise<void> {\n        if (channel.target.node == undefined) {\n            return Promise.resolve();\n        }\n\n        const targetNode = ArrayItem.Get(`${context}/target/node`, this._gltf.nodes, channel.target.node);\n\n        // Ignore animations that have no animation targets.\n        if ((channel.target.path === AnimationChannelTargetPath.WEIGHTS && !targetNode._numMorphTargets) ||\n            (channel.target.path !== AnimationChannelTargetPath.WEIGHTS && !targetNode._babylonTransformNode)) {\n            return Promise.resolve();\n        }\n\n        const sampler = ArrayItem.Get(`${context}/sampler`, animation.samplers, channel.sampler);\n        return this._loadAnimationSamplerAsync(`${animationContext}/samplers/${channel.sampler}`, sampler).then((data) => {\n            let targetPath: string;\n            let animationType: number;\n            switch (channel.target.path) {\n                case AnimationChannelTargetPath.TRANSLATION: {\n                    targetPath = \"position\";\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\n                    break;\n                }\n                case AnimationChannelTargetPath.ROTATION: {\n                    targetPath = \"rotationQuaternion\";\n                    animationType = Animation.ANIMATIONTYPE_QUATERNION;\n                    break;\n                }\n                case AnimationChannelTargetPath.SCALE: {\n                    targetPath = \"scaling\";\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\n                    break;\n                }\n                case AnimationChannelTargetPath.WEIGHTS: {\n                    targetPath = \"influence\";\n                    animationType = Animation.ANIMATIONTYPE_FLOAT;\n                    break;\n                }\n                default: {\n                    throw new Error(`${context}/target/path: Invalid value (${channel.target.path})`);\n                }\n            }\n\n            let outputBufferOffset = 0;\n            let getNextOutputValue: () => Vector3 | Quaternion | Array<number>;\n            switch (targetPath) {\n                case \"position\": {\n                    getNextOutputValue = () => {\n                        const value = Vector3.FromArray(data.output, outputBufferOffset);\n                        outputBufferOffset += 3;\n                        return value;\n                    };\n                    break;\n                }\n                case \"rotationQuaternion\": {\n                    getNextOutputValue = () => {\n                        const value = Quaternion.FromArray(data.output, outputBufferOffset);\n                        outputBufferOffset += 4;\n                        return value;\n                    };\n                    break;\n                }\n                case \"scaling\": {\n                    getNextOutputValue = () => {\n                        const value = Vector3.FromArray(data.output, outputBufferOffset);\n                        outputBufferOffset += 3;\n                        return value;\n                    };\n                    break;\n                }\n                case \"influence\": {\n                    getNextOutputValue = () => {\n                        const value = new Array<number>(targetNode._numMorphTargets!);\n                        for (let i = 0; i < targetNode._numMorphTargets!; i++) {\n                            value[i] = data.output[outputBufferOffset++];\n                        }\n                        return value;\n                    };\n                    break;\n                }\n            }\n\n            let getNextKey: (frameIndex: number) => IAnimationKey;\n            switch (data.interpolation) {\n                case AnimationSamplerInterpolation.STEP: {\n                    getNextKey = (frameIndex) => ({\n                        frame: data.input[frameIndex],\n                        value: getNextOutputValue(),\n                        interpolation: AnimationKeyInterpolation.STEP\n                    });\n                    break;\n                }\n                case AnimationSamplerInterpolation.LINEAR: {\n                    getNextKey = (frameIndex) => ({\n                        frame: data.input[frameIndex],\n                        value: getNextOutputValue()\n                    });\n                    break;\n                }\n                case AnimationSamplerInterpolation.CUBICSPLINE: {\n                    getNextKey = (frameIndex) => ({\n                        frame: data.input[frameIndex],\n                        inTangent: getNextOutputValue(),\n                        value: getNextOutputValue(),\n                        outTangent: getNextOutputValue()\n                    });\n                    break;\n                }\n            }\n\n            const keys = new Array(data.input.length);\n            for (let frameIndex = 0; frameIndex < data.input.length; frameIndex++) {\n                keys[frameIndex] = getNextKey!(frameIndex);\n            }\n\n            if (targetPath === \"influence\") {\n                for (let targetIndex = 0; targetIndex < targetNode._numMorphTargets!; targetIndex++) {\n                    const animationName = `${babylonAnimationGroup.name}_channel${babylonAnimationGroup.targetedAnimations.length}`;\n                    const babylonAnimation = new Animation(animationName, targetPath, 1, animationType);\n                    babylonAnimation.setKeys(keys.map((key) => ({\n                        frame: key.frame,\n                        inTangent: key.inTangent ? key.inTangent[targetIndex] : undefined,\n                        value: key.value[targetIndex],\n                        outTangent: key.outTangent ? key.outTangent[targetIndex] : undefined\n                    })));\n\n                    this._forEachPrimitive(targetNode, (babylonAbstractMesh: AbstractMesh) => {\n                        const babylonMesh = babylonAbstractMesh as Mesh;\n                        const morphTarget = babylonMesh.morphTargetManager!.getTarget(targetIndex);\n                        const babylonAnimationClone = babylonAnimation.clone();\n                        morphTarget.animations.push(babylonAnimationClone);\n                        babylonAnimationGroup.addTargetedAnimation(babylonAnimationClone, morphTarget);\n                    });\n                }\n            }\n            else {\n                const animationName = `${babylonAnimationGroup.name}_channel${babylonAnimationGroup.targetedAnimations.length}`;\n                const babylonAnimation = new Animation(animationName, targetPath, 1, animationType);\n                babylonAnimation.setKeys(keys);\n\n                if (animationTargetOverride != null && animationTargetOverride.animations != null) {\n                    animationTargetOverride.animations.push(babylonAnimation);\n                    babylonAnimationGroup.addTargetedAnimation(babylonAnimation, animationTargetOverride);\n                } else {\n                    targetNode._babylonTransformNode!.animations.push(babylonAnimation);\n                    babylonAnimationGroup.addTargetedAnimation(babylonAnimation, targetNode._babylonTransformNode!);\n                }\n            }\n        });\n    }\n\n    private _loadAnimationSamplerAsync(context: string, sampler: IAnimationSampler): Promise<_IAnimationSamplerData> {\n        if (sampler._data) {\n            return sampler._data;\n        }\n\n        const interpolation = sampler.interpolation || AnimationSamplerInterpolation.LINEAR;\n        switch (interpolation) {\n            case AnimationSamplerInterpolation.STEP:\n            case AnimationSamplerInterpolation.LINEAR:\n            case AnimationSamplerInterpolation.CUBICSPLINE: {\n                break;\n            }\n            default: {\n                throw new Error(`${context}/interpolation: Invalid value (${sampler.interpolation})`);\n            }\n        }\n\n        const inputAccessor = ArrayItem.Get(`${context}/input`, this._gltf.accessors, sampler.input);\n        const outputAccessor = ArrayItem.Get(`${context}/output`, this._gltf.accessors, sampler.output);\n        sampler._data = Promise.all([\n            this._loadFloatAccessorAsync(`/accessors/${inputAccessor.index}`, inputAccessor),\n            this._loadFloatAccessorAsync(`/accessors/${outputAccessor.index}`, outputAccessor)\n        ]).then(([inputData, outputData]) => {\n            return {\n                input: inputData,\n                interpolation: interpolation,\n                output: outputData,\n            };\n        });\n\n        return sampler._data;\n    }\n\n    private _loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Promise<ArrayBufferView> {\n        const extensionPromise = this._extensionsLoadBufferAsync(context, buffer, byteOffset, byteLength);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        if (!buffer._data) {\n            if (buffer.uri) {\n                buffer._data = this.loadUriAsync(`${context}/uri`, buffer, buffer.uri);\n            }\n            else {\n                if (!this._bin) {\n                    throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\n                }\n\n                buffer._data = this._bin.readAsync(0, buffer.byteLength);\n            }\n        }\n\n        return buffer._data.then((data) => {\n            try {\n                return new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\n            }\n            catch (e) {\n                throw new Error(`${context}: ${e.message}`);\n            }\n        });\n    }\n\n    /**\n     * Loads a glTF buffer view.\n     * @param context The context when loading the asset\n     * @param bufferView The glTF buffer view property\n     * @returns A promise that resolves with the loaded data when the load is complete\n     */\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Promise<ArrayBufferView> {\n        const extensionPromise = this._extensionsLoadBufferViewAsync(context, bufferView);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        if (bufferView._data) {\n            return bufferView._data;\n        }\n\n        const buffer = ArrayItem.Get(`${context}/buffer`, this._gltf.buffers, bufferView.buffer);\n        bufferView._data = this._loadBufferAsync(`/buffers/${buffer.index}`, buffer, (bufferView.byteOffset || 0), bufferView.byteLength);\n\n        return bufferView._data;\n    }\n\n    private _loadAccessorAsync(context: string, accessor: IAccessor, constructor: TypedArrayConstructor): Promise<ArrayBufferView> {\n        if (accessor._data) {\n            return accessor._data;\n        }\n\n        const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\n        const byteStride = numComponents * VertexBuffer.GetTypeByteLength(accessor.componentType);\n        const length = numComponents * accessor.count;\n\n        if (accessor.bufferView == undefined) {\n            accessor._data = Promise.resolve(new constructor(length));\n        }\n        else {\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\n                if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized) {\n                    return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, length);\n                }\n                else {\n                    const typedArray = new constructor(length);\n                    VertexBuffer.ForEach(data, accessor.byteOffset || 0, bufferView.byteStride || byteStride, numComponents, accessor.componentType, typedArray.length, accessor.normalized || false, (value, index) => {\n                        typedArray[index] = value;\n                    });\n                    return typedArray;\n                }\n            });\n        }\n\n        if (accessor.sparse) {\n            const sparse = accessor.sparse;\n            accessor._data = accessor._data.then((data) => {\n                const typedArray = data as TypedArrayLike;\n                const indicesBufferView = ArrayItem.Get(`${context}/sparse/indices/bufferView`, this._gltf.bufferViews, sparse.indices.bufferView);\n                const valuesBufferView = ArrayItem.Get(`${context}/sparse/values/bufferView`, this._gltf.bufferViews, sparse.values.bufferView);\n                return Promise.all([\n                    this.loadBufferViewAsync(`/bufferViews/${indicesBufferView.index}`, indicesBufferView),\n                    this.loadBufferViewAsync(`/bufferViews/${valuesBufferView.index}`, valuesBufferView)\n                ]).then(([indicesData, valuesData]) => {\n                    const indices = GLTFLoader._GetTypedArray(`${context}/sparse/indices`, sparse.indices.componentType, indicesData, sparse.indices.byteOffset, sparse.count) as IndicesArray;\n\n                    const sparseLength = numComponents * sparse.count;\n                    let values: TypedArrayLike;\n\n                    if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized) {\n                        values = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\n                    }\n                    else {\n                        const sparseData = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\n                        values = new constructor(sparseLength);\n                        VertexBuffer.ForEach(sparseData, 0, byteStride, numComponents, accessor.componentType, values.length, accessor.normalized || false, (value, index) => {\n                            values[index] = value;\n                        });\n                    }\n\n                    let valuesIndex = 0;\n                    for (let indicesIndex = 0; indicesIndex < indices.length; indicesIndex++) {\n                        let dataIndex = indices[indicesIndex] * numComponents;\n                        for (let componentIndex = 0; componentIndex < numComponents; componentIndex++) {\n                            typedArray[dataIndex++] = values[valuesIndex++];\n                        }\n                    }\n\n                    return typedArray;\n                });\n            });\n        }\n\n        return accessor._data;\n    }\n\n    private _loadFloatAccessorAsync(context: string, accessor: IAccessor): Promise<Float32Array> {\n        return this._loadAccessorAsync(context, accessor, Float32Array) as Promise<Float32Array>;\n    }\n\n    private _loadIndicesAccessorAsync(context: string, accessor: IAccessor): Promise<IndicesArray> {\n        if (accessor.type !== AccessorType.SCALAR) {\n            throw new Error(`${context}/type: Invalid value ${accessor.type}`);\n        }\n\n        if (accessor.componentType !== AccessorComponentType.UNSIGNED_BYTE &&\n            accessor.componentType !== AccessorComponentType.UNSIGNED_SHORT &&\n            accessor.componentType !== AccessorComponentType.UNSIGNED_INT) {\n            throw new Error(`${context}/componentType: Invalid value ${accessor.componentType}`);\n        }\n\n        if (accessor._data) {\n            return accessor._data as Promise<IndicesArray>;\n        }\n\n        if (accessor.sparse) {\n            const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, accessor.componentType);\n            accessor._data = this._loadAccessorAsync(context, accessor, constructor);\n        }\n        else {\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\n                return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, accessor.count);\n            });\n        }\n\n        return accessor._data as Promise<IndicesArray>;\n    }\n\n    private _loadVertexBufferViewAsync(bufferView: IBufferView, kind: string): Promise<Buffer> {\n        if (bufferView._babylonBuffer) {\n            return bufferView._babylonBuffer;\n        }\n\n        bufferView._babylonBuffer = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\n            return new Buffer(this._babylonScene.getEngine(), data, false);\n        });\n\n        return bufferView._babylonBuffer;\n    }\n\n    private _loadVertexAccessorAsync(context: string, accessor: IAccessor, kind: string): Promise<VertexBuffer> {\n        if (accessor._babylonVertexBuffer) {\n            return accessor._babylonVertexBuffer;\n        }\n\n        if (accessor.sparse) {\n            accessor._babylonVertexBuffer = this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\n                return new VertexBuffer(this._babylonScene.getEngine(), data, kind, false);\n            });\n        }\n        // HACK: If byte offset is not a multiple of component type byte length then load as a float array instead of using Babylon buffers.\n        else if (accessor.byteOffset && accessor.byteOffset % VertexBuffer.GetTypeByteLength(accessor.componentType) !== 0) {\n            Logger.Warn(\"Accessor byte offset is not a multiple of component type byte length\");\n            accessor._babylonVertexBuffer = this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\n                return new VertexBuffer(this._babylonScene.getEngine(), data, kind, false);\n            });\n        }\n        // Load joint indices as a float array since the shaders expect float data but glTF uses unsigned byte/short.\n        // This prevents certain platforms (e.g. D3D) from having to convert the data to float on the fly.\n        else if (kind === VertexBuffer.MatricesIndicesKind || kind === VertexBuffer.MatricesIndicesExtraKind) {\n            accessor._babylonVertexBuffer = this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\n                return new VertexBuffer(this._babylonScene.getEngine(), data, kind, false);\n            });\n        }\n        else {\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\n            accessor._babylonVertexBuffer = this._loadVertexBufferViewAsync(bufferView, kind).then((babylonBuffer) => {\n                const size = GLTFLoader._GetNumComponents(context, accessor.type);\n                return new VertexBuffer(this._babylonScene.getEngine(), babylonBuffer, kind, false, false, bufferView.byteStride,\n                    false, accessor.byteOffset, size, accessor.componentType, accessor.normalized, true);\n            });\n        }\n\n        return accessor._babylonVertexBuffer;\n    }\n\n    private _loadMaterialMetallicRoughnessPropertiesAsync(context: string, properties: IMaterialPbrMetallicRoughness, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        if (properties) {\n            if (properties.baseColorFactor) {\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\n                babylonMaterial.alpha = properties.baseColorFactor[3];\n            }\n            else {\n                babylonMaterial.albedoColor = Color3.White();\n            }\n\n            babylonMaterial.metallic = properties.metallicFactor == undefined ? 1 : properties.metallicFactor;\n            babylonMaterial.roughness = properties.roughnessFactor == undefined ? 1 : properties.roughnessFactor;\n\n            if (properties.baseColorTexture) {\n                promises.push(this.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\n                    texture.name = `${babylonMaterial.name} (Base Color)`;\n                    babylonMaterial.albedoTexture = texture;\n                }));\n            }\n\n            if (properties.metallicRoughnessTexture) {\n                promises.push(this.loadTextureInfoAsync(`${context}/metallicRoughnessTexture`, properties.metallicRoughnessTexture, (texture) => {\n                    texture.name = `${babylonMaterial.name} (Metallic Roughness)`;\n                    babylonMaterial.metallicTexture = texture;\n                }));\n\n                babylonMaterial.useMetallnessFromMetallicTextureBlue = true;\n                babylonMaterial.useRoughnessFromMetallicTextureGreen = true;\n                babylonMaterial.useRoughnessFromMetallicTextureAlpha = false;\n            }\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    /** @hidden */\n    public _loadMaterialAsync(context: string, material: IMaterial, babylonMesh: Mesh, babylonDrawMode: number, assign: (babylonMaterial: Material) => void = () => { }): Promise<Material> {\n        const extensionPromise = this._extensionsLoadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        material._data = material._data || {};\n        let babylonData = material._data[babylonDrawMode];\n        if (!babylonData) {\n            this.logOpen(`${context} ${material.name || \"\"}`);\n\n            const babylonMaterial = this.createMaterial(context, material, babylonDrawMode);\n\n            babylonData = {\n                babylonMaterial: babylonMaterial,\n                babylonMeshes: [],\n                promise: this.loadMaterialPropertiesAsync(context, material, babylonMaterial)\n            };\n\n            material._data[babylonDrawMode] = babylonData;\n\n            GLTFLoader.AddPointerMetadata(babylonMaterial, context);\n            this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\n\n            this.logClose();\n        }\n\n        babylonData.babylonMeshes.push(babylonMesh);\n\n        babylonMesh.onDisposeObservable.addOnce(() => {\n            const index = babylonData.babylonMeshes.indexOf(babylonMesh);\n            if (index !== -1) {\n                babylonData.babylonMeshes.splice(index, 1);\n            }\n        });\n\n        assign(babylonData.babylonMaterial);\n\n        return babylonData.promise.then(() => {\n            return babylonData.babylonMaterial;\n        });\n    }\n\n    private _createDefaultMaterial(name: string, babylonDrawMode: number): Material {\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        const babylonMaterial = new PBRMaterial(name, this._babylonScene);\n        this._babylonScene._blockEntityCollection = false;\n        // Moved to mesh so user can change materials on gltf meshes: babylonMaterial.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n        babylonMaterial.fillMode = babylonDrawMode;\n        babylonMaterial.enableSpecularAntiAliasing = true;\n        babylonMaterial.useRadianceOverAlpha = !this._parent.transparencyAsCoverage;\n        babylonMaterial.useSpecularOverAlpha = !this._parent.transparencyAsCoverage;\n        babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\n        babylonMaterial.metallic = 1;\n        babylonMaterial.roughness = 1;\n        return babylonMaterial;\n    }\n\n    /**\n     * Creates a Babylon material from a glTF material.\n     * @param context The context when loading the asset\n     * @param material The glTF material property\n     * @param babylonDrawMode The draw mode for the Babylon material\n     * @returns The Babylon material\n     */\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Material {\n        const extensionPromise = this._extensionsCreateMaterial(context, material, babylonDrawMode);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const name = material.name || `material${material.index}`;\n        const babylonMaterial = this._createDefaultMaterial(name, babylonDrawMode);\n\n        return babylonMaterial;\n    }\n\n    /**\n     * Loads properties from a glTF material into a Babylon material.\n     * @param context The context when loading the asset\n     * @param material The glTF material property\n     * @param babylonMaterial The Babylon material\n     * @returns A promise that resolves when the load is complete\n     */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\n        const extensionPromise = this._extensionsLoadMaterialPropertiesAsync(context, material, babylonMaterial);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        promises.push(this.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n\n        if (material.pbrMetallicRoughness) {\n            promises.push(this._loadMaterialMetallicRoughnessPropertiesAsync(`${context}/pbrMetallicRoughness`, material.pbrMetallicRoughness, babylonMaterial));\n        }\n\n        this.loadMaterialAlphaProperties(context, material, babylonMaterial);\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    /**\n     * Loads the normal, occlusion, and emissive properties from a glTF material into a Babylon material.\n     * @param context The context when loading the asset\n     * @param material The glTF material property\n     * @param babylonMaterial The Babylon material\n     * @returns A promise that resolves when the load is complete\n     */\n    public loadMaterialBasePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        babylonMaterial.emissiveColor = material.emissiveFactor ? Color3.FromArray(material.emissiveFactor) : new Color3(0, 0, 0);\n        if (material.doubleSided) {\n            babylonMaterial.backFaceCulling = false;\n            babylonMaterial.twoSidedLighting = true;\n        }\n\n        if (material.normalTexture) {\n            promises.push(this.loadTextureInfoAsync(`${context}/normalTexture`, material.normalTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Normal)`;\n                babylonMaterial.bumpTexture = texture;\n            }));\n\n            babylonMaterial.invertNormalMapX = !this._babylonScene.useRightHandedSystem;\n            babylonMaterial.invertNormalMapY = this._babylonScene.useRightHandedSystem;\n            if (material.normalTexture.scale != undefined) {\n                babylonMaterial.bumpTexture.level = material.normalTexture.scale;\n            }\n\n            babylonMaterial.forceIrradianceInFragment = true;\n        }\n\n        if (material.occlusionTexture) {\n            promises.push(this.loadTextureInfoAsync(`${context}/occlusionTexture`, material.occlusionTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Occlusion)`;\n                babylonMaterial.ambientTexture = texture;\n            }));\n\n            babylonMaterial.useAmbientInGrayScale = true;\n            if (material.occlusionTexture.strength != undefined) {\n                babylonMaterial.ambientTextureStrength = material.occlusionTexture.strength;\n            }\n        }\n\n        if (material.emissiveTexture) {\n            promises.push(this.loadTextureInfoAsync(`${context}/emissiveTexture`, material.emissiveTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Emissive)`;\n                babylonMaterial.emissiveTexture = texture;\n            }));\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n\n    /**\n     * Loads the alpha properties from a glTF material into a Babylon material.\n     * Must be called after the setting the albedo texture of the Babylon material when the material has an albedo texture.\n     * @param context The context when loading the asset\n     * @param material The glTF material property\n     * @param babylonMaterial The Babylon material\n     */\n    public loadMaterialAlphaProperties(context: string, material: IMaterial, babylonMaterial: Material): void {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const alphaMode = material.alphaMode || MaterialAlphaMode.OPAQUE;\n        switch (alphaMode) {\n            case MaterialAlphaMode.OPAQUE: {\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\n                break;\n            }\n            case MaterialAlphaMode.MASK: {\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHATEST;\n                babylonMaterial.alphaCutOff = (material.alphaCutoff == undefined ? 0.5 : material.alphaCutoff);\n                if (babylonMaterial.albedoTexture) {\n                    babylonMaterial.albedoTexture.hasAlpha = true;\n                }\n                break;\n            }\n            case MaterialAlphaMode.BLEND: {\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHABLEND;\n                if (babylonMaterial.albedoTexture) {\n                    babylonMaterial.albedoTexture.hasAlpha = true;\n                    babylonMaterial.useAlphaFromAlbedoTexture = true;\n                }\n                break;\n            }\n            default: {\n                throw new Error(`${context}/alphaMode: Invalid value (${material.alphaMode})`);\n            }\n        }\n    }\n\n    /**\n     * Loads a glTF texture info.\n     * @param context The context when loading the asset\n     * @param textureInfo The glTF texture info property\n     * @param assign A function called synchronously after parsing the glTF properties\n     * @returns A promise that resolves with the loaded Babylon texture when the load is complete\n     */\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void = () => { }): Promise<BaseTexture> {\n        const extensionPromise = this._extensionsLoadTextureInfoAsync(context, textureInfo, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        this.logOpen(`${context}`);\n\n        if (textureInfo.texCoord! >= 2) {\n            throw new Error(`${context}/texCoord: Invalid value (${textureInfo.texCoord})`);\n        }\n\n        const texture = ArrayItem.Get(`${context}/index`, this._gltf.textures, textureInfo.index);\n        const promise = this._loadTextureAsync(`/textures/${textureInfo.index}`, texture, (babylonTexture) => {\n            babylonTexture.coordinatesIndex = textureInfo.texCoord || 0;\n            GLTFLoader.AddPointerMetadata(babylonTexture, context);\n            this._parent.onTextureLoadedObservable.notifyObservers(babylonTexture);\n            assign(babylonTexture);\n        });\n\n        this.logClose();\n\n        return promise;\n    }\n\n    /** @hidden */\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void = () => { }): Promise<BaseTexture> {\n        const extensionPromise = this._extensionsLoadTextureAsync(context, texture, assign);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        this.logOpen(`${context} ${texture.name || \"\"}`);\n\n        const sampler = (texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._gltf.samplers, texture.sampler));\n        const image = ArrayItem.Get(`${context}/source`, this._gltf.images, texture.source);\n        const promise = this._createTextureAsync(context, sampler, image, assign);\n\n        this.logClose();\n\n        return promise;\n    }\n\n    /** @hidden */\n    public _createTextureAsync(context: string, sampler: ISampler, image: IImage, assign: (babylonTexture: BaseTexture) => void = () => { }): Promise<BaseTexture> {\n        const samplerData = this._loadSampler(`/samplers/${sampler.index}`, sampler);\n\n        const promises = new Array<Promise<any>>();\n\n        const deferred = new Deferred<void>();\n        this._babylonScene._blockEntityCollection = this._forAssetContainer;\n        const babylonTexture = new Texture(null, this._babylonScene, samplerData.noMipMaps, false, samplerData.samplingMode, () => {\n            if (!this._disposed) {\n                deferred.resolve();\n            }\n        }, (message, exception) => {\n            if (!this._disposed) {\n                deferred.reject(new Error(`${context}: ${(exception && exception.message) ? exception.message : message || \"Failed to load texture\"}`));\n            }\n        }, undefined, undefined, undefined, image.mimeType);\n        this._babylonScene._blockEntityCollection = false;\n        promises.push(deferred.promise);\n\n        promises.push(this.loadImageAsync(`/images/${image.index}`, image).then((data) => {\n            const name = image.uri || `${this._fileName}#image${image.index}`;\n            const dataUrl = `data:${this._uniqueRootUrl}${name}`;\n            babylonTexture.updateURL(dataUrl, data);\n        }));\n\n        babylonTexture.wrapU = samplerData.wrapU;\n        babylonTexture.wrapV = samplerData.wrapV;\n        assign(babylonTexture);\n\n        return Promise.all(promises).then(() => {\n            return babylonTexture;\n        });\n    }\n\n    private _loadSampler(context: string, sampler: ISampler): _ISamplerData {\n        if (!sampler._data) {\n            sampler._data = {\n                noMipMaps: (sampler.minFilter === TextureMinFilter.NEAREST || sampler.minFilter === TextureMinFilter.LINEAR),\n                samplingMode: GLTFLoader._GetTextureSamplingMode(context, sampler),\n                wrapU: GLTFLoader._GetTextureWrapMode(`${context}/wrapS`, sampler.wrapS),\n                wrapV: GLTFLoader._GetTextureWrapMode(`${context}/wrapT`, sampler.wrapT)\n            };\n        }\n\n        return sampler._data;\n    }\n\n    /**\n     * Loads a glTF image.\n     * @param context The context when loading the asset\n     * @param image The glTF image property\n     * @returns A promise that resolves with the loaded data when the load is complete\n     */\n    public loadImageAsync(context: string, image: IImage): Promise<ArrayBufferView> {\n        if (!image._data) {\n            this.logOpen(`${context} ${image.name || \"\"}`);\n\n            if (image.uri) {\n                image._data = this.loadUriAsync(`${context}/uri`, image, image.uri);\n            }\n            else {\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, image.bufferView);\n                image._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\n            }\n\n            this.logClose();\n        }\n\n        return image._data;\n    }\n\n    /**\n     * Loads a glTF uri.\n     * @param context The context when loading the asset\n     * @param property The glTF property associated with the uri\n     * @param uri The base64 or relative uri\n     * @returns A promise that resolves with the loaded data when the load is complete\n     */\n    public loadUriAsync(context: string, property: IProperty, uri: string): Promise<ArrayBufferView> {\n        const extensionPromise = this._extensionsLoadUriAsync(context, property, uri);\n        if (extensionPromise) {\n            return extensionPromise;\n        }\n\n        if (!GLTFLoader._ValidateUri(uri)) {\n            throw new Error(`${context}: '${uri}' is invalid`);\n        }\n\n        if (Tools.IsBase64(uri)) {\n            const data = new Uint8Array(Tools.DecodeBase64(uri));\n            this.log(`Decoded ${uri.substr(0, 64)}... (${data.length} bytes)`);\n            return Promise.resolve(data);\n        }\n\n        this.log(`Loading ${uri}`);\n\n        return this._parent.preprocessUrlAsync(this._rootUrl + uri).then((url) => {\n            return new Promise<ArrayBufferView>((resolve, reject) => {\n                if (!this._disposed) {\n                    const request = Tools.LoadFile(url, (fileData) => {\n                        if (!this._disposed) {\n                            const data = new Uint8Array(fileData as ArrayBuffer);\n                            this.log(`Loaded ${uri} (${data.length} bytes)`);\n                            resolve(data);\n                        }\n                    }, (event) => {\n                        if (!this._disposed) {\n                            if (request) {\n                                request._lengthComputable = event.lengthComputable;\n                                request._loaded = event.loaded;\n                                request._total = event.total;\n                            }\n\n                            if (this._state === GLTFLoaderState.LOADING) {\n                                try {\n                                    this._onProgress();\n                                }\n                                catch (e) {\n                                    reject(e);\n                                }\n                            }\n                        }\n                    }, this._babylonScene.offlineProvider, true, (request, exception) => {\n                        if (!this._disposed) {\n                            reject(new LoadFileError(`${context}: Failed to load '${uri}'${request ? \": \" + request.status + \" \" + request.statusText : \"\"}`, request));\n                        }\n                    }) as IFileRequestInfo;\n\n                    this._requests.push(request);\n                }\n            });\n        });\n    }\n\n    private _onProgress(): void {\n        if (!this._progressCallback) {\n            return;\n        }\n\n        let lengthComputable = true;\n        let loaded = 0;\n        let total = 0;\n        for (let request of this._requests) {\n            if (request._lengthComputable === undefined || request._loaded === undefined || request._total === undefined) {\n                return;\n            }\n\n            lengthComputable = lengthComputable && request._lengthComputable;\n            loaded += request._loaded;\n            total += request._total;\n        }\n\n        this._progressCallback(new SceneLoaderProgressEvent(lengthComputable, loaded, lengthComputable ? total : 0));\n    }\n\n    /**\n     * Adds a JSON pointer to the metadata of the Babylon object at `<object>.metadata.gltf.pointers`.\n     * @param babylonObject the Babylon object with metadata\n     * @param pointer the JSON pointer\n     */\n    public static AddPointerMetadata(babylonObject: { metadata: any }, pointer: string): void {\n        const metadata = (babylonObject.metadata = babylonObject.metadata || {});\n        const gltf = (metadata.gltf = metadata.gltf || {});\n        const pointers = (gltf.pointers = gltf.pointers || []);\n        pointers.push(pointer);\n    }\n\n    private static _GetTextureWrapMode(context: string, mode: TextureWrapMode | undefined): number {\n        // Set defaults if undefined\n        mode = mode == undefined ? TextureWrapMode.REPEAT : mode;\n\n        switch (mode) {\n            case TextureWrapMode.CLAMP_TO_EDGE: return Texture.CLAMP_ADDRESSMODE;\n            case TextureWrapMode.MIRRORED_REPEAT: return Texture.MIRROR_ADDRESSMODE;\n            case TextureWrapMode.REPEAT: return Texture.WRAP_ADDRESSMODE;\n            default:\n                Logger.Warn(`${context}: Invalid value (${mode})`);\n                return Texture.WRAP_ADDRESSMODE;\n        }\n    }\n\n    private static _GetTextureSamplingMode(context: string, sampler: ISampler): number {\n        // Set defaults if undefined\n        const magFilter = sampler.magFilter == undefined ? TextureMagFilter.LINEAR : sampler.magFilter;\n        const minFilter = sampler.minFilter == undefined ? TextureMinFilter.LINEAR_MIPMAP_LINEAR : sampler.minFilter;\n\n        if (magFilter === TextureMagFilter.LINEAR) {\n            switch (minFilter) {\n                case TextureMinFilter.NEAREST: return Texture.LINEAR_NEAREST;\n                case TextureMinFilter.LINEAR: return Texture.LINEAR_LINEAR;\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST: return Texture.LINEAR_NEAREST_MIPNEAREST;\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST: return Texture.LINEAR_LINEAR_MIPNEAREST;\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR: return Texture.LINEAR_NEAREST_MIPLINEAR;\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR: return Texture.LINEAR_LINEAR_MIPLINEAR;\n                default:\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\n            }\n        }\n        else {\n            if (magFilter !== TextureMagFilter.NEAREST) {\n                Logger.Warn(`${context}/magFilter: Invalid value (${magFilter})`);\n            }\n\n            switch (minFilter) {\n                case TextureMinFilter.NEAREST: return Texture.NEAREST_NEAREST;\n                case TextureMinFilter.LINEAR: return Texture.NEAREST_LINEAR;\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST: return Texture.NEAREST_NEAREST_MIPNEAREST;\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST: return Texture.NEAREST_LINEAR_MIPNEAREST;\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR: return Texture.NEAREST_NEAREST_MIPLINEAR;\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR: return Texture.NEAREST_LINEAR_MIPLINEAR;\n                default:\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\n            }\n        }\n    }\n\n    private static _GetTypedArrayConstructor(context: string, componentType: AccessorComponentType): TypedArrayConstructor {\n        switch (componentType) {\n            case AccessorComponentType.BYTE: return Int8Array;\n            case AccessorComponentType.UNSIGNED_BYTE: return Uint8Array;\n            case AccessorComponentType.SHORT: return Int16Array;\n            case AccessorComponentType.UNSIGNED_SHORT: return Uint16Array;\n            case AccessorComponentType.UNSIGNED_INT: return Uint32Array;\n            case AccessorComponentType.FLOAT: return Float32Array;\n            default: throw new Error(`${context}: Invalid component type ${componentType}`);\n        }\n}\n\n    private static _GetTypedArray(context: string, componentType: AccessorComponentType, bufferView: ArrayBufferView, byteOffset: number | undefined, length: number): TypedArrayLike {\n        const buffer = bufferView.buffer;\n        byteOffset = bufferView.byteOffset + (byteOffset || 0);\n\n        const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, componentType);\n\n        try {\n            return new constructor(buffer, byteOffset, length);\n        }\n        catch (e) {\n            throw new Error(`${context}: ${e}`);\n        }\n    }\n\n    private static _GetNumComponents(context: string, type: string): number {\n        switch (type) {\n            case \"SCALAR\": return 1;\n            case \"VEC2\": return 2;\n            case \"VEC3\": return 3;\n            case \"VEC4\": return 4;\n            case \"MAT2\": return 4;\n            case \"MAT3\": return 9;\n            case \"MAT4\": return 16;\n        }\n\n        throw new Error(`${context}: Invalid type (${type})`);\n    }\n\n    private static _ValidateUri(uri: string): boolean {\n        return (Tools.IsBase64(uri) || uri.indexOf(\"..\") === -1);\n    }\n\n    private static _GetDrawMode(context: string, mode: number | undefined): number {\n        if (mode == undefined) {\n            mode = MeshPrimitiveMode.TRIANGLES;\n        }\n\n        switch (mode) {\n            case MeshPrimitiveMode.POINTS: return Material.PointListDrawMode;\n            case MeshPrimitiveMode.LINES: return Material.LineListDrawMode;\n            case MeshPrimitiveMode.LINE_LOOP: return Material.LineLoopDrawMode;\n            case MeshPrimitiveMode.LINE_STRIP: return Material.LineStripDrawMode;\n            case MeshPrimitiveMode.TRIANGLES: return Material.TriangleFillMode;\n            case MeshPrimitiveMode.TRIANGLE_STRIP: return Material.TriangleStripDrawMode;\n            case MeshPrimitiveMode.TRIANGLE_FAN: return Material.TriangleFanDrawMode;\n        }\n\n        throw new Error(`${context}: Invalid mesh primitive mode (${mode})`);\n    }\n\n    private _compileMaterialsAsync(): Promise<void> {\n        this._parent._startPerformanceCounter(\"Compile materials\");\n\n        const promises = new Array<Promise<any>>();\n\n        if (this._gltf.materials) {\n            for (const material of this._gltf.materials) {\n                if (material._data) {\n                    for (const babylonDrawMode in material._data) {\n                        const babylonData = material._data[babylonDrawMode];\n                        for (const babylonMesh of babylonData.babylonMeshes) {\n                            // Ensure nonUniformScaling is set if necessary.\n                            babylonMesh.computeWorldMatrix(true);\n\n                            const babylonMaterial = babylonData.babylonMaterial;\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh));\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { useInstances: true }));\n                            if (this._parent.useClipPlane) {\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true }));\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true, useInstances: true }));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return Promise.all(promises).then(() => {\n            this._parent._endPerformanceCounter(\"Compile materials\");\n        });\n    }\n\n    private _compileShadowGeneratorsAsync(): Promise<void> {\n        this._parent._startPerformanceCounter(\"Compile shadow generators\");\n\n        const promises = new Array<Promise<any>>();\n\n        const lights = this._babylonScene.lights;\n        for (let light of lights) {\n            let generator = light.getShadowGenerator();\n            if (generator) {\n                promises.push(generator.forceCompilationAsync());\n            }\n        }\n\n        return Promise.all(promises).then(() => {\n            this._parent._endPerformanceCounter(\"Compile shadow generators\");\n        });\n    }\n\n    private _forEachExtensions(action: (extension: IGLTFLoaderExtension) => void): void {\n        for (const extension of this._extensions) {\n            if (extension.enabled) {\n                action(extension);\n            }\n        }\n    }\n\n    private _applyExtensions<T>(property: IProperty, functionName: string, actionAsync: (extension: IGLTFLoaderExtension) => Nullable<T> | undefined): Nullable<T> {\n        for (const extension of this._extensions) {\n            if (extension.enabled) {\n                const id = `${extension.name}.${functionName}`;\n                const loaderProperty = property as ILoaderProperty;\n                loaderProperty._activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions || {};\n                const activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions;\n                if (!activeLoaderExtensionFunctions[id]) {\n                    activeLoaderExtensionFunctions[id] = true;\n\n                    try {\n                        const result = actionAsync(extension);\n                        if (result) {\n                            return result;\n                        }\n                    }\n                    finally {\n                        delete activeLoaderExtensionFunctions[id];\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private _extensionsOnLoading(): void {\n        this._forEachExtensions((extension) => extension.onLoading && extension.onLoading());\n    }\n\n    private _extensionsOnReady(): void {\n        this._forEachExtensions((extension) => extension.onReady && extension.onReady());\n    }\n\n    private _extensionsLoadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\n        return this._applyExtensions(scene, \"loadScene\", (extension) => extension.loadSceneAsync && extension.loadSceneAsync(context, scene));\n    }\n\n    private _extensionsLoadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\n        return this._applyExtensions(node, \"loadNode\", (extension) => extension.loadNodeAsync && extension.loadNodeAsync(context, node, assign));\n    }\n\n    private _extensionsLoadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\n        return this._applyExtensions(camera, \"loadCamera\", (extension) => extension.loadCameraAsync && extension.loadCameraAsync(context, camera, assign));\n    }\n\n    private _extensionsLoadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\n        return this._applyExtensions(primitive, \"loadVertexData\", (extension) => extension._loadVertexDataAsync && extension._loadVertexDataAsync(context, primitive, babylonMesh));\n    }\n\n    private _extensionsLoadMeshPrimitiveAsync(context: string, name: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, assign: (babylonMesh: AbstractMesh) => void): Nullable<Promise<AbstractMesh>> {\n        return this._applyExtensions(primitive, \"loadMeshPrimitive\", (extension) => extension._loadMeshPrimitiveAsync && extension._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign));\n    }\n\n    private _extensionsLoadMaterialAsync(context: string, material: IMaterial, babylonMesh: Mesh, babylonDrawMode: number, assign: (babylonMaterial: Material) => void): Nullable<Promise<Material>> {\n        return this._applyExtensions(material, \"loadMaterial\", (extension) => extension._loadMaterialAsync && extension._loadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign));\n    }\n\n    private _extensionsCreateMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\n        return this._applyExtensions(material, \"createMaterial\", (extension) => extension.createMaterial && extension.createMaterial(context, material, babylonDrawMode));\n    }\n\n    private _extensionsLoadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return this._applyExtensions(material, \"loadMaterialProperties\", (extension) => extension.loadMaterialPropertiesAsync && extension.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n    }\n\n    private _extensionsLoadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\n        return this._applyExtensions(textureInfo, \"loadTextureInfo\", (extension) => extension.loadTextureInfoAsync && extension.loadTextureInfoAsync(context, textureInfo, assign));\n    }\n\n    private _extensionsLoadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\n        return this._applyExtensions(texture, \"loadTexture\", (extension) => extension._loadTextureAsync && extension._loadTextureAsync(context, texture, assign));\n    }\n\n    private _extensionsLoadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\n        return this._applyExtensions(animation, \"loadAnimation\", (extension) => extension.loadAnimationAsync && extension.loadAnimationAsync(context, animation));\n    }\n\n    private _extensionsLoadSkinAsync(context: string, node: INode, skin: ISkin): Nullable<Promise<void>> {\n        return this._applyExtensions(skin, \"loadSkin\", (extension) => extension._loadSkinAsync && extension._loadSkinAsync(context, node, skin));\n    }\n\n    private _extensionsLoadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\n        return this._applyExtensions(property, \"loadUri\", (extension) => extension._loadUriAsync && extension._loadUriAsync(context, property, uri));\n    }\n\n    private _extensionsLoadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\n        return this._applyExtensions(bufferView, \"loadBufferView\", (extension) => extension.loadBufferViewAsync && extension.loadBufferViewAsync(context, bufferView));\n    }\n\n    private _extensionsLoadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\n        return this._applyExtensions(buffer, \"loadBuffer\", (extension) => extension.loadBufferAsync && extension.loadBufferAsync(context, buffer, byteOffset, byteLength));\n    }\n\n    /**\n     * Helper method called by a loader extension to load an glTF extension.\n     * @param context The context when loading the asset\n     * @param property The glTF property to load the extension from\n     * @param extensionName The name of the extension to load\n     * @param actionAsync The action to run\n     * @returns The promise returned by actionAsync or null if the extension does not exist\n     */\n    public static LoadExtensionAsync<TExtension = any, TResult = void>(context: string, property: IProperty, extensionName: string, actionAsync: (extensionContext: string, extension: TExtension) => Nullable<Promise<TResult>>): Nullable<Promise<TResult>> {\n        if (!property.extensions) {\n            return null;\n        }\n\n        const extensions = property.extensions;\n\n        const extension = extensions[extensionName] as TExtension;\n        if (!extension) {\n            return null;\n        }\n\n        return actionAsync(`${context}/extensions/${extensionName}`, extension);\n    }\n\n    /**\n     * Helper method called by a loader extension to load a glTF extra.\n     * @param context The context when loading the asset\n     * @param property The glTF property to load the extra from\n     * @param extensionName The name of the extension to load\n     * @param actionAsync The action to run\n     * @returns The promise returned by actionAsync or null if the extra does not exist\n     */\n    public static LoadExtraAsync<TExtra = any, TResult = void>(context: string, property: IProperty, extensionName: string, actionAsync: (extraContext: string, extra: TExtra) => Nullable<Promise<TResult>>): Nullable<Promise<TResult>> {\n        if (!property.extras) {\n            return null;\n        }\n\n        const extras = property.extras;\n\n        const extra = extras[extensionName] as TExtra;\n        if (!extra) {\n            return null;\n        }\n\n        return actionAsync(`${context}/extras/${extensionName}`, extra);\n    }\n\n    /**\n     * Checks for presence of an extension.\n     * @param name The name of the extension to check\n     * @returns A boolean indicating the presence of the given extension name in `extensionsUsed`\n     */\n    public isExtensionUsed(name: string): boolean {\n        return !!this._gltf.extensionsUsed && this._gltf.extensionsUsed.indexOf(name) !== -1;\n    }\n\n    /**\n     * Increments the indentation level and logs a message.\n     * @param message The message to log\n     */\n    public logOpen(message: string): void {\n        this._parent._logOpen(message);\n    }\n\n    /**\n     * Decrements the indentation level.\n     */\n    public logClose(): void {\n        this._parent._logClose();\n    }\n\n    /**\n     * Logs a message\n     * @param message The message to log\n     */\n    public log(message: string): void {\n        this._parent._log(message);\n    }\n\n    /**\n     * Starts a performance counter.\n     * @param counterName The name of the performance counter\n     */\n    public startPerformanceCounter(counterName: string): void {\n        this._parent._startPerformanceCounter(counterName);\n    }\n\n    /**\n     * Ends a performance counter.\n     * @param counterName The name of the performance counter\n     */\n    public endPerformanceCounter(counterName: string): void {\n        this._parent._endPerformanceCounter(counterName);\n    }\n}\n\nGLTFFileLoader._CreateGLTF2Loader = (parent) => new GLTFLoader(parent);\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar\";\r\nimport { SphericalHarmonics, SphericalPolynomial } from \"@babylonjs/core/Maths/sphericalPolynomial\";\r\nimport { Quaternion, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { RawCubeTexture } from \"@babylonjs/core/Materials/Textures/rawCubeTexture\";\r\n\r\nimport { IChildRootProperty } from \"babylonjs-gltf2interface\";\r\nimport { IScene } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nconst NAME = \"EXT_lights_image_based\";\r\n\r\ninterface ILightReference {\r\n    light: number;\r\n}\r\n\r\ninterface ILight extends IChildRootProperty {\r\n    intensity: number;\r\n    rotation: number[];\r\n    specularImageSize: number;\r\n    specularImages: number[][];\r\n    irradianceCoefficients: number[][];\r\n\r\n    _babylonTexture?: BaseTexture;\r\n    _loaded?: Promise<void>;\r\n}\r\n\r\ninterface ILights {\r\n    lights: ILight[];\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\r\n */\r\nexport class EXT_lights_image_based implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _lights?: ILight[];\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        delete this._loader;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as ILights;\r\n            this._lights = extension.lights;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<ILightReference>(context, scene, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\r\n            promises.push(this._loadLightAsync(`#/extensions/${this.name}/lights/${extension.light}`, light).then((texture) => {\r\n                this._loader.babylonScene.environmentTexture = texture;\r\n            }));\r\n\r\n            this._loader.logClose();\r\n\r\n            return Promise.all(promises).then(() => { });\r\n        });\r\n    }\r\n\r\n    private _loadLightAsync(context: string, light: ILight): Promise<BaseTexture> {\r\n        if (!light._loaded) {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            this._loader.logOpen(`${context}`);\r\n\r\n            const imageData = new Array<Array<ArrayBufferView>>(light.specularImages.length);\r\n            for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\r\n                const faces = light.specularImages[mipmap];\r\n                imageData[mipmap] = new Array<ArrayBufferView>(faces.length);\r\n                for (let face = 0; face < faces.length; face++) {\r\n                    const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\r\n                    this._loader.logOpen(`${specularImageContext}`);\r\n\r\n                    const index = faces[face];\r\n                    const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\r\n                    promises.push(this._loader.loadImageAsync(`#/images/${index}`, image).then((data) => {\r\n                        imageData[mipmap][face] = data;\r\n                    }));\r\n\r\n                    this._loader.logClose();\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n\r\n            light._loaded = Promise.all(promises).then(() => {\r\n                const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\r\n                light._babylonTexture = babylonTexture;\r\n\r\n                if (light.intensity != undefined) {\r\n                    babylonTexture.level = light.intensity;\r\n                }\r\n\r\n                if (light.rotation) {\r\n                    let rotation = Quaternion.FromArray(light.rotation);\r\n\r\n                    // Invert the rotation so that positive rotation is counter-clockwise.\r\n                    if (!this._loader.babylonScene.useRightHandedSystem) {\r\n                        rotation = Quaternion.Inverse(rotation);\r\n                    }\r\n\r\n                    Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\r\n                }\r\n\r\n                const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\r\n                sphericalHarmonics.scaleInPlace(light.intensity);\r\n\r\n                sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n                const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n\r\n                // Compute the lod generation scale to fit exactly to the number of levels available.\r\n                const lodGenerationScale = (imageData.length - 1) / Scalar.Log2(light.specularImageSize);\r\n                return babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\r\n            });\r\n        }\r\n\r\n        return light._loaded.then(() => {\r\n            return light._babylonTexture!;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_lights_image_based(loader));","import { DracoCompression } from \"@babylonjs/core/Meshes/Compression/dracoCompression\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { Geometry } from \"@babylonjs/core/Meshes/geometry\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\n\r\nimport { MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\r\nimport { IBufferView, IMeshPrimitive } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_draco_mesh_compression\";\r\n\r\ninterface IKHRDracoMeshCompression {\r\n    bufferView: number;\r\n    attributes: { [name: string]: number };\r\n}\r\n\r\ninterface IBufferViewDraco extends IBufferView {\r\n    _dracoBabylonGeometry?: Promise<Geometry>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression)\r\n */\r\nexport class KHR_draco_mesh_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * The draco compression used to decode vertex data or DracoCompression.Default if not defined\r\n     */\r\n    public dracoCompression?: DracoCompression;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = DracoCompression.DecoderAvailable && this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose(): void {\r\n        delete this.dracoCompression;\r\n        delete this._loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRDracoMeshCompression, Geometry>(context, primitive, this.name, (extensionContext, extension) => {\r\n            if (primitive.mode != undefined) {\r\n                if (primitive.mode !== MeshPrimitiveMode.TRIANGLE_STRIP &&\r\n                    primitive.mode !== MeshPrimitiveMode.TRIANGLES) {\r\n                    throw new Error(`${context}: Unsupported mode ${primitive.mode}`);\r\n                }\r\n\r\n                // TODO: handle triangle strips\r\n                if (primitive.mode === MeshPrimitiveMode.TRIANGLE_STRIP) {\r\n                    throw new Error(`${context}: Mode ${primitive.mode} is not currently supported`);\r\n                }\r\n            }\r\n\r\n            const attributes: { [kind: string]: number } = {};\r\n            const loadAttribute = (name: string, kind: string) => {\r\n                const uniqueId = extension.attributes[name];\r\n                if (uniqueId == undefined) {\r\n                    return;\r\n                }\r\n\r\n                babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n                if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                    babylonMesh._delayInfo.push(kind);\r\n                }\r\n\r\n                attributes[kind] = uniqueId;\r\n            };\r\n\r\n            loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n            loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n            loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n            loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n            loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n            loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n            loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n            loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind);\r\n\r\n            var bufferView = ArrayItem.Get(extensionContext, this._loader.gltf.bufferViews, extension.bufferView) as IBufferViewDraco;\r\n            if (!bufferView._dracoBabylonGeometry) {\r\n                bufferView._dracoBabylonGeometry = this._loader.loadBufferViewAsync(`#/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                    const dracoCompression = this.dracoCompression || DracoCompression.Default;\r\n                    return dracoCompression.decodeMeshAsync(data, attributes).then((babylonVertexData) => {\r\n                        const babylonGeometry = new Geometry(babylonMesh.name, this._loader.babylonScene);\r\n                        babylonVertexData.applyToGeometry(babylonGeometry);\r\n                        return babylonGeometry;\r\n                    }).catch((error) => {\r\n                        throw new Error(`${context}: ${error.message}`);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return bufferView._dracoBabylonGeometry;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_draco_mesh_compression(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\nimport { PointLight } from \"@babylonjs/core/Lights/pointLight\";\nimport { SpotLight } from \"@babylonjs/core/Lights/spotLight\";\nimport { Light } from \"@babylonjs/core/Lights/light\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\n\nimport { IChildRootProperty } from \"babylonjs-gltf2interface\";\nimport { INode } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\n\nconst NAME = \"KHR_lights_punctual\";\n\nenum LightType {\n    DIRECTIONAL = \"directional\",\n    POINT = \"point\",\n    SPOT = \"spot\"\n}\n\ninterface ILightReference {\n    light: number;\n}\n\ninterface ILight extends IChildRootProperty {\n    type: LightType;\n    color?: number[];\n    intensity?: number;\n    range?: number;\n    spot?: {\n        innerConeAngle?: number;\n        outerConeAngle?: number;\n    };\n}\n\ninterface ILights {\n    lights: ILight[];\n}\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual)\n */\nexport class KHR_lights implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n    private _lights?: ILight[];\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n        delete this._lights;\n    }\n\n    /** @hidden */\n    public onLoading(): void {\n        const extensions = this._loader.gltf.extensions;\n        if (extensions && extensions[this.name]) {\n            const extension = extensions[this.name] as ILights;\n            this._lights = extension.lights;\n        }\n    }\n\n    /** @hidden */\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\n        return GLTFLoader.LoadExtensionAsync<ILightReference, TransformNode>(context, node, this.name, (extensionContext, extension) => {\n            return this._loader.loadNodeAsync(context, node, (babylonMesh) => {\n                let babylonLight: Light;\n\n                const light = ArrayItem.Get(extensionContext, this._lights, extension.light);\n                const name = light.name || babylonMesh.name;\n\n                this._loader.babylonScene._blockEntityCollection = this._loader._forAssetContainer;\n\n                switch (light.type) {\n                    case LightType.DIRECTIONAL: {\n                        babylonLight = new DirectionalLight(name, Vector3.Backward(), this._loader.babylonScene);\n                        break;\n                    }\n                    case LightType.POINT: {\n                        babylonLight = new PointLight(name, Vector3.Zero(), this._loader.babylonScene);\n                        break;\n                    }\n                    case LightType.SPOT: {\n                        const babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\n                        babylonSpotLight.angle = ((light.spot && light.spot.outerConeAngle) || Math.PI / 4) * 2;\n                        babylonSpotLight.innerAngle = ((light.spot && light.spot.innerConeAngle) || 0) * 2;\n                        babylonLight = babylonSpotLight;\n                        break;\n                    }\n                    default: {\n                        this._loader.babylonScene._blockEntityCollection = false;\n                        throw new Error(`${extensionContext}: Invalid light type (${light.type})`);\n                    }\n                }\n\n                this._loader.babylonScene._blockEntityCollection = false;\n                babylonLight.falloffType = Light.FALLOFF_GLTF;\n                babylonLight.diffuse = light.color ? Color3.FromArray(light.color) : Color3.White();\n                babylonLight.intensity = light.intensity == undefined ? 1 : light.intensity;\n                babylonLight.range = light.range == undefined ? Number.MAX_VALUE : light.range;\n                babylonLight.parent = babylonMesh;\n\n                this._loader._babylonLights.push(babylonLight);\n\n                GLTFLoader.AddPointerMetadata(babylonLight, extensionContext);\n\n                assign(babylonMesh);\n            });\n        });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_lights(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\n\nimport { ITextureInfo, IMaterial } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader } from \"../glTFLoader\";\n\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\n\ninterface IKHRMaterialsPbrSpecularGlossiness {\n    diffuseFactor: number[];\n    diffuseTexture: ITextureInfo;\n    specularFactor: number[];\n    glossinessFactor: number;\n    specularGlossinessTexture: ITextureInfo;\n}\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness)\n */\nexport class KHR_materials_pbrSpecularGlossiness implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 200;\n\n    private _loader: GLTFLoader;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n    }\n\n    /** @hidden */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsPbrSpecularGlossiness>(context, material, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\n            this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    private _loadSpecularGlossinessPropertiesAsync(context: string, material: IMaterial, properties: IKHRMaterialsPbrSpecularGlossiness, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        babylonMaterial.metallic = null;\n        babylonMaterial.roughness = null;\n\n        if (properties.diffuseFactor) {\n            babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\n            babylonMaterial.alpha = properties.diffuseFactor[3];\n        }\n        else {\n            babylonMaterial.albedoColor = Color3.White();\n        }\n\n        babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\n        babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\n\n        if (properties.diffuseTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Diffuse)`;\n                babylonMaterial.albedoTexture = texture;\n            }));\n        }\n\n        if (properties.specularGlossinessTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\n                babylonMaterial.reflectivityTexture = texture;\n            }));\n\n            babylonMaterial.reflectivityTexture.hasAlpha = true;\n            babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\n\r\nimport { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit)\r\n */\r\nexport class KHR_materials_unlit implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 210;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        delete this._loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, () => {\r\n            return this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\r\n        });\r\n    }\r\n\r\n    private _loadUnlitPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n        babylonMaterial.unlit = true;\r\n\r\n        const properties = material.pbrMetallicRoughness;\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\r\n                babylonMaterial.alpha = properties.baseColorFactor[3];\r\n            }\r\n            else {\r\n                babylonMaterial.albedoColor = Color3.White();\r\n            }\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(this._loader.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                    babylonMaterial.albedoTexture = texture;\r\n                }));\r\n            }\r\n        }\r\n\r\n        if (material.doubleSided) {\r\n            babylonMaterial.backFaceCulling = false;\r\n            babylonMaterial.twoSidedLighting = true;\r\n        }\r\n\r\n        this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => { });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_unlit(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\n\nimport { ITextureInfo, IMaterial } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { IMaterialNormalTextureInfo } from 'babylonjs-gltf2interface';\n\nconst NAME = \"KHR_materials_clearcoat\";\n\ninterface IKHR_materials_clearcoat {\n    clearcoatFactor: number;\n    clearcoatTexture: ITextureInfo;\n    clearcoatRoughnessFactor: number;\n    clearcoatRoughnessTexture: ITextureInfo;\n    clearcoatNormalTexture: IMaterialNormalTextureInfo;\n}\n\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1677)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\n * !!! Experimental Extension Subject to Changes !!!\n */\nexport class KHR_materials_clearcoat implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 190;\n\n    private _loader: GLTFLoader;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n    }\n\n    /** @hidden */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IKHR_materials_clearcoat>(context, material, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    private _loadClearCoatPropertiesAsync(context: string, properties: IKHR_materials_clearcoat, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        babylonMaterial.clearCoat.isEnabled = true;\n\n        if (properties.clearcoatFactor != undefined) {\n            babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\n        }\n        else {\n            babylonMaterial.clearCoat.intensity = 0;\n        }\n\n        if (properties.clearcoatTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Intensity)`;\n                babylonMaterial.clearCoat.texture = texture;\n            }));\n        }\n\n        if (properties.clearcoatRoughnessFactor != undefined) {\n            babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\n        }\n        else {\n            babylonMaterial.clearCoat.roughness = 0;\n        }\n\n        if (properties.clearcoatRoughnessTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\n                babylonMaterial.clearCoat.texture = texture;\n            }));\n        }\n\n        if (properties.clearcoatNormalTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\n                babylonMaterial.clearCoat.bumpTexture = texture;\n            }));\n\n            babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\n            babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\n            if (properties.clearcoatNormalTexture.scale != undefined) {\n                babylonMaterial.clearCoat.bumpTexture!.level = properties.clearcoatNormalTexture.scale;\n            }\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_clearcoat(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\n\nimport { ITextureInfo, IMaterial } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\n\nconst NAME = \"KHR_materials_sheen\";\n\ninterface IKHR_materials_sheen {\n    intensityFactor: number;\n    colorFactor: number[];\n    colorIntensityTexture: ITextureInfo;\n}\n\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1688)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\n * !!! Experimental Extension Subject to Changes !!!\n */\nexport class KHR_materials_sheen implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 190;\n\n    private _loader: GLTFLoader;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n    }\n\n    /** @hidden */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IKHR_materials_sheen>(context, material, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    private _loadSheenPropertiesAsync(context: string, properties: IKHR_materials_sheen, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        const promises = new Array<Promise<any>>();\n\n        babylonMaterial.sheen.isEnabled = true;\n\n        if (properties.intensityFactor != undefined) {\n            babylonMaterial.sheen.intensity = properties.intensityFactor;\n        }\n        else {\n            babylonMaterial.sheen.intensity = 0;\n        }\n\n        if (properties.colorFactor != undefined) {\n            babylonMaterial.sheen.color = Color3.FromArray(properties.colorFactor);\n        }\n\n        if (properties.colorIntensityTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/sheenTexture`, properties.colorIntensityTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Sheen Intensity)`;\n                babylonMaterial.sheen.texture = texture;\n            }));\n        }\n\n        return Promise.all(promises).then(() => { });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_sheen(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\n\nimport { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader } from \"../glTFLoader\";\n\nconst NAME = \"KHR_materials_specular\";\n\ninterface IKHR_materials_specular {\n    specularFactor: number;\n    specularTexture: ITextureInfo;\n}\n\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1677)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\n * !!! Experimental Extension Subject to Changes !!!\n */\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 190;\n\n    private _loader: GLTFLoader;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n    }\n\n    /** @hidden */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IKHR_materials_specular>(context, material, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHR_materials_specular, babylonMaterial: Material): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n\n        if (properties.specularFactor !== undefined) {\n            babylonMaterial.metallicF0Factor = properties.specularFactor;\n        }\n\n        if (properties.specularTexture) {\n            // This does not allow a separate sampler for it at the moment but is currently under discussion.\n            babylonMaterial.useMetallicF0FactorFromMetallicTexture = true;\n        }\n\n        return Promise.resolve();\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_specular(loader));","import { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_mesh_quantization\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization)\r\n */\r\nexport class KHR_mesh_quantization implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_mesh_quantization(loader));\r\n","import { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\n\r\nconst NAME = \"KHR_texture_basisu\";\r\n\r\ninterface IKHRTextureBasisU {\r\n    source: number;\r\n}\r\n\r\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1751)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\nexport class KHR_texture_basisu implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        delete this._loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureBasisU, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = (texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler));\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(context, sampler, image, (babylonTexture) => {\r\n                babylonTexture.gammaSpace = false;\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_texture_basisu(loader));","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\n\r\nimport { ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\ninterface IKHRTextureTransform {\r\n    offset?: number[];\r\n    rotation?: number;\r\n    scale?: number[];\r\n    texCoord?: number;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform)\r\n */\r\nexport class KHR_texture_transform implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @hidden */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        delete this._loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureTransform, BaseTexture>(context, textureInfo, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\r\n                if (!(babylonTexture instanceof Texture)) {\r\n                    throw new Error(`${extensionContext}: Texture type not supported`);\r\n                }\r\n\r\n                if (extension.offset) {\r\n                    babylonTexture.uOffset = extension.offset[0];\r\n                    babylonTexture.vOffset = extension.offset[1];\r\n                }\r\n\r\n                // Always rotate around the origin.\r\n                babylonTexture.uRotationCenter = 0;\r\n                babylonTexture.vRotationCenter = 0;\r\n\r\n                if (extension.rotation) {\r\n                    babylonTexture.wAng = -extension.rotation;\r\n                }\r\n\r\n                if (extension.scale) {\r\n                    babylonTexture.uScale = extension.scale[0];\r\n                    babylonTexture.vScale = extension.scale[1];\r\n                }\r\n\r\n                if (extension.texCoord != undefined) {\r\n                    babylonTexture.coordinatesIndex = extension.texCoord;\r\n                }\r\n\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_texture_transform(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\nimport { AnimationEvent } from \"@babylonjs/core/Animations/animationEvent\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\nimport { Sound } from \"@babylonjs/core/Audio/sound\";\nimport { WeightedSound } from \"@babylonjs/core/Audio/weightedsound\";\n\nimport { IArrayItem, IScene, INode, IAnimation } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { IProperty } from 'babylonjs-gltf2interface';\n\nconst NAME = \"MSFT_audio_emitter\";\n\ninterface IClipReference {\n    clip: number;\n    weight?: number;\n}\n\ninterface IEmittersReference {\n    emitters: number[];\n}\n\nconst enum DistanceModel {\n    linear = \"linear\",\n    inverse = \"inverse\",\n    exponential = \"exponential\",\n}\n\ninterface IEmitter {\n    name?: string;\n    distanceModel?: DistanceModel;\n    refDistance?: number;\n    maxDistance?: number;\n    rolloffFactor?: number;\n    innerAngle?: number;\n    outerAngle?: number;\n    loop?: boolean;\n    volume?: number;\n    clips: IClipReference[];\n}\n\nconst enum AudioMimeType {\n    WAV = \"audio/wav\",\n}\n\ninterface IClip extends IProperty {\n    uri?: string;\n    bufferView?: number;\n    mimeType?: AudioMimeType;\n}\n\ninterface ILoaderClip extends IClip, IArrayItem {\n    _objectURL?: Promise<string>;\n}\n\ninterface ILoaderEmitter extends IEmitter, IArrayItem {\n    _babylonData?: {\n        sound?: WeightedSound;\n        loaded: Promise<void>;\n    };\n    _babylonSounds: Sound[];\n}\n\ninterface IMSFTAudioEmitter {\n    clips: ILoaderClip[];\n    emitters: ILoaderEmitter[];\n}\n\nconst enum AnimationEventAction {\n    play = \"play\",\n    pause = \"pause\",\n    stop = \"stop\",\n}\n\ninterface IAnimationEvent {\n    action: AnimationEventAction;\n    emitter: number;\n    time: number;\n    startOffset?: number;\n}\n\ninterface ILoaderAnimationEvent extends IAnimationEvent, IArrayItem {\n}\n\ninterface ILoaderAnimationEvents {\n    events: ILoaderAnimationEvent[];\n}\n\n/**\n * [Specification](https://github.com/najadojo/glTF/tree/MSFT_audio_emitter/extensions/2.0/Vendor/MSFT_audio_emitter)\n */\nexport class MSFT_audio_emitter implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n    private _clips: Array<ILoaderClip>;\n    private _emitters: Array<ILoaderEmitter>;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n        delete this._clips;\n        delete this._emitters;\n    }\n\n    /** @hidden */\n    public onLoading(): void {\n        const extensions = this._loader.gltf.extensions;\n        if (extensions && extensions[this.name]) {\n            const extension = extensions[this.name] as IMSFTAudioEmitter;\n\n            this._clips = extension.clips;\n            this._emitters = extension.emitters;\n\n            ArrayItem.Assign(this._clips);\n            ArrayItem.Assign(this._emitters);\n        }\n    }\n\n    /** @hidden */\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IEmittersReference>(context, scene, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n\n            promises.push(this._loader.loadSceneAsync(context, scene));\n\n            for (const emitterIndex of extension.emitters) {\n                const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\n                if (emitter.refDistance != undefined || emitter.maxDistance != undefined || emitter.rolloffFactor != undefined ||\n                    emitter.distanceModel != undefined || emitter.innerAngle != undefined || emitter.outerAngle != undefined) {\n                    throw new Error(`${extensionContext}: Direction or Distance properties are not allowed on emitters attached to a scene`);\n                }\n\n                promises.push(this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter));\n            }\n\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    /** @hidden */\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\n        return GLTFLoader.LoadExtensionAsync<IEmittersReference, TransformNode>(context, node, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n\n            return this._loader.loadNodeAsync(extensionContext, node, (babylonMesh) => {\n                for (const emitterIndex of extension.emitters) {\n                    const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\n                    promises.push(this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter).then(() => {\n                        for (const sound of emitter._babylonSounds) {\n                            sound.attachToMesh(babylonMesh);\n                            if (emitter.innerAngle != undefined || emitter.outerAngle != undefined) {\n                                sound.setLocalDirectionToMesh(Vector3.Forward());\n                                sound.setDirectionalCone(\n                                    2 * Tools.ToDegrees(emitter.innerAngle == undefined ? Math.PI : emitter.innerAngle),\n                                    2 * Tools.ToDegrees(emitter.outerAngle == undefined ? Math.PI : emitter.outerAngle),\n                                    0);\n                            }\n                        }\n                    }));\n                }\n\n                assign(babylonMesh);\n            }).then((babylonMesh) => {\n                return Promise.all(promises).then(() => {\n                    return babylonMesh;\n                });\n            });\n        });\n    }\n\n    /** @hidden */\n    public loadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\n        return GLTFLoader.LoadExtensionAsync<ILoaderAnimationEvents, AnimationGroup>(context, animation, this.name, (extensionContext, extension) => {\n            return this._loader.loadAnimationAsync(context, animation).then((babylonAnimationGroup) => {\n                const promises = new Array<Promise<any>>();\n\n                ArrayItem.Assign(extension.events);\n                for (const event of extension.events) {\n                    promises.push(this._loadAnimationEventAsync(`${extensionContext}/events/${event.index}`, context, animation, event, babylonAnimationGroup));\n                }\n\n                return Promise.all(promises).then(() => {\n                    return babylonAnimationGroup;\n                });\n            });\n        });\n    }\n\n    private _loadClipAsync(context: string, clip: ILoaderClip): Promise<string> {\n        if (clip._objectURL) {\n            return clip._objectURL;\n        }\n\n        let promise: Promise<ArrayBufferView>;\n        if (clip.uri) {\n            promise = this._loader.loadUriAsync(context, clip, clip.uri);\n        }\n        else {\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, clip.bufferView);\n            promise = this._loader.loadBufferViewAsync(`#/bufferViews/${bufferView.index}`, bufferView);\n        }\n\n        clip._objectURL = promise.then((data) => {\n            return URL.createObjectURL(new Blob([data], { type: clip.mimeType }));\n        });\n\n        return clip._objectURL;\n    }\n\n    private _loadEmitterAsync(context: string, emitter: ILoaderEmitter): Promise<void> {\n        emitter._babylonSounds = emitter._babylonSounds || [];\n        if (!emitter._babylonData) {\n            const clipPromises = new Array<Promise<any>>();\n            const name = emitter.name || `emitter${emitter.index}`;\n            const options = {\n                loop: false,\n                autoplay: false,\n                volume: emitter.volume == undefined ? 1 : emitter.volume,\n            };\n\n            for (let i = 0; i < emitter.clips.length; i++) {\n                const clipContext = `#/extensions/${this.name}/clips`;\n                const clip = ArrayItem.Get(clipContext, this._clips, emitter.clips[i].clip);\n                clipPromises.push(this._loadClipAsync(`${clipContext}/${emitter.clips[i].clip}`, clip).then((objectURL: string) => {\n                    const sound = emitter._babylonSounds[i] = new Sound(name, objectURL, this._loader.babylonScene, null, options);\n                    sound.refDistance = emitter.refDistance || 1;\n                    sound.maxDistance = emitter.maxDistance || 256;\n                    sound.rolloffFactor = emitter.rolloffFactor || 1;\n                    sound.distanceModel = emitter.distanceModel || 'exponential';\n                    sound._positionInEmitterSpace = true;\n                }));\n            }\n\n            const promise = Promise.all(clipPromises).then(() => {\n                const weights = emitter.clips.map((clip) => { return clip.weight || 1; });\n                const weightedSound = new WeightedSound(emitter.loop || false, emitter._babylonSounds, weights);\n                if (emitter.innerAngle) { weightedSound.directionalConeInnerAngle = 2 * Tools.ToDegrees(emitter.innerAngle); }\n                if (emitter.outerAngle) { weightedSound.directionalConeOuterAngle = 2 * Tools.ToDegrees(emitter.outerAngle); }\n                if (emitter.volume) { weightedSound.volume = emitter.volume; }\n                emitter._babylonData!.sound = weightedSound;\n            });\n\n            emitter._babylonData = {\n                loaded: promise\n            };\n        }\n\n        return emitter._babylonData.loaded;\n    }\n\n    private _getEventAction(context: string, sound: WeightedSound, action: AnimationEventAction, time: number, startOffset?: number): (currentFrame: number) => void {\n        switch (action) {\n            case AnimationEventAction.play: {\n                return (currentFrame: number) => {\n                    const frameOffset = (startOffset || 0) + (currentFrame - time);\n                    sound.play(frameOffset);\n                };\n            }\n            case AnimationEventAction.stop: {\n                return (currentFrame: number) => {\n                    sound.stop();\n                };\n            }\n            case AnimationEventAction.pause: {\n                return (currentFrame: number) => {\n                    sound.pause();\n                };\n            }\n            default: {\n                throw new Error(`${context}: Unsupported action ${action}`);\n            }\n        }\n    }\n\n    private _loadAnimationEventAsync(context: string, animationContext: string, animation: IAnimation, event: ILoaderAnimationEvent, babylonAnimationGroup: AnimationGroup): Promise<void> {\n        if (babylonAnimationGroup.targetedAnimations.length == 0) {\n            return Promise.resolve();\n        }\n        const babylonAnimation = babylonAnimationGroup.targetedAnimations[0];\n        const emitterIndex = event.emitter;\n        const emitter = ArrayItem.Get(`#/extensions/${this.name}/emitters`, this._emitters, emitterIndex);\n        return this._loadEmitterAsync(context, emitter).then(() => {\n            const sound = emitter._babylonData!.sound;\n            if (sound) {\n                var babylonAnimationEvent = new AnimationEvent(event.time, this._getEventAction(context, sound, event.action, event.time, event.startOffset));\n                babylonAnimation.animation.addEvent(babylonAnimationEvent);\n                // Make sure all started audio stops when this animation is terminated.\n                babylonAnimationGroup.onAnimationGroupEndObservable.add(() => {\n                    sound.stop();\n                });\n                babylonAnimationGroup.onAnimationGroupPauseObservable.add(() => {\n                    sound.pause();\n                });\n            }\n        });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new MSFT_audio_emitter(loader));","import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\nimport { Deferred } from \"@babylonjs/core/Misc/deferred\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { BaseTexture } from '@babylonjs/core/Materials/Textures/baseTexture';\nimport { INode, IMaterial, IBuffer, IScene } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { IProperty } from 'babylonjs-gltf2interface';\n\nconst NAME = \"MSFT_lod\";\n\ninterface IMSFTLOD {\n    ids: number[];\n}\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_lod)\n */\nexport class MSFT_lod implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 100;\n\n    /**\n     * Maximum number of LODs to load, starting from the lowest LOD.\n     */\n    public maxLODsToLoad = 10;\n\n    /**\n     * Observable raised when all node LODs of one level are loaded.\n     * The event data is the index of the loaded LOD starting from zero.\n     * Dispose the loader to cancel the loading of the next level of LODs.\n     */\n    public onNodeLODsLoadedObservable = new Observable<number>();\n\n    /**\n     * Observable raised when all material LODs of one level are loaded.\n     * The event data is the index of the loaded LOD starting from zero.\n     * Dispose the loader to cancel the loading of the next level of LODs.\n     */\n    public onMaterialLODsLoadedObservable = new Observable<number>();\n\n    private _loader: GLTFLoader;\n\n    private _nodeIndexLOD: Nullable<number> = null;\n    private _nodeSignalLODs = new Array<Deferred<void>>();\n    private _nodePromiseLODs = new Array<Array<Promise<any>>>();\n\n    private _materialIndexLOD: Nullable<number> = null;\n    private _materialSignalLODs = new Array<Deferred<void>>();\n    private _materialPromiseLODs = new Array<Array<Promise<any>>>();\n\n    private _indexLOD: Nullable<number> = null;\n    private _bufferLODs = new Array<{ start: number, end: number, loaded: Deferred<ArrayBufferView> }>();\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n\n    /** @hidden */\n    public dispose() {\n        delete this._loader;\n\n        this._nodeIndexLOD = null;\n        this._nodeSignalLODs.length = 0;\n        this._nodePromiseLODs.length = 0;\n\n        this._materialIndexLOD = null;\n        this._materialSignalLODs.length = 0;\n        this._materialPromiseLODs.length = 0;\n\n        this._indexLOD = null;\n        this._bufferLODs.length = 0;\n\n        this.onMaterialLODsLoadedObservable.clear();\n        this.onNodeLODsLoadedObservable.clear();\n    }\n\n    /** @hidden */\n    public onReady(): void {\n        for (let indexLOD = 0; indexLOD < this._nodePromiseLODs.length; indexLOD++) {\n            const promise = Promise.all(this._nodePromiseLODs[indexLOD]).then(() => {\n                if (indexLOD !== 0) {\n                    this._loader.endPerformanceCounter(`Node LOD ${indexLOD}`);\n                }\n\n                this._loader.log(`Loaded node LOD ${indexLOD}`);\n                this.onNodeLODsLoadedObservable.notifyObservers(indexLOD);\n\n                if (indexLOD !== this._nodePromiseLODs.length - 1) {\n                    this._loader.startPerformanceCounter(`Node LOD ${indexLOD + 1}`);\n                    if (this._nodeSignalLODs[indexLOD]) {\n                        this._nodeSignalLODs[indexLOD].resolve();\n                    }\n                }\n            });\n\n            this._loader._completePromises.push(promise);\n        }\n\n        for (let indexLOD = 0; indexLOD < this._materialPromiseLODs.length; indexLOD++) {\n            const promise = Promise.all(this._materialPromiseLODs[indexLOD]).then(() => {\n                if (indexLOD !== 0) {\n                    this._loader.endPerformanceCounter(`Material LOD ${indexLOD}`);\n                }\n\n                this._loader.log(`Loaded material LOD ${indexLOD}`);\n                this.onMaterialLODsLoadedObservable.notifyObservers(indexLOD);\n\n                if (indexLOD !== this._materialPromiseLODs.length - 1) {\n                    this._loader.startPerformanceCounter(`Material LOD ${indexLOD + 1}`);\n                    if (this._materialSignalLODs[indexLOD]) {\n                        this._materialSignalLODs[indexLOD].resolve();\n                    }\n                }\n            });\n\n            this._loader._completePromises.push(promise);\n        }\n\n        for (let indexLOD = 1; indexLOD < this._bufferLODs.length; indexLOD++) {\n            this._loadBufferLOD(indexLOD);\n        }\n    }\n\n    /** @hidden */\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\n        const promise = this._loader.loadSceneAsync(context, scene);\n        if (this._bufferLODs.length !== 0) {\n            this._loadBufferLOD(0);\n        }\n        return promise;\n    }\n\n    /** @hidden */\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, TransformNode>(context, node, this.name, (extensionContext, extension) => {\n            let firstPromise: Promise<TransformNode>;\n\n            const nodeLODs = this._getLODs(extensionContext, node, this._loader.gltf.nodes, extension.ids);\n            this._loader.logOpen(`${extensionContext}`);\n\n            for (let indexLOD = 0; indexLOD < nodeLODs.length; indexLOD++) {\n                const nodeLOD = nodeLODs[indexLOD];\n\n                this._indexLOD = indexLOD;\n\n                if (indexLOD !== 0) {\n                    this._nodeIndexLOD = indexLOD;\n                    this._nodeSignalLODs[indexLOD] = this._nodeSignalLODs[indexLOD] || new Deferred();\n                }\n\n                const assign = (babylonTransformNode: TransformNode) => { babylonTransformNode.setEnabled(false); };\n                const promise = this._loader.loadNodeAsync(`#/nodes/${nodeLOD.index}`, nodeLOD, assign).then((babylonMesh) => {\n                    if (indexLOD !== 0) {\n                        // TODO: should not rely on _babylonTransformNode\n                        const previousNodeLOD = nodeLODs[indexLOD - 1];\n                        if (previousNodeLOD._babylonTransformNode) {\n                            this._disposeTransformNode(previousNodeLOD._babylonTransformNode);\n                            delete previousNodeLOD._babylonTransformNode;\n                        }\n                    }\n\n                    babylonMesh.setEnabled(true);\n                    return babylonMesh;\n                });\n\n                if (indexLOD === 0) {\n                    firstPromise = promise;\n                }\n                else {\n                    this._nodeIndexLOD = null;\n                }\n\n                this._indexLOD = null;\n\n                this._nodePromiseLODs[indexLOD] = this._nodePromiseLODs[indexLOD] || [];\n                this._nodePromiseLODs[indexLOD].push(promise);\n            }\n\n            this._loader.logClose();\n            return firstPromise!;\n        });\n    }\n\n    /** @hidden */\n    public _loadMaterialAsync(context: string, material: IMaterial, babylonMesh: Mesh, babylonDrawMode: number, assign: (babylonMaterial: Material) => void): Nullable<Promise<Material>> {\n        // Don't load material LODs if already loading a node LOD.\n        if (this._indexLOD) {\n            return null;\n        }\n\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, Material>(context, material, this.name, (extensionContext, extension) => {\n            let firstPromise: Promise<Material>;\n\n            const materialLODs = this._getLODs(extensionContext, material, this._loader.gltf.materials, extension.ids);\n            this._loader.logOpen(`${extensionContext}`);\n\n            for (let indexLOD = 0; indexLOD < materialLODs.length; indexLOD++) {\n                const materialLOD = materialLODs[indexLOD];\n\n                this._indexLOD = indexLOD;\n\n                if (indexLOD !== 0) {\n                    this._materialIndexLOD = indexLOD;\n                }\n\n                const promise = this._loader._loadMaterialAsync(`#/materials/${materialLOD.index}`, materialLOD, babylonMesh, babylonDrawMode, (babylonMaterial) => {\n                    if (indexLOD === 0) {\n                        assign(babylonMaterial);\n                    }\n                }).then((babylonMaterial) => {\n                    if (indexLOD !== 0) {\n                        assign(babylonMaterial);\n\n                        // TODO: should not rely on _data\n                        const previousDataLOD = materialLODs[indexLOD - 1]._data!;\n                        if (previousDataLOD[babylonDrawMode]) {\n                            this._disposeMaterials([previousDataLOD[babylonDrawMode].babylonMaterial]);\n                            delete previousDataLOD[babylonDrawMode];\n                        }\n                    }\n\n                    return babylonMaterial;\n                });\n\n                if (indexLOD === 0) {\n                    firstPromise = promise;\n                }\n                else {\n                    this._materialIndexLOD = null;\n                }\n\n                this._indexLOD = null;\n\n                this._materialPromiseLODs[indexLOD] = this._materialPromiseLODs[indexLOD] || [];\n                this._materialPromiseLODs[indexLOD].push(promise);\n            }\n\n            this._loader.logClose();\n            return firstPromise!;\n        });\n    }\n\n    /** @hidden */\n    public _loadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\n        // Defer the loading of uris if loading a material or node LOD.\n        if (this._materialIndexLOD !== null) {\n            this._loader.log(`deferred`);\n            const previousIndexLOD = this._materialIndexLOD - 1;\n            this._materialSignalLODs[previousIndexLOD] = this._materialSignalLODs[previousIndexLOD] || new Deferred<void>();\n            return this._materialSignalLODs[previousIndexLOD].promise.then(() => {\n                return this._loader.loadUriAsync(context, property, uri);\n            });\n        }\n        else if (this._nodeIndexLOD !== null) {\n            this._loader.log(`deferred`);\n            const previousIndexLOD = this._nodeIndexLOD - 1;\n            this._nodeSignalLODs[previousIndexLOD] = this._nodeSignalLODs[previousIndexLOD] || new Deferred<void>();\n            return this._nodeSignalLODs[this._nodeIndexLOD - 1].promise.then(() => {\n                return this._loader.loadUriAsync(context, property, uri);\n            });\n        }\n\n        return null;\n    }\n\n    /** @hidden */\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\n        if (this._loader.parent.useRangeRequests && !buffer.uri) {\n            if (!this._loader.bin) {\n                throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\n            }\n\n            // Non-LOD buffers will be bucketed into the first LOD.\n            const indexLOD = this._indexLOD || 0;\n\n            const start = byteOffset;\n            const end = start + byteLength - 1;\n            let bufferLOD = this._bufferLODs[indexLOD];\n            if (bufferLOD) {\n                bufferLOD.start = Math.min(bufferLOD.start, start);\n                bufferLOD.end = Math.max(bufferLOD.end, end);\n            }\n            else {\n                bufferLOD = { start: start, end: end, loaded: new Deferred() };\n                this._bufferLODs[indexLOD] = bufferLOD;\n            }\n\n            return bufferLOD.loaded.promise.then((data) => {\n                return new Uint8Array(data.buffer, data.byteOffset + byteOffset - bufferLOD.start, byteLength);\n            });\n        }\n\n        return null;\n    }\n\n    private _loadBufferLOD(indexLOD: number): void {\n        const bufferLOD = this._bufferLODs[indexLOD];\n        this._loader.bin!.readAsync(bufferLOD.start, bufferLOD.end - bufferLOD.start + 1).then((data) => {\n            bufferLOD.loaded.resolve(data);\n        }, (error) => {\n            bufferLOD.loaded.reject(error);\n        });\n    }\n\n    /**\n     * Gets an array of LOD properties from lowest to highest.\n     */\n    private _getLODs<T>(context: string, property: T, array: ArrayLike<T> | undefined, ids: number[]): T[] {\n        if (this.maxLODsToLoad <= 0) {\n            throw new Error(\"maxLODsToLoad must be greater than zero\");\n        }\n\n        const properties = new Array<T>();\n\n        for (let i = ids.length - 1; i >= 0; i--) {\n            properties.push(ArrayItem.Get(`${context}/ids/${ids[i]}`, array, ids[i]));\n            if (properties.length === this.maxLODsToLoad) {\n                return properties;\n            }\n        }\n\n        properties.push(property);\n        return properties;\n    }\n\n    private _disposeTransformNode(babylonTransformNode: TransformNode): void {\n        const babylonMaterials = new Array<Material>();\n        const babylonMaterial = (babylonTransformNode as Mesh).material;\n        if (babylonMaterial) {\n            babylonMaterials.push(babylonMaterial);\n        }\n        for (const babylonMesh of babylonTransformNode.getChildMeshes()) {\n            if (babylonMesh.material) {\n                babylonMaterials.push(babylonMesh.material);\n            }\n        }\n\n        babylonTransformNode.dispose();\n\n        const babylonMaterialsToDispose = babylonMaterials.filter((babylonMaterial) => this._loader.babylonScene.meshes.every((mesh) => mesh.material != babylonMaterial));\n        this._disposeMaterials(babylonMaterialsToDispose);\n    }\n\n    private _disposeMaterials(babylonMaterials: Material[]): void {\n        const babylonTextures: { [uniqueId: number]: BaseTexture } = {};\n\n        for (const babylonMaterial of babylonMaterials) {\n            for (const babylonTexture of babylonMaterial.getActiveTextures()) {\n                babylonTextures[babylonTexture.uniqueId] = babylonTexture;\n            }\n\n            babylonMaterial.dispose();\n        }\n\n        for (const uniqueId in babylonTextures) {\n            for (const babylonMaterial of this._loader.babylonScene.materials) {\n                if (babylonMaterial.hasTexture(babylonTextures[uniqueId])) {\n                    delete babylonTextures[uniqueId];\n                }\n            }\n        }\n\n        for (const uniqueId in babylonTextures) {\n            babylonTextures[uniqueId].dispose();\n        }\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new MSFT_lod(loader));","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\r\n\r\nimport { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"MSFT_minecraftMesh\";\r\n\r\n/** @hidden */\r\nexport class MSFT_minecraftMesh implements IGLTFLoaderExtension {\r\n    public readonly name = NAME;\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    public dispose() {\r\n        delete this._loader;\r\n    }\r\n\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                if (babylonMaterial.needAlphaBlending()) {\r\n                    babylonMaterial.forceDepthWrite = true;\r\n                    babylonMaterial.separateCullingPass = true;\r\n                }\r\n\r\n                babylonMaterial.backFaceCulling = babylonMaterial.forceDepthWrite;\r\n                babylonMaterial.twoSidedLighting = true;\r\n\r\n                return promise;\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new MSFT_minecraftMesh(loader));","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\r\n\r\nimport { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"MSFT_sRGBFactors\";\r\n\r\n/** @hidden */\r\nexport class MSFT_sRGBFactors implements IGLTFLoaderExtension {\r\n    public readonly name = NAME;\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    public dispose() {\r\n        delete this._loader;\r\n    }\r\n\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                if (!babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoColor.toLinearSpaceToRef(babylonMaterial.albedoColor);\r\n                }\r\n\r\n                if (!babylonMaterial.reflectivityTexture) {\r\n                    babylonMaterial.reflectivityColor.toLinearSpaceToRef(babylonMaterial.reflectivityColor);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new MSFT_sRGBFactors(loader));","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\n\r\nimport { IProperty } from \"babylonjs-gltf2interface\";\r\nimport { INode, ICamera, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\n\r\nconst NAME = \"ExtrasAsMetadata\";\r\n\r\ninterface ObjectWithMetadata {\r\n    metadata: any;\r\n}\r\n\r\n/**\r\n * Store glTF extras (if present) in BJS objects' metadata\r\n */\r\nexport class ExtrasAsMetadata implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _assignExtras(\r\n        babylonObject: ObjectWithMetadata,\r\n        gltfProp: IProperty\r\n    ): void {\r\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\r\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\r\n            const gltf = (metadata.gltf = metadata.gltf || {});\r\n            gltf.extras = gltfProp.extras;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose(): void {\r\n        delete this._loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadNodeAsync(\r\n        context: string,\r\n        node: INode,\r\n        assign: (babylonTransformNode: TransformNode) => void\r\n    ): Nullable<Promise<TransformNode>> {\r\n        return this._loader.loadNodeAsync(\r\n            context,\r\n            node,\r\n            (babylonTransformNode): void => {\r\n                this._assignExtras(babylonTransformNode, node);\r\n                assign(babylonTransformNode);\r\n            }\r\n        );\r\n    }\r\n\r\n    /** @hidden */\r\n    public loadCameraAsync(\r\n        context: string,\r\n        camera: ICamera,\r\n        assign: (babylonCamera: Camera) => void\r\n    ): Nullable<Promise<Camera>> {\r\n        return this._loader.loadCameraAsync(\r\n            context,\r\n            camera,\r\n            (babylonCamera): void => {\r\n                this._assignExtras(babylonCamera, camera);\r\n                assign(babylonCamera);\r\n            }\r\n        );\r\n    }\r\n\r\n    /** @hidden */\r\n    public createMaterial(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonDrawMode: number\r\n    ): Nullable<Material> {\r\n        const babylonMaterial = this._loader.createMaterial(\r\n            context,\r\n            material,\r\n            babylonDrawMode\r\n        );\r\n        this._assignExtras(babylonMaterial, material);\r\n        return babylonMaterial;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(\r\n    NAME,\r\n    (loader): IGLTFLoaderExtension => new ExtrasAsMetadata(loader)\r\n);\r\n","/*\n * Copyright (c) 2015 cannon.js Authors\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&false)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.CANNON=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"cannon\",\n  \"version\": \"0.6.2\",\n  \"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n  \"homepage\": \"https://github.com/schteppe/cannon.js\",\n  \"author\": \"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\",\n  \"keywords\": [\n    \"cannon.js\",\n    \"cannon\",\n    \"physics\",\n    \"engine\",\n    \"3d\"\n  ],\n  \"main\": \"./build/cannon.js\",\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/schteppe/cannon.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/schteppe/cannon.js/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\"\n    }\n  ],\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"uglify-js\": \"latest\",\n    \"nodeunit\": \"^0.9.0\",\n    \"grunt\": \"~0.4.0\",\n    \"grunt-contrib-jshint\": \"~0.1.1\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-uglify\": \"^0.5.1\",\n    \"grunt-browserify\": \"^2.1.4\",\n    \"grunt-contrib-yuidoc\": \"^0.5.2\",\n    \"browserify\": \"*\"\n  },\n  \"dependencies\": {}\n}\n\n},{}],2:[function(_dereq_,module,exports){\n// Export classes\nmodule.exports = {\n    version :                       _dereq_('../package.json').version,\n\n    AABB :                          _dereq_('./collision/AABB'),\n    ArrayCollisionMatrix :          _dereq_('./collision/ArrayCollisionMatrix'),\n    Body :                          _dereq_('./objects/Body'),\n    Box :                           _dereq_('./shapes/Box'),\n    Broadphase :                    _dereq_('./collision/Broadphase'),\n    Constraint :                    _dereq_('./constraints/Constraint'),\n    ContactEquation :               _dereq_('./equations/ContactEquation'),\n    Narrowphase :                   _dereq_('./world/Narrowphase'),\n    ConeTwistConstraint :           _dereq_('./constraints/ConeTwistConstraint'),\n    ContactMaterial :               _dereq_('./material/ContactMaterial'),\n    ConvexPolyhedron :              _dereq_('./shapes/ConvexPolyhedron'),\n    Cylinder :                      _dereq_('./shapes/Cylinder'),\n    DistanceConstraint :            _dereq_('./constraints/DistanceConstraint'),\n    Equation :                      _dereq_('./equations/Equation'),\n    EventTarget :                   _dereq_('./utils/EventTarget'),\n    FrictionEquation :              _dereq_('./equations/FrictionEquation'),\n    GSSolver :                      _dereq_('./solver/GSSolver'),\n    GridBroadphase :                _dereq_('./collision/GridBroadphase'),\n    Heightfield :                   _dereq_('./shapes/Heightfield'),\n    HingeConstraint :               _dereq_('./constraints/HingeConstraint'),\n    LockConstraint :                _dereq_('./constraints/LockConstraint'),\n    Mat3 :                          _dereq_('./math/Mat3'),\n    Material :                      _dereq_('./material/Material'),\n    NaiveBroadphase :               _dereq_('./collision/NaiveBroadphase'),\n    ObjectCollisionMatrix :         _dereq_('./collision/ObjectCollisionMatrix'),\n    Pool :                          _dereq_('./utils/Pool'),\n    Particle :                      _dereq_('./shapes/Particle'),\n    Plane :                         _dereq_('./shapes/Plane'),\n    PointToPointConstraint :        _dereq_('./constraints/PointToPointConstraint'),\n    Quaternion :                    _dereq_('./math/Quaternion'),\n    Ray :                           _dereq_('./collision/Ray'),\n    RaycastVehicle :                _dereq_('./objects/RaycastVehicle'),\n    RaycastResult :                 _dereq_('./collision/RaycastResult'),\n    RigidVehicle :                  _dereq_('./objects/RigidVehicle'),\n    RotationalEquation :            _dereq_('./equations/RotationalEquation'),\n    RotationalMotorEquation :       _dereq_('./equations/RotationalMotorEquation'),\n    SAPBroadphase :                 _dereq_('./collision/SAPBroadphase'),\n    SPHSystem :                     _dereq_('./objects/SPHSystem'),\n    Shape :                         _dereq_('./shapes/Shape'),\n    Solver :                        _dereq_('./solver/Solver'),\n    Sphere :                        _dereq_('./shapes/Sphere'),\n    SplitSolver :                   _dereq_('./solver/SplitSolver'),\n    Spring :                        _dereq_('./objects/Spring'),\n    Trimesh :                       _dereq_('./shapes/Trimesh'),\n    Vec3 :                          _dereq_('./math/Vec3'),\n    Vec3Pool :                      _dereq_('./utils/Vec3Pool'),\n    World :                         _dereq_('./world/World'),\n};\n\n},{\"../package.json\":1,\"./collision/AABB\":3,\"./collision/ArrayCollisionMatrix\":4,\"./collision/Broadphase\":5,\"./collision/GridBroadphase\":6,\"./collision/NaiveBroadphase\":7,\"./collision/ObjectCollisionMatrix\":8,\"./collision/Ray\":9,\"./collision/RaycastResult\":10,\"./collision/SAPBroadphase\":11,\"./constraints/ConeTwistConstraint\":12,\"./constraints/Constraint\":13,\"./constraints/DistanceConstraint\":14,\"./constraints/HingeConstraint\":15,\"./constraints/LockConstraint\":16,\"./constraints/PointToPointConstraint\":17,\"./equations/ContactEquation\":19,\"./equations/Equation\":20,\"./equations/FrictionEquation\":21,\"./equations/RotationalEquation\":22,\"./equations/RotationalMotorEquation\":23,\"./material/ContactMaterial\":24,\"./material/Material\":25,\"./math/Mat3\":27,\"./math/Quaternion\":28,\"./math/Vec3\":30,\"./objects/Body\":31,\"./objects/RaycastVehicle\":32,\"./objects/RigidVehicle\":33,\"./objects/SPHSystem\":34,\"./objects/Spring\":35,\"./shapes/Box\":37,\"./shapes/ConvexPolyhedron\":38,\"./shapes/Cylinder\":39,\"./shapes/Heightfield\":40,\"./shapes/Particle\":41,\"./shapes/Plane\":42,\"./shapes/Shape\":43,\"./shapes/Sphere\":44,\"./shapes/Trimesh\":45,\"./solver/GSSolver\":46,\"./solver/Solver\":47,\"./solver/SplitSolver\":48,\"./utils/EventTarget\":49,\"./utils/Pool\":51,\"./utils/Vec3Pool\":54,\"./world/Narrowphase\":55,\"./world/World\":56}],3:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    // Extend lower bound\n    var l = aabb.lowerBound.x;\n    if(this.lowerBound.x > l){\n        this.lowerBound.x = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.x;\n    if(this.upperBound.x < u){\n        this.upperBound.x = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.y;\n    if(this.lowerBound.y > l){\n        this.lowerBound.y = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.y;\n    if(this.upperBound.y < u){\n        this.upperBound.y = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.z;\n    if(this.lowerBound.z > l){\n        this.lowerBound.z = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.z;\n    if(this.upperBound.z < u){\n        this.upperBound.z = u;\n    }\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n};\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53}],4:[function(_dereq_,module,exports){\nmodule.exports = ArrayCollisionMatrix;\n\n/**\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n * @class ArrayCollisionMatrix\n * @constructor\n */\nfunction ArrayCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Array}\n     */\n\tthis.matrix = [];\n}\n\n/**\n * Get an element\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nArrayCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n};\n\n/**\n * Set an element\n * @method set\n * @param {Number} i\n * @param {Number} j\n * @param {Number} value\n */\nArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n};\n\n/**\n * Sets all elements to zero\n * @method reset\n */\nArrayCollisionMatrix.prototype.reset = function() {\n\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\tthis.matrix[i]=0;\n\t}\n};\n\n/**\n * Sets the max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\tthis.matrix.length = n*(n-1)>>1;\n};\n\n},{}],5:[function(_dereq_,module,exports){\nvar Body = _dereq_('../objects/Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Shape = _dereq_('../shapes/Shape');\nvar Plane = _dereq_('../shapes/Plane');\n\nmodule.exports = Broadphase;\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nfunction Broadphase(){\n    /**\n    * The world to search for collisions in.\n    * @property world\n    * @type {World}\n    */\n    this.world = null;\n\n    /**\n     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n     * @property useBoundingBoxes\n     * @type {Boolean}\n     */\n    this.useBoundingBoxes = false;\n\n    /**\n     * Set to true if the objects in the world moved.\n     * @property {Boolean} dirty\n     */\n    this.dirty = true;\n}\n\n/**\n * Get the collision pairs from the world\n * @method collisionPairs\n * @param {World} world The world to search in\n * @param {Array} p1 Empty array to be filled with body objects\n * @param {Array} p2 Empty array to be filled with body objects\n */\nBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n};\n\n/**\n * Check if a body pair needs to be intersection tested at all.\n * @method needBroadphaseCollision\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {bool}\n */\nvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\nBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\n    // Check collision filter masks\n    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n        return false;\n    }\n\n    // Check types\n    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static, kinematic or sleeping. Skip.\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if the bounding volumes of two bodies intersect.\n * @method intersectionTest\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {array} pairs1\n * @param {array} pairs2\n  */\nBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n    if(this.useBoundingBoxes){\n        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n    } else {\n        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n    }\n};\n\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\nvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n    Broadphase_collisionPairs_normal =  new Vec3(),\n    Broadphase_collisionPairs_quat =  new Quaternion(),\n    Broadphase_collisionPairs_relpos  =  new Vec3();\nBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    var r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position,r);\n    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n    var norm2 = r.norm2();\n    if(norm2 < boundingRadiusSum2){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Check if the bounding boxes of two bodies are intersecting.\n * @method doBoundingBoxBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    if(bodyA.aabbNeedsUpdate){\n        bodyA.computeAABB();\n    }\n    if(bodyB.aabbNeedsUpdate){\n        bodyB.computeAABB();\n    }\n\n    // Check AABB / AABB\n    if(bodyA.aabb.overlaps(bodyB.aabb)){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar Broadphase_makePairsUnique_temp = { keys:[] },\n    Broadphase_makePairsUnique_p1 = [],\n    Broadphase_makePairsUnique_p2 = [];\nBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n    var t = Broadphase_makePairsUnique_temp,\n        p1 = Broadphase_makePairsUnique_p1,\n        p2 = Broadphase_makePairsUnique_p2,\n        N = pairs1.length;\n\n    for(var i=0; i!==N; i++){\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for(var i=0; i!==N; i++){\n        var id1 = p1[i].id,\n            id2 = p2[i].id;\n        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n        t[key] = i;\n        t.keys.push(key);\n    }\n\n    for(var i=0; i!==t.keys.length; i++){\n        var key = t.keys.pop(),\n            pairIndex = t[key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[key];\n    }\n};\n\n/**\n * To be implemented by subcasses\n * @method setWorld\n * @param {World} world\n */\nBroadphase.prototype.setWorld = function(world){\n};\n\n/**\n * Check if the bounding spheres of two bodies overlap.\n * @method boundingSphereCheck\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {boolean}\n */\nvar bsc_dist = new Vec3();\nBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n    var dist = bsc_dist;\n    bodyA.position.vsub(bodyB.position,dist);\n    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n};\n\n/**\n * Returns all the bodies within the AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param  {array} result An array to store resulting bodies in.\n * @return {array}\n */\nBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n};\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Plane\":42,\"../shapes/Shape\":43}],6:[function(_dereq_,module,exports){\nmodule.exports = GridBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Shape = _dereq_('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n\n},{\"../math/Vec3\":30,\"../shapes/Shape\":43,\"./Broadphase\":5}],7:[function(_dereq_,module,exports){\nmodule.exports = NaiveBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar AABB = _dereq_('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"./AABB\":3,\"./Broadphase\":5}],8:[function(_dereq_,module,exports){\nmodule.exports = ObjectCollisionMatrix;\n\n/**\n * Records what objects are colliding with each other\n * @class ObjectCollisionMatrix\n * @constructor\n */\nfunction ObjectCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Object}\n     */\n\tthis.matrix = {};\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nObjectCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn i+'-'+j in this.matrix;\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n\t}\n\tif (value) {\n\t\tthis.matrix[i+'-'+j] = true;\n\t}\n\telse {\n\t\tdelete this.matrix[i+'-'+j];\n\t}\n};\n\n/**\n * Empty the matrix\n * @method reset\n */\nObjectCollisionMatrix.prototype.reset = function() {\n\tthis.matrix = {};\n};\n\n/**\n * Set max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n};\n\n},{}],9:[function(_dereq_,module,exports){\nmodule.exports = Ray;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Box = _dereq_('../shapes/Box');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Shape = _dereq_('../shapes/Shape');\nvar AABB = _dereq_('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n    var data = shape.data,\n        w = shape.elementSize,\n        worldPillarOffset = new Vec3();\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = new Ray(this.from, this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\n    // Get the index of the data points to test against\n    var index = [];\n    var iMinX = null;\n    var iMinY = null;\n    var iMaxX = null;\n    var iMaxY = null;\n\n    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n    if(inside){\n        iMinX = index[0];\n        iMinY = index[1];\n        iMaxX = index[0];\n        iMaxY = index[1];\n    }\n    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n    if(inside){\n        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n    }\n\n    if(iMinX === null){\n        return;\n    }\n\n    var minMax = [];\n    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // // Bail out if the ray can't touch the bounding box\n    // // TODO\n    // var aabb = new AABB();\n    // this.getAABB(aabb);\n    // if(aabb.intersects()){\n    //     return;\n    // }\n\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    //body.vectorToLocalFrame(direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    //body.pointToLocalFrame(from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    //body.pointToLocalFrame(to, localTo);\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // Get plane normal\n        // quat.vmult(normal, normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        //body.vectorToWorldFrame(normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n\n},{\"../collision/AABB\":3,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43}],10:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};\n},{\"../math/Vec3\":30}],11:[function(_dereq_,module,exports){\nvar Shape = _dereq_('../shapes/Shape');\nvar Broadphase = _dereq_('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"../collision/Broadphase\":5,\"../shapes/Shape\":43}],12:[function(_dereq_,module,exports){\nmodule.exports = ConeTwistConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar ConeEquation = _dereq_('../equations/ConeEquation');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n\n},{\"../equations/ConeEquation\":18,\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],13:[function(_dereq_,module,exports){\nmodule.exports = Constraint;\n\nvar Utils = _dereq_('../utils/Utils');\n\n/**\n * Constraint base class\n * @class Constraint\n * @author schteppe\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {boolean} [options.collideConnected=true]\n * @param {boolean} [options.wakeUpBodies=true]\n */\nfunction Constraint(bodyA, bodyB, options){\n    options = Utils.defaults(options,{\n        collideConnected : true,\n        wakeUpBodies : true,\n    });\n\n    /**\n     * Equations to be solved in this constraint\n     * @property equations\n     * @type {Array}\n     */\n    this.equations = [];\n\n    /**\n     * @property {Body} bodyA\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * @property {Body} bodyB\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * @property {Number} id\n     */\n    this.id = Constraint.idCounter++;\n\n    /**\n     * Set to true if you want the bodies to collide when they are connected.\n     * @property collideConnected\n     * @type {boolean}\n     */\n    this.collideConnected = options.collideConnected;\n\n    if(options.wakeUpBodies){\n        if(bodyA){\n            bodyA.wakeUp();\n        }\n        if(bodyB){\n            bodyB.wakeUp();\n        }\n    }\n}\n\n/**\n * Update all the equations with data.\n * @method update\n */\nConstraint.prototype.update = function(){\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n};\n\n/**\n * Enables all equations in the constraint.\n * @method enable\n */\nConstraint.prototype.enable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = true;\n    }\n};\n\n/**\n * Disables all equations in the constraint.\n * @method disable\n */\nConstraint.prototype.disable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = false;\n    }\n};\n\nConstraint.idCounter = 0;\n\n},{\"../utils/Utils\":53}],14:[function(_dereq_,module,exports){\nmodule.exports = DistanceConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n * @class DistanceConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n * @param {Number} [maxForce=1e6]\n * @extends Constraint\n */\nfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    if(typeof(distance)===\"undefined\") {\n        distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    if(typeof(maxForce)===\"undefined\") {\n        maxForce = 1e6;\n    }\n\n    /**\n     * @property {number} distance\n     */\n    this.distance = distance;\n\n    /**\n     * @property {ContactEquation} distanceEquation\n     */\n    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n\n    // Make it bidirectional\n    eq.minForce = -maxForce;\n    eq.maxForce =  maxForce;\n}\nDistanceConstraint.prototype = new Constraint();\n\nDistanceConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var eq = this.distanceEquation;\n    var halfDist = this.distance * 0.5;\n    var normal = eq.ni;\n\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.mult(halfDist, eq.ri);\n    normal.mult(-halfDist, eq.rj);\n};\n},{\"../equations/ContactEquation\":19,\"./Constraint\":13}],15:[function(_dereq_,module,exports){\nmodule.exports = HingeConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n * @class HingeConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction HingeConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * Rotation axis, defined locally in bodyA.\n     * @property {Vec3} axisA\n     */\n    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n    axisA.normalize();\n\n    /**\n     * Rotation axis, defined locally in bodyB.\n     * @property {Vec3} axisB\n     */\n    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n    axisB.normalize();\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalMotorEquation} motorEquation\n     */\n    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n    motor.enabled = false; // Not enabled by default\n\n    // Equations to be fed to the solver\n    this.equations.push(\n        r1, // rotational1\n        r2, // rotational2\n        motor\n    );\n}\nHingeConstraint.prototype = new PointToPointConstraint();\nHingeConstraint.constructor = HingeConstraint;\n\n/**\n * @method enableMotor\n */\nHingeConstraint.prototype.enableMotor = function(){\n    this.motorEquation.enabled = true;\n};\n\n/**\n * @method disableMotor\n */\nHingeConstraint.prototype.disableMotor = function(){\n    this.motorEquation.enabled = false;\n};\n\n/**\n * @method setMotorSpeed\n * @param {number} speed\n */\nHingeConstraint.prototype.setMotorSpeed = function(speed){\n    this.motorEquation.targetVelocity = speed;\n};\n\n/**\n * @method setMotorMaxForce\n * @param {number} maxForce\n */\nHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n};\n\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\nHingeConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        worldAxisA = HingeConstraint_update_tmpVec1,\n        worldAxisB = HingeConstraint_update_tmpVec2;\n\n    var axisA = this.axisA;\n    var axisB = this.axisB;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Get world axes\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if(this.motorEquation.enabled){\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],16:[function(_dereq_,module,exports){\nmodule.exports = LockConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n * @class LockConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction LockConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation3\n     */\n    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\n    this.equations.push(r1, r2, r3);\n}\nLockConstraint.prototype = new PointToPointConstraint();\nLockConstraint.constructor = LockConstraint;\n\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\nLockConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        r3 = this.rotationalEquation3,\n        worldAxisA = LockConstraint_update_tmpVec1,\n        worldAxisB = LockConstraint_update_tmpVec2;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],17:[function(_dereq_,module,exports){\nmodule.exports = PointToPointConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};\n},{\"../equations/ContactEquation\":19,\"../math/Vec3\":30,\"./Constraint\":13}],18:[function(_dereq_,module,exports){\nmodule.exports = ConeEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n * @class ConeEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA] Local axis in A\n * @param {Vec3} [options.axisB] Local axis in B\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\n * @param {number} [options.maxForce=1e6]\n * @extends Equation\n */\nfunction ConeEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    /**\n     * The cone angle to keep\n     * @property {number} angle\n     */\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n}\n\nConeEquation.prototype = new Equation();\nConeEquation.prototype.constructor = ConeEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nConeEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.angle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],19:[function(_dereq_,module,exports){\nmodule.exports = ContactEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Contact/non-penetration constraint equation\n * @class ContactEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @extends Equation\n */\nfunction ContactEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\n    /**\n     * @property restitution\n     * @type {Number}\n     */\n    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\n    /**\n     * World-oriented vector that goes from the center of bi to the contact point.\n     * @property {Vec3} ri\n     */\n    this.ri = new Vec3();\n\n    /**\n     * World-oriented vector that starts in body j position and goes to the contact point.\n     * @property {Vec3} rj\n     */\n    this.rj = new Vec3();\n\n    /**\n     * Contact normal, pointing out of body i.\n     * @property {Vec3} ni\n     */\n    this.ni = new Vec3();\n}\n\nContactEquation.prototype = new Equation();\nContactEquation.prototype.constructor = ContactEquation;\n\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nContactEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixn = ContactEquation_computeB_temp1,\n        rjxn = ContactEquation_computeB_temp2,\n\n        vi = bi.velocity,\n        wi = bi.angularVelocity,\n        fi = bi.force,\n        taui = bi.torque,\n\n        vj = bj.velocity,\n        wj = bj.angularVelocity,\n        fj = bj.force,\n        tauj = bj.torque,\n\n        penetrationVec = ContactEquation_computeB_temp3,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n\n        n = this.ni;\n\n    // Caluclate cross products\n    ri.cross(n,rixn);\n    rj.cross(n,rjxn);\n\n    // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n\n    // Calculate the penetration vector\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj,penetrationVec);\n    penetrationVec.vsub(bi.position,penetrationVec);\n    penetrationVec.vsub(ri,penetrationVec);\n\n    var g = n.dot(penetrationVec);\n\n    // Compute iteration\n    var ePlusOne = this.restitution + 1;\n    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    var GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h*GiMf;\n\n    return B;\n};\n\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Get the current relative velocity in the contact point.\n * @method getImpactVelocityAlongNormal\n * @return {number}\n */\nContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n\n    vi.vsub(vj, relVel);\n\n    return this.ni.dot(relVel);\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],20:[function(_dereq_,module,exports){\nmodule.exports = Equation;\n\nvar JacobianElement = _dereq_('../math/JacobianElement'),\n    Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Equation base class\n * @class Equation\n * @constructor\n * @author schteppe\n * @param {Body} bi\n * @param {Body} bj\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n */\nfunction Equation(bi,bj,minForce,maxForce){\n    this.id = Equation.id++;\n\n    /**\n     * @property {number} minForce\n     */\n    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\n    /**\n     * @property {number} maxForce\n     */\n    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\n    /**\n     * @property bi\n     * @type {Body}\n     */\n    this.bi = bi;\n\n    /**\n     * @property bj\n     * @type {Body}\n     */\n    this.bj = bj;\n\n    /**\n     * SPOOK parameter\n     * @property {number} a\n     */\n    this.a = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} b\n     */\n    this.b = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} eps\n     */\n    this.eps = 0.0;\n\n    /**\n     * @property {JacobianElement} jacobianElementA\n     */\n    this.jacobianElementA = new JacobianElement();\n\n    /**\n     * @property {JacobianElement} jacobianElementB\n     */\n    this.jacobianElementB = new JacobianElement();\n\n    /**\n     * @property {boolean} enabled\n     * @default true\n     */\n    this.enabled = true;\n\n    // Set typical spook params\n    this.setSpookParams(1e7,4,1/60);\n}\nEquation.prototype.constructor = Equation;\n\nEquation.id = 0;\n\n/**\n * Recalculates a,b,eps.\n * @method setSpookParams\n */\nEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n    var d = relaxation,\n        k = stiffness,\n        h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = (4.0 * d) / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n};\n\n/**\n * Computes the RHS of the SPOOK equation\n * @method computeB\n * @return {Number}\n */\nEquation.prototype.computeB = function(a,b,h){\n    var GW = this.computeGW(),\n        Gq = this.computeGq(),\n        GiMf = this.computeGiMf();\n    return - Gq * a - GW * b - GiMf*h;\n};\n\n/**\n * Computes G*q, where q are the generalized body coordinates\n * @method computeGq\n * @return {Number}\n */\nEquation.prototype.computeGq = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        xi = bi.position,\n        xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n};\n\nvar zero = new Vec3();\n\n/**\n * Computes G*W, where W are the body velocities\n * @method computeGW\n * @return {Number}\n */\nEquation.prototype.computeGW = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.velocity,\n        vj = bj.velocity,\n        wi = bi.angularVelocity || zero,\n        wj = bj.angularVelocity || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n\n/**\n * Computes G*Wlambda, where W are the body velocities\n * @method computeGWlambda\n * @return {Number}\n */\nEquation.prototype.computeGWlambda = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.vlambda,\n        vj = bj.vlambda,\n        wi = bi.wlambda || zero,\n        wj = bj.wlambda || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n/**\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n * @method computeGiMf\n * @return {Number}\n */\nvar iMfi = new Vec3(),\n    iMfj = new Vec3(),\n    invIi_vmult_taui = new Vec3(),\n    invIj_vmult_tauj = new Vec3();\nEquation.prototype.computeGiMf = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        fi = bi.force,\n        ti = bi.torque,\n        fj = bj.force,\n        tj = bj.torque,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve;\n\n    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n    else { invIi_vmult_taui.set(0,0,0); }\n    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n    else { invIj_vmult_tauj.set(0,0,0); }\n\n    fi.mult(invMassi,iMfi);\n    fj.mult(invMassj,iMfj);\n\n    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n};\n\n/**\n * Computes G*inv(M)*G'\n * @method computeGiMGt\n * @return {Number}\n */\nvar tmp = new Vec3();\nEquation.prototype.computeGiMGt = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve,\n        invIi = bi.invInertiaWorldSolve,\n        invIj = bj.invInertiaWorldSolve,\n        result = invMassi + invMassj;\n\n    if(invIi){\n        invIi.vmult(GA.rotational,tmp);\n        result += tmp.dot(GA.rotational);\n    }\n\n    if(invIj){\n        invIj.vmult(GB.rotational,tmp);\n        result += tmp.dot(GB.rotational);\n    }\n\n    return  result;\n};\n\nvar addToWlambda_temp = new Vec3(),\n    addToWlambda_Gi = new Vec3(),\n    addToWlambda_Gj = new Vec3(),\n    addToWlambda_ri = new Vec3(),\n    addToWlambda_rj = new Vec3(),\n    addToWlambda_Mdiag = new Vec3();\n\n/**\n * Add constraint velocity to the bodies.\n * @method addToWlambda\n * @param {Number} deltalambda\n */\nEquation.prototype.addToWlambda = function(deltalambda){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        temp = addToWlambda_temp;\n\n    // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n    bi.vlambda.vadd(temp, bi.vlambda);\n\n    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n    bj.vlambda.vadd(temp, bj.vlambda);\n\n    // Add to angular velocity\n    if(bi.invInertiaWorldSolve){\n        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bi.wlambda.vadd(temp,bi.wlambda);\n    }\n\n    if(bj.invInertiaWorldSolve){\n        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bj.wlambda.vadd(temp,bj.wlambda);\n    }\n};\n\n/**\n * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n * @method computeInvC\n * @param  {Number} eps\n * @return {Number}\n */\nEquation.prototype.computeC = function(){\n    return this.computeGiMGt() + this.eps;\n};\n\n},{\"../math/JacobianElement\":26,\"../math/Vec3\":30}],21:[function(_dereq_,module,exports){\nmodule.exports = FrictionEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Constrains the slipping in a contact along a tangent\n * @class FrictionEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n * @extends Equation\n */\nfunction FrictionEquation(bodyA, bodyB, slipForce){\n    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3(); // tangent\n}\n\nFrictionEquation.prototype = new Equation();\nFrictionEquation.prototype.constructor = FrictionEquation;\n\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\nFrictionEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixt = FrictionEquation_computeB_temp1,\n        rjxt = FrictionEquation_computeB_temp2,\n        t = this.t;\n\n    // Caluclate cross products\n    ri.cross(t,rixt);\n    rj.cross(t,rjxt);\n\n    // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n\n    var GW = this.computeGW();\n    var GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],22:[function(_dereq_,module,exports){\nmodule.exports = RotationalEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n * @class RotationalEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {number} [options.maxForce]\n * @extends Equation\n */\nfunction RotationalEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    this.maxAngle = Math.PI / 2;\n}\n\nRotationalEquation.prototype = new Equation();\nRotationalEquation.prototype.constructor = RotationalEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nRotationalEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],23:[function(_dereq_,module,exports){\nmodule.exports = RotationalMotorEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n * @class RotationalMotorEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} maxForce\n * @extends Equation\n */\nfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisA\n     */\n    this.axisA = new Vec3();\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisB\n     */\n    this.axisB = new Vec3(); // World oriented rotational axis\n\n    /**\n     * Motor velocity\n     * @property {Number} targetVelocity\n     */\n    this.targetVelocity = 0;\n}\n\nRotationalMotorEquation.prototype = new Equation();\nRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\nRotationalMotorEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n\n        axisA = this.axisA,\n        axisB = this.axisB,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n\n    var GW = this.computeGW() - this.targetVelocity,\n        GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],24:[function(_dereq_,module,exports){\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = ContactMaterial;\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n */\nfunction ContactMaterial(m1, m2, options){\n    options = Utils.defaults(options, {\n        friction: 0.3,\n        restitution: 0.3,\n        contactEquationStiffness: 1e7,\n        contactEquationRelaxation: 3,\n        frictionEquationStiffness: 1e7,\n        frictionEquationRelaxation: 3\n    });\n\n    /**\n     * Identifier of this material\n     * @property {Number} id\n     */\n    this.id = ContactMaterial.idCounter++;\n\n    /**\n     * Participating materials\n     * @property {Array} materials\n     * @todo  Should be .materialA and .materialB instead\n     */\n    this.materials = [m1, m2];\n\n    /**\n     * Friction coefficient\n     * @property {Number} friction\n     */\n    this.friction = options.friction;\n\n    /**\n     * Restitution coefficient\n     * @property {Number} restitution\n     */\n    this.restitution = options.restitution;\n\n    /**\n     * Stiffness of the produced contact equations\n     * @property {Number} contactEquationStiffness\n     */\n    this.contactEquationStiffness = options.contactEquationStiffness;\n\n    /**\n     * Relaxation time of the produced contact equations\n     * @property {Number} contactEquationRelaxation\n     */\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\n    /**\n     * Stiffness of the produced friction equations\n     * @property {Number} frictionEquationStiffness\n     */\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\n    /**\n     * Relaxation time of the produced friction equations\n     * @property {Number} frictionEquationRelaxation\n     */\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n}\n\nContactMaterial.idCounter = 0;\n\n},{\"../utils/Utils\":53}],25:[function(_dereq_,module,exports){\nmodule.exports = Material;\n\n/**\n * Defines a physics material.\n * @class Material\n * @constructor\n * @param {object} [options]\n * @author schteppe\n */\nfunction Material(options){\n    var name = '';\n    options = options || {};\n\n    // Backwards compatibility fix\n    if(typeof(options) === 'string'){\n        name = options;\n        options = {};\n    } else if(typeof(options) === 'object') {\n        name = '';\n    }\n\n    /**\n     * @property name\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * material id.\n     * @property id\n     * @type {number}\n     */\n    this.id = Material.idCounter++;\n\n    /**\n     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} friction\n     */\n    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\n    /**\n     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} restitution\n     */\n    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n}\n\nMaterial.idCounter = 0;\n\n},{}],26:[function(_dereq_,module,exports){\nmodule.exports = JacobianElement;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n * @class JacobianElement\n * @constructor\n */\nfunction JacobianElement(){\n\n    /**\n     * @property {Vec3} spatial\n     */\n    this.spatial = new Vec3();\n\n    /**\n     * @property {Vec3} rotational\n     */\n    this.rotational = new Vec3();\n}\n\n/**\n * Multiply with other JacobianElement\n * @method multiplyElement\n * @param  {JacobianElement} element\n * @return {Number}\n */\nJacobianElement.prototype.multiplyElement = function(element){\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n};\n\n/**\n * Multiply with two vectors\n * @method multiplyVectors\n * @param  {Vec3} spatial\n * @param  {Vec3} rotational\n * @return {Number}\n */\nJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n};\n\n},{\"./Vec3\":30}],27:[function(_dereq_,module,exports){\nmodule.exports = Mat3;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n\n},{\"./Vec3\":30}],28:[function(_dereq_,module,exports){\nmodule.exports = Quaternion;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n    var w = this.w,\n        va = Quaternion_mult_va,\n        vb = Quaternion_mult_vb,\n        vaxvb = Quaternion_mult_vaxvb;\n\n    va.set(this.x,this.y,this.z);\n    vb.set(q.x,q.y,q.z);\n    target.w = w*q.w - va.dot(vb);\n    va.cross(vb,vaxvb);\n\n    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n\n};\n\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n},{\"./Vec3\":30}],29:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('./Vec3');\nvar Quaternion = _dereq_('./Quaternion');\n\nmodule.exports = Transform;\n\n/**\n * @class Transform\n * @constructor\n */\nfunction Transform(options) {\n    options = options || {};\n\n\t/**\n\t * @property {Vec3} position\n\t */\n\tthis.position = new Vec3();\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n\t/**\n\t * @property {Quaternion} quaternion\n\t */\n\tthis.quaternion = new Quaternion();\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n}\n\nvar tmpQuat = new Quaternion();\n\n/**\n * @static\n * @method pointToLocaFrame\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {Vec3} worldPoint\n * @param {Vec3} result\n */\nTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n    var result = result || new Vec3();\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n};\n\n/**\n * Get a global point in local transform coordinates.\n * @method pointToLocal\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToLocal = function(worldPoint, result){\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n};\n\n/**\n * @static\n * @method pointToWorldFrame\n * @param {Vec3} position\n * @param {Vec3} quaternion\n * @param {Vec3} localPoint\n * @param {Vec3} result\n */\nTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n    var result = result || new Vec3();\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n};\n\n/**\n * Get a local point in global transform coordinates.\n * @method pointToWorld\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToWorld = function(localPoint, result){\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n};\n\n\nTransform.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n    quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n    var result = result || new Vec3();\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n};\n\n},{\"./Quaternion\":28,\"./Vec3\":30}],30:[function(_dereq_,module,exports){\nmodule.exports = Vec3;\n\nvar Mat3 = _dereq_('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};\n},{\"./Mat3\":27}],31:[function(_dereq_,module,exports){\nmodule.exports = Body;\n\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\nvar AABB = _dereq_('../collision/AABB');\nvar Box = _dereq_('../shapes/Box');\n\n/**\n * Base class for all body types.\n * @class Body\n * @constructor\n * @extends EventTarget\n * @param {object} [options]\n * @param {Vec3} [options.position]\n * @param {Vec3} [options.velocity]\n * @param {Vec3} [options.angularVelocity]\n * @param {Quaternion} [options.quaternion]\n * @param {number} [options.mass]\n * @param {Material} [options.material]\n * @param {number} [options.type]\n * @param {number} [options.linearDamping=0.01]\n * @param {number} [options.angularDamping=0.01]\n * @param {boolean} [options.allowSleep=true]\n * @param {number} [options.sleepSpeedLimit=0.1]\n * @param {number} [options.sleepTimeLimit=1]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=1]\n * @param {boolean} [options.fixedRotation=false]\n * @param {Body} [options.shape]\n * @example\n *     var body = new Body({\n *         mass: 1\n *     });\n *     var shape = new Sphere(1);\n *     body.addShape(shape);\n *     world.add(body);\n */\nfunction Body(options){\n    options = options || {};\n\n    EventTarget.apply(this);\n\n    this.id = Body.idCounter++;\n\n    /**\n     * Reference to the world the body is living in\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n     * @property preStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.preStep = null;\n\n    /**\n     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n     * @property postStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.postStep = null;\n\n    this.vlambda = new Vec3();\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {Number} collisionResponse\n     */\n\tthis.collisionResponse = true;\n\n    /**\n     * @property position\n     * @type {Vec3}\n     */\n    this.position = new Vec3();\n\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n    /**\n     * @property {Vec3} previousPosition\n     */\n    this.previousPosition = new Vec3();\n\n    /**\n     * Initial position of the body\n     * @property initPosition\n     * @type {Vec3}\n     */\n    this.initPosition = new Vec3();\n\n    /**\n     * @property velocity\n     * @type {Vec3}\n     */\n    this.velocity = new Vec3();\n\n    if(options.velocity){\n        this.velocity.copy(options.velocity);\n    }\n\n    /**\n     * @property initVelocity\n     * @type {Vec3}\n     */\n    this.initVelocity = new Vec3();\n\n    /**\n     * Linear force on the body\n     * @property force\n     * @type {Vec3}\n     */\n    this.force = new Vec3();\n\n    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\n    /**\n     * @property mass\n     * @type {Number}\n     * @default 0\n     */\n    this.mass = mass;\n\n    /**\n     * @property invMass\n     * @type {Number}\n     */\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\n    /**\n     * @property material\n     * @type {Material}\n     */\n    this.material = options.material || null;\n\n    /**\n     * @property linearDamping\n     * @type {Number}\n     */\n    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\n    /**\n     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n     * @property type\n     * @type {Number}\n     */\n    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n    if(typeof(options.type) === typeof(Body.STATIC)){\n        this.type = options.type;\n    }\n\n    /**\n     * If true, the body will automatically fall to sleep.\n     * @property allowSleep\n     * @type {Boolean}\n     * @default true\n     */\n    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\n    /**\n     * Current sleep state.\n     * @property sleepState\n     * @type {Number}\n     */\n    this.sleepState = 0;\n\n    /**\n     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n     * @property sleepSpeedLimit\n     * @type {Number}\n     * @default 0.1\n     */\n    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\n    /**\n     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n     * @property sleepTimeLimit\n     * @type {Number}\n     * @default 1\n     */\n    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\n    this.timeLastSleepy = 0;\n\n    this._wakeUpAfterNarrowphase = false;\n\n\n    /**\n     * Rotational force on the body, around center of mass\n     * @property {Vec3} torque\n     */\n    this.torque = new Vec3();\n\n    /**\n     * Orientation of the body\n     * @property quaternion\n     * @type {Quaternion}\n     */\n    this.quaternion = new Quaternion();\n\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n\n    /**\n     * @property initQuaternion\n     * @type {Quaternion}\n     */\n    this.initQuaternion = new Quaternion();\n\n    /**\n     * @property angularVelocity\n     * @type {Vec3}\n     */\n    this.angularVelocity = new Vec3();\n\n    if(options.angularVelocity){\n        this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    /**\n     * @property initAngularVelocity\n     * @type {Vec3}\n     */\n    this.initAngularVelocity = new Vec3();\n\n    this.interpolatedPosition = new Vec3();\n    this.interpolatedQuaternion = new Quaternion();\n\n    /**\n     * @property shapes\n     * @type {array}\n     */\n    this.shapes = [];\n\n    /**\n     * @property shapeOffsets\n     * @type {array}\n     */\n    this.shapeOffsets = [];\n\n    /**\n     * @property shapeOrientations\n     * @type {array}\n     */\n    this.shapeOrientations = [];\n\n    /**\n     * @property inertia\n     * @type {Vec3}\n     */\n    this.inertia = new Vec3();\n\n    /**\n     * @property {Vec3} invInertia\n     */\n    this.invInertia = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorld\n     */\n    this.invInertiaWorld = new Mat3();\n\n    this.invMassSolve = 0;\n\n    /**\n     * @property {Vec3} invInertiaSolve\n     */\n    this.invInertiaSolve = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorldSolve\n     */\n    this.invInertiaWorldSolve = new Mat3();\n\n    /**\n     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n     * @property {Boolean} fixedRotation\n     * @default false\n     */\n    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\n    /**\n     * @property {Number} angularDamping\n     */\n    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\n    /**\n     * @property aabb\n     * @type {AABB}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * Indicates if the AABB needs to be updated before use.\n     * @property aabbNeedsUpdate\n     * @type {Boolean}\n     */\n    this.aabbNeedsUpdate = true;\n\n    this.wlambda = new Vec3();\n\n    if(options.shape){\n        this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n}\nBody.prototype = new EventTarget();\nBody.prototype.constructor = Body;\n\n/**\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n * @static\n * @property DYNAMIC\n * @type {Number}\n */\nBody.DYNAMIC = 1;\n\n/**\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n * @static\n * @property STATIC\n * @type {Number}\n */\nBody.STATIC = 2;\n\n/**\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n * @static\n * @property KINEMATIC\n * @type {Number}\n */\nBody.KINEMATIC = 4;\n\n\n\n/**\n * @static\n * @property AWAKE\n * @type {number}\n */\nBody.AWAKE = 0;\n\n/**\n * @static\n * @property SLEEPY\n * @type {number}\n */\nBody.SLEEPY = 1;\n\n/**\n * @static\n * @property SLEEPING\n * @type {number}\n */\nBody.SLEEPING = 2;\n\nBody.idCounter = 0;\n\n/**\n * Wake the body up.\n * @method wakeUp\n */\nBody.prototype.wakeUp = function(){\n    var s = this.sleepState;\n    this.sleepState = 0;\n    if(s === Body.SLEEPING){\n        this.dispatchEvent({type:\"wakeup\"});\n    }\n};\n\n/**\n * Force body sleep\n * @method sleep\n */\nBody.prototype.sleep = function(){\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0,0,0);\n    this.angularVelocity.set(0,0,0);\n};\n\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\n\nBody.sleepEvent = {\n    type: \"sleep\"\n};\n\n/**\n * Called every timestep to update internal sleep timer and change sleep state if needed.\n * @method sleepTick\n * @param {Number} time The world time in seconds\n */\nBody.prototype.sleepTick = function(time){\n    if(this.allowSleep){\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n            this.sleepState = Body.SLEEPY; // Sleepy\n            this.timeLastSleepy = time;\n            this.dispatchEvent(Body.sleepyEvent);\n        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n            this.wakeUp(); // Wake up\n        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n            this.sleep(); // Sleeping\n            this.dispatchEvent(Body.sleepEvent);\n        }\n    }\n};\n\n/**\n * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n * @method updateSolveMassProperties\n */\nBody.prototype.updateSolveMassProperties = function(){\n    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n    } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n};\n\n/**\n * Convert a world point to local body frame.\n * @method pointToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToLocalFrame = function(worldPoint,result){\n    var result = result || new Vec3();\n    worldPoint.vsub(this.position,result);\n    this.quaternion.conjugate().vmult(result,result);\n    return result;\n};\n\n/**\n * Convert a world vector to local body frame.\n * @method vectorToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToLocalFrame = function(worldVector, result){\n    var result = result || new Vec3();\n    this.quaternion.conjugate().vmult(worldVector,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method pointToWorldFrame\n * @param  {Vec3} localPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToWorldFrame = function(localPoint,result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localPoint,result);\n    result.vadd(this.position,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method vectorToWorldFrame\n * @param  {Vec3} localVector\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\n\n/**\n * Add a shape to the body with a local offset and orientation.\n * @method addShape\n * @param {Shape} shape\n * @param {Vec3} offset\n * @param {Quaternion} quaternion\n * @return {Body} The body object, for chainability.\n */\nBody.prototype.addShape = function(shape, _offset, _orientation){\n    var offset = new Vec3();\n    var orientation = new Quaternion();\n\n    if(_offset){\n        offset.copy(_offset);\n    }\n    if(_orientation){\n        orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n\n    this.aabbNeedsUpdate = true;\n\n    return this;\n};\n\n/**\n * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n * @method updateBoundingRadius\n */\nBody.prototype.updateBoundingRadius = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        N = shapes.length,\n        radius = 0;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].norm(),\n            r = shape.boundingSphereRadius;\n        if(offset + r > radius){\n            radius = offset + r;\n        }\n    }\n\n    this.boundingRadius = radius;\n};\n\nvar computeAABB_shapeAABB = new AABB();\n\n/**\n * Updates the .aabb\n * @method computeAABB\n * @todo rename to updateAABB()\n */\nBody.prototype.computeAABB = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        shapeOrientations = this.shapeOrientations,\n        N = shapes.length,\n        offset = tmpVec,\n        orientation = tmpQuat,\n        bodyQuat = this.quaternion,\n        aabb = this.aabb,\n        shapeAABB = computeAABB_shapeAABB;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n\n        // Get shape world quaternion\n        shapeOrientations[i].mult(bodyQuat, orientation);\n\n        // Get shape world position\n        orientation.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset);\n\n        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n        // vec2.add(offset, offset, this.position);\n\n        // Get shape AABB\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n        if(i === 0){\n            aabb.copy(shapeAABB);\n        } else {\n            aabb.extend(shapeAABB);\n        }\n    }\n\n    this.aabbNeedsUpdate = false;\n};\n\nvar uiw_m1 = new Mat3(),\n    uiw_m2 = new Mat3(),\n    uiw_m3 = new Mat3();\n\n/**\n * Update .inertiaWorld and .invInertiaWorld\n * @method updateInertiaWorld\n */\nBody.prototype.updateInertiaWorld = function(force){\n    var I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force) {\n        // If inertia M = s*I, where I is identity and s a scalar, then\n        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n        // where R is the rotation matrix.\n        // In other words, we don't have to transform the inertia if all\n        // inertia diagonal entries are equal.\n    } else {\n        var m1 = uiw_m1,\n            m2 = uiw_m2,\n            m3 = uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I,m1);\n        m1.mmult(m2,this.invInertiaWorld);\n        //m3.getTrace(this.invInertiaWorld);\n    }\n\n    /*\n    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n    */\n};\n\n/**\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n * @method applyForce\n * @param  {Vec3} force The amount of force to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyForce_r = new Vec3();\nvar Body_applyForce_rotForce = new Vec3();\nBody.prototype.applyForce = function(force,worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyForce_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced rotational force\n    var rotForce = Body_applyForce_rotForce;\n    r.cross(force,rotForce);\n\n    // Add linear force\n    this.force.vadd(force,this.force);\n\n    // Add rotational force\n    this.torque.vadd(rotForce,this.torque);\n};\n\n/**\n * Apply force to a local point in the body.\n * @method applyLocalForce\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_worldPoint = new Vec3();\nBody.prototype.applyLocalForce = function(localForce, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldForce = Body_applyLocalForce_worldForce;\n    var worldPoint = Body_applyLocalForce_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyForce(worldForce, worldPoint);\n};\n\n/**\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n * @method applyImpulse\n * @param  {Vec3} impulse The amount of impulse to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyImpulse_r = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nBody.prototype.applyImpulse = function(impulse, worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyImpulse_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced central impulse velocity\n    var velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.mult(this.invMass,velo);\n\n    // Add linear impulse\n    this.velocity.vadd(velo, this.velocity);\n\n    // Compute produced rotational impulse velocity\n    var rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse,rotVelo);\n\n    /*\n    rotVelo.x *= this.invInertia.x;\n    rotVelo.y *= this.invInertia.y;\n    rotVelo.z *= this.invInertia.z;\n    */\n    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\n    // Add rotational Impulse\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n};\n\n/**\n * Apply locally-defined impulse to a local point in the body.\n * @method applyLocalImpulse\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_worldPoint = new Vec3();\nBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyImpulse(worldImpulse, worldPoint);\n};\n\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Should be called whenever you change the body shape or mass.\n * @method updateMassProperties\n */\nBody.prototype.updateMassProperties = function(){\n    var halfExtents = Body_updateMassProperties_halfExtents;\n\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    var I = this.inertia;\n    var fixed = this.fixedRotation;\n\n    // Approximate with AABB box\n    this.computeAABB();\n    halfExtents.set(\n        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n    );\n    Box.calculateInertia(halfExtents, this.mass, I);\n\n    this.invInertia.set(\n        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n        I.z > 0 && !fixed ? 1.0 / I.z : 0\n    );\n    this.updateInertiaWorld(true);\n};\n\n/**\n * Get world velocity of a point in the body.\n * @method getVelocityAtWorldPoint\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3} The result vector.\n */\nBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n    var r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n};\n\n},{\"../collision/AABB\":3,\"../material/Material\":25,\"../math/Mat3\":27,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Shape\":43,\"../utils/EventTarget\":49}],32:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Ray = _dereq_('../collision/Ray');\nvar WheelInfo = _dereq_('../objects/WheelInfo');\n\nmodule.exports = RaycastVehicle;\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n * @class RaycastVehicle\n * @constructor\n * @param {object} [options]\n * @param {Body} [options.chassisBody] The car chassis body.\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n * @param {integer} [options.indexLeftAxis]\n * @param {integer} [options.indexUpAxis]\n */\nfunction RaycastVehicle(options){\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    /**\n     * An array of WheelInfo objects.\n     * @property {array} wheelInfos\n     */\n    this.wheelInfos = [];\n\n    /**\n     * Will be set to true if the car is sliding.\n     * @property {boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * @property {World} world\n     */\n    this.world = null;\n\n    /**\n     * Index of the right axis, 0=x, 1=y, 2=z\n     * @property {integer} indexRightAxis\n     * @default 1\n     */\n    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\n    /**\n     * Index of the forward axis, 0=x, 1=y, 2=z\n     * @property {integer} indexForwardAxis\n     * @default 0\n     */\n    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\n    /**\n     * Index of the up axis, 0=x, 1=y, 2=z\n     * @property {integer} indexUpAxis\n     * @default 2\n     */\n    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n}\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpVec3 = new Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nvar tmpRay = new Ray();\n\n/**\n * Add a wheel. For information about the options, see WheelInfo.\n * @method addWheel\n * @param {object} [options]\n */\nRaycastVehicle.prototype.addWheel = function(options){\n    options = options || {};\n\n    var info = new WheelInfo(options);\n    var index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n\n    return index;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    var wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method applyEngineForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n    this.wheelInfos[wheelIndex].engineForce = value;\n};\n\n/**\n * Set the braking force of a wheel\n * @method setBrake\n * @param {number} brake\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n    this.wheelInfos[wheelIndex].brake = brake;\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    world.add(this.chassisBody);\n    var that = this;\n    this.preStepCallback = function(){\n        that.updateVehicle(world.dt);\n    };\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n};\n\n/**\n * Get one of the wheel axles, world-oriented.\n * @private\n * @method getVehicleAxisWorld\n * @param  {integer} axisIndex\n * @param  {Vec3} result\n */\nRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n    result.set(\n        axisIndex === 0 ? 1 : 0,\n        axisIndex === 1 ? 1 : 0,\n        axisIndex === 2 ? 1 : 0\n    );\n    this.chassisBody.vectorToWorldFrame(result, result);\n};\n\nRaycastVehicle.prototype.updateVehicle = function(timeStep){\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n\n    for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\n    var forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0){\n        this.currentVehicleSpeedKmHour *= -1;\n    }\n\n    // simulate suspension\n    for (var i = 0; i < numWheels; i++) {\n        this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n\n    var impulse = new Vec3();\n    var relpos = new Vec3();\n    for (var i = 0; i < numWheels; i++) {\n        //apply suspension force\n        var wheel = wheelInfos[i];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n            suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n    }\n\n    this.updateFriction(timeStep);\n\n    var hitNormalWorldScaledWithProj = new Vec3();\n    var fwd  = new Vec3();\n    var vel = new Vec3();\n    for (i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        //var relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\n        // Hack to get the rotation in the correct direction\n        var m = 1;\n        switch(this.indexUpAxis){\n        case 1:\n            m = -1;\n            break;\n        }\n\n        if (wheel.isInContact) {\n\n            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\n            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\n            var proj2 = fwd.dot(vel);\n            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n        }\n\n        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n            // Apply custom rotation when accelerating and sliding\n            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n        }\n\n        // Lock wheels\n        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n            wheel.deltaRotation = 0;\n        }\n\n        wheel.rotation += wheel.deltaRotation; // Use the old value\n        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n};\n\nRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n    var chassisBody = this.chassisBody;\n    var chassisMass = chassisBody.mass;\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n\n    for (var w_it = 0; w_it < numWheels; w_it++){\n        var wheel = wheelInfos[w_it];\n\n        if (wheel.isInContact){\n            var force;\n\n            // Spring\n            var susp_length = wheel.suspensionRestLength;\n            var current_length = wheel.suspensionLength;\n            var length_diff = (susp_length - current_length);\n\n            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\n            // Damper\n            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n            var susp_damping;\n            if (projected_rel_vel < 0) {\n                susp_damping = wheel.dampingCompression;\n            } else {\n                susp_damping = wheel.dampingRelaxation;\n            }\n            force -= susp_damping * projected_rel_vel;\n\n            wheel.suspensionForce = force * chassisMass;\n            if (wheel.suspensionForce < 0) {\n                wheel.suspensionForce = 0;\n            }\n        } else {\n            wheel.suspensionForce = 0;\n        }\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    world.remove(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n};\n\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nRaycastVehicle.prototype.castRay = function(wheel) {\n    var rayvector = castRay_rayvector;\n    var target = castRay_target;\n\n    this.updateWheelTransformWorld(wheel);\n    var chassisBody = this.chassisBody;\n\n    var depth = -1;\n\n    var raylen = wheel.suspensionRestLength + wheel.radius;\n\n    wheel.directionWorld.scale(raylen, rayvector);\n    var source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    var raycastResult = wheel.raycastResult;\n\n    var param = 0;\n\n    raycastResult.reset();\n    // Turn off ray collision with the chassis temporarily\n    var oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n\n    // Cast ray against world\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n\n    var object = raycastResult.body;\n\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius;\n\n        // clamp on max suspension travel\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n            wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n            wheel.suspensionLength = maxSuspensionLength;\n            wheel.raycastResult.reset();\n        }\n\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\n        var chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\n        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\n        if (denominator >= -0.1) {\n            wheel.suspensionRelativeVelocity = 0;\n            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n            var inv = -1 / denominator;\n            wheel.suspensionRelativeVelocity = projVel * inv;\n            wheel.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n};\n\nRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n    wheel.isInContact = false;\n    var chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n};\n\n\n/**\n * Update one of the wheel transform.\n * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n * @method updateWheelTransform\n * @param {integer} wheelIndex The wheel index to update.\n */\nRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n    var up = tmpVec4;\n    var right = tmpVec5;\n    var fwd = tmpVec6;\n\n    var wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n\n    // Rotate around steering over the wheelAxle\n    var steering = wheel.steering;\n    var steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n\n    var rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\n    // World rotation of the wheel\n    var q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n\n    q.normalize();\n\n    // world position of the wheel\n    var p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n};\n\nvar directions = [\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\n\n/**\n * Get the world transform of one of the wheels\n * @method getWheelTransformWorld\n * @param  {integer} wheelIndex\n * @return {Transform}\n */\nRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n};\n\n\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nRaycastVehicle.prototype.updateFriction = function(timeStep) {\n    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\n    //calculate the impulse, so that the wheels don't move sidewards\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n    var forwardWS = updateFriction_forwardWS;\n    var axle = updateFriction_axle;\n\n    var numWheelsOnGround = 0;\n\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject){\n            numWheelsOnGround++;\n        }\n\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if(!forwardWS[i]){\n            forwardWS[i] = new Vec3();\n        }\n        if(!axle[i]){\n            axle[i] = new Vec3();\n        }\n    }\n\n    for (var i = 0; i < numWheels; i++){\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n\n        if (groundObject) {\n            var axlei = axle[i];\n            var wheelTrans = this.getWheelTransformWorld(i);\n\n            // Get world axle\n            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\n            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n            var proj = axlei.dot(surfNormalWS);\n            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n            axlei.normalize();\n\n            surfNormalWS.cross(axlei, forwardWS[i]);\n            forwardWS[i].normalize();\n\n            wheel.sideImpulse = resolveSingleBilateral(\n                chassisBody,\n                wheel.raycastResult.hitPointWorld,\n                groundObject,\n                wheel.raycastResult.hitPointWorld,\n                axlei\n            );\n\n            wheel.sideImpulse *= sideFrictionStiffness2;\n        }\n    }\n\n    var sideFactor = 1;\n    var fwdFactor = 0.5;\n\n    this.sliding = false;\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n\n        var rollingFriction = 0;\n\n        wheel.slipInfo = 1;\n        if (groundObject) {\n            var defaultRollingFrictionImpulse = 0;\n            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\n            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n            // rollingFriction = calcRollingFriction(contactPt);\n            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\n            rollingFriction += wheel.engineForce * timeStep;\n\n            // rollingFriction = 0;\n            var factor = maxImpulse / rollingFriction;\n            wheel.slipInfo *= factor;\n        }\n\n        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        wheel.forwardImpulse = 0;\n        wheel.skidInfo = 1;\n\n        if (groundObject) {\n            wheel.skidInfo = 1;\n\n            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n            var maximpSide = maximp;\n\n            var maximpSquared = maximp * maximpSide;\n\n            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\n            var x = wheel.forwardImpulse * fwdFactor;\n            var y = wheel.sideImpulse * sideFactor;\n\n            var impulseSquared = x * x + y * y;\n\n            wheel.sliding = false;\n            if (impulseSquared > maximpSquared) {\n                this.sliding = true;\n                wheel.sliding = true;\n\n                var factor = maximp / Math.sqrt(impulseSquared);\n\n                wheel.skidInfo *= factor;\n            }\n        }\n    }\n\n    if (this.sliding) {\n        for (var i = 0; i < numWheels; i++) {\n            var wheel = wheelInfos[i];\n            if (wheel.sideImpulse !== 0) {\n                if (wheel.skidInfo < 1){\n                    wheel.forwardImpulse *= wheel.skidInfo;\n                    wheel.sideImpulse *= wheel.skidInfo;\n                }\n            }\n        }\n    }\n\n    // apply the impulses\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var rel_pos = new Vec3();\n        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n        // cannons applyimpulse is using world coord for the position\n        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (wheel.forwardImpulse !== 0) {\n            var impulse = new Vec3();\n            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n            chassisBody.applyImpulse(impulse, rel_pos);\n        }\n\n        if (wheel.sideImpulse !== 0){\n            var groundObject = wheel.raycastResult.body;\n\n            var rel_pos2 = new Vec3();\n            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n            var sideImp = new Vec3();\n            axle[i].scale(wheel.sideImpulse, sideImp);\n\n            // Scale the relative position in the up direction with rollInfluence.\n            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n            chassisBody.applyImpulse(sideImp, rel_pos);\n\n            //apply friction impulse on the ground\n            sideImp.scale(-1, sideImp);\n            groundObject.applyImpulse(sideImp, rel_pos2);\n        }\n    }\n};\n\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n    var j1 = 0;\n    var contactPosWorld = frictionPosWorld;\n\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    var vel1 = calcRollingFriction_vel1;\n    var vel2 = calcRollingFriction_vel2;\n    var vel = calcRollingFriction_vel;\n    // contactPosWorld.vsub(body0.position, rel_pos1);\n    // contactPosWorld.vsub(body1.position, rel_pos2);\n\n    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n    vel1.vsub(vel2, vel);\n\n    var vrel = frictionDirectionWorld.dot(vel);\n\n    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n    var relaxation = 1;\n    var jacDiagABInv = relaxation / (denom0 + denom1);\n\n    // calculate j that moves us to zero relative velocity\n    j1 = -vrel * jacDiagABInv;\n\n    if (maxImpulse < j1) {\n        j1 = maxImpulse;\n    }\n    if (j1 < -maxImpulse) {\n        j1 = -maxImpulse;\n    }\n\n    return j1;\n}\n\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n    var r0 = computeImpulseDenominator_r0;\n    var c0 = computeImpulseDenominator_c0;\n    var vec = computeImpulseDenominator_vec;\n    var m = computeImpulseDenominator_m;\n\n    pos.vsub(body.position, r0);\n    r0.cross(normal, c0);\n    body.invInertiaWorld.vmult(c0, m);\n    m.cross(r0, vec);\n\n    return body.invMass + normal.dot(vec);\n}\n\n\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3();\n\n//bilateral constraint between two dynamic objects\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n    var normalLenSqr = normal.norm2();\n    if (normalLenSqr > 1.1){\n        return 0; // no impulse\n    }\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    // pos1.vsub(body1.position, rel_pos1);\n    // pos2.vsub(body2.position, rel_pos2);\n\n    var vel1 = resolveSingleBilateral_vel1;\n    var vel2 = resolveSingleBilateral_vel2;\n    var vel = resolveSingleBilateral_vel;\n    body1.getVelocityAtWorldPoint(pos1, vel1);\n    body2.getVelocityAtWorldPoint(pos2, vel2);\n\n    vel1.vsub(vel2, vel);\n\n    var rel_vel = normal.dot(vel);\n\n    var contactDamping = 0.2;\n    var massTerm = 1 / (body1.invMass + body2.invMass);\n    var impulse = - contactDamping * rel_vel * massTerm;\n\n    return impulse;\n}\n},{\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/WheelInfo\":36,\"./Body\":31}],33:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Sphere = _dereq_('../shapes/Sphere');\nvar Box = _dereq_('../shapes/Box');\nvar Vec3 = _dereq_('../math/Vec3');\nvar HingeConstraint = _dereq_('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.add(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n\n},{\"../constraints/HingeConstraint\":15,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Sphere\":44,\"./Body\":31}],34:[function(_dereq_,module,exports){\nmodule.exports = SPHSystem;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Particle = _dereq_('../shapes/Particle');\nvar Body = _dereq_('../objects/Body');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Particle\":41,\"../shapes/Shape\":43}],35:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n\n},{\"../math/Vec3\":30}],36:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = WheelInfo;\n\n/**\n * @class WheelInfo\n * @constructor\n * @param {Object} [options]\n *\n * @param {Vec3} [options.chassisConnectionPointLocal]\n * @param {Vec3} [options.chassisConnectionPointWorld]\n * @param {Vec3} [options.directionLocal]\n * @param {Vec3} [options.directionWorld]\n * @param {Vec3} [options.axleLocal]\n * @param {Vec3} [options.axleWorld]\n * @param {number} [options.suspensionRestLength=1]\n * @param {number} [options.suspensionMaxLength=2]\n * @param {number} [options.radius=1]\n * @param {number} [options.suspensionStiffness=100]\n * @param {number} [options.dampingCompression=10]\n * @param {number} [options.dampingRelaxation=10]\n * @param {number} [options.frictionSlip=10000]\n * @param {number} [options.steering=0]\n * @param {number} [options.rotation=0]\n * @param {number} [options.deltaRotation=0]\n * @param {number} [options.rollInfluence=0.01]\n * @param {number} [options.maxSuspensionForce]\n * @param {boolean} [options.isFrontWheel=true]\n * @param {number} [options.clippedInvContactDotSuspension=1]\n * @param {number} [options.suspensionRelativeVelocity=0]\n * @param {number} [options.suspensionForce=0]\n * @param {number} [options.skidInfo=0]\n * @param {number} [options.suspensionLength=0]\n * @param {number} [options.maxSuspensionTravel=1]\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n */\nfunction WheelInfo(options){\n    options = Utils.defaults(options, {\n        chassisConnectionPointLocal: new Vec3(),\n        chassisConnectionPointWorld: new Vec3(),\n        directionLocal: new Vec3(),\n        directionWorld: new Vec3(),\n        axleLocal: new Vec3(),\n        axleWorld: new Vec3(),\n        suspensionRestLength: 1,\n        suspensionMaxLength: 2,\n        radius: 1,\n        suspensionStiffness: 100,\n        dampingCompression: 10,\n        dampingRelaxation: 10,\n        frictionSlip: 10000,\n        steering: 0,\n        rotation: 0,\n        deltaRotation: 0,\n        rollInfluence: 0.01,\n        maxSuspensionForce: Number.MAX_VALUE,\n        isFrontWheel: true,\n        clippedInvContactDotSuspension: 1,\n        suspensionRelativeVelocity: 0,\n        suspensionForce: 0,\n        skidInfo: 0,\n        suspensionLength: 0,\n        maxSuspensionTravel: 1,\n        useCustomSlidingRotationalSpeed: false,\n        customSlidingRotationalSpeed: -0.1\n    });\n\n    /**\n     * Max travel distance of the suspension, in meters.\n     * @property {number} maxSuspensionTravel\n     */\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\n    /**\n     * Speed to apply to the wheel rotation when the wheel is sliding.\n     * @property {number} customSlidingRotationalSpeed\n     */\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\n    /**\n     * If the customSlidingRotationalSpeed should be used.\n     * @property {Boolean} useCustomSlidingRotationalSpeed\n     */\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\n    /**\n     * @property {Boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * Connection point, defined locally in the chassis body frame.\n     * @property {Vec3} chassisConnectionPointLocal\n     */\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\n    /**\n     * @property {Vec3} chassisConnectionPointWorld\n     */\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\n    /**\n     * @property {Vec3} directionLocal\n     */\n    this.directionLocal = options.directionLocal.clone();\n\n    /**\n     * @property {Vec3} directionWorld\n     */\n    this.directionWorld = options.directionWorld.clone();\n\n    /**\n     * @property {Vec3} axleLocal\n     */\n    this.axleLocal = options.axleLocal.clone();\n\n    /**\n     * @property {Vec3} axleWorld\n     */\n    this.axleWorld = options.axleWorld.clone();\n\n    /**\n     * @property {number} suspensionRestLength\n     */\n    this.suspensionRestLength = options.suspensionRestLength;\n\n    /**\n     * @property {number} suspensionMaxLength\n     */\n    this.suspensionMaxLength = options.suspensionMaxLength;\n\n    /**\n     * @property {number} radius\n     */\n    this.radius = options.radius;\n\n    /**\n     * @property {number} suspensionStiffness\n     */\n    this.suspensionStiffness = options.suspensionStiffness;\n\n    /**\n     * @property {number} dampingCompression\n     */\n    this.dampingCompression = options.dampingCompression;\n\n    /**\n     * @property {number} dampingRelaxation\n     */\n    this.dampingRelaxation = options.dampingRelaxation;\n\n    /**\n     * @property {number} frictionSlip\n     */\n    this.frictionSlip = options.frictionSlip;\n\n    /**\n     * @property {number} steering\n     */\n    this.steering = 0;\n\n    /**\n     * Rotation value, in radians.\n     * @property {number} rotation\n     */\n    this.rotation = 0;\n\n    /**\n     * @property {number} deltaRotation\n     */\n    this.deltaRotation = 0;\n\n    /**\n     * @property {number} rollInfluence\n     */\n    this.rollInfluence = options.rollInfluence;\n\n    /**\n     * @property {number} maxSuspensionForce\n     */\n    this.maxSuspensionForce = options.maxSuspensionForce;\n\n    /**\n     * @property {number} engineForce\n     */\n    this.engineForce = 0;\n\n    /**\n     * @property {number} brake\n     */\n    this.brake = 0;\n\n    /**\n     * @property {number} isFrontWheel\n     */\n    this.isFrontWheel = options.isFrontWheel;\n\n    /**\n     * @property {number} clippedInvContactDotSuspension\n     */\n    this.clippedInvContactDotSuspension = 1;\n\n    /**\n     * @property {number} suspensionRelativeVelocity\n     */\n    this.suspensionRelativeVelocity = 0;\n\n    /**\n     * @property {number} suspensionForce\n     */\n    this.suspensionForce = 0;\n\n    /**\n     * @property {number} skidInfo\n     */\n    this.skidInfo = 0;\n\n    /**\n     * @property {number} suspensionLength\n     */\n    this.suspensionLength = 0;\n\n    /**\n     * @property {number} sideImpulse\n     */\n    this.sideImpulse = 0;\n\n    /**\n     * @property {number} forwardImpulse\n     */\n    this.forwardImpulse = 0;\n\n    /**\n     * The result from raycasting\n     * @property {RaycastResult} raycastResult\n     */\n    this.raycastResult = new RaycastResult();\n\n    /**\n     * Wheel world transform\n     * @property {Transform} worldTransform\n     */\n    this.worldTransform = new Transform();\n\n    /**\n     * @property {boolean} isInContact\n     */\n    this.isInContact = false;\n}\n\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\nvar chassis_velocity_at_contactPoint = new Vec3();\nWheelInfo.prototype.updateWheel = function(chassis){\n    var raycastResult = this.raycastResult;\n\n    if (this.isInContact){\n        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n        if (project >= -0.1) {\n            this.suspensionRelativeVelocity = 0.0;\n            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n            var inv = -1 / project;\n            this.suspensionRelativeVelocity = projVel * inv;\n            this.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n    }\n};\n},{\"../collision/RaycastResult\":10,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Utils\":53}],37:[function(_dereq_,module,exports){\nmodule.exports = Box;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this);\n\n    this.type = Shape.types.BOX;\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n\n},{\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],38:[function(_dereq_,module,exports){\nmodule.exports = ConvexPolyhedron;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    var that = this;\n    Shape.call(this);\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"./Shape\":43}],39:[function(_dereq_,module,exports){\nmodule.exports = Cylinder;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\nfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n    var N = numSegments,\n        verts = [],\n        axes = [],\n        faces = [],\n        bottomface = [],\n        topface = [],\n        cos = Math.cos,\n        sin = Math.sin;\n\n    // First bottom point\n    verts.push(new Vec3(radiusBottom*cos(0),\n                               radiusBottom*sin(0),\n                               -height*0.5));\n    bottomface.push(0);\n\n    // First top point\n    verts.push(new Vec3(radiusTop*cos(0),\n                               radiusTop*sin(0),\n                               height*0.5));\n    topface.push(1);\n\n    for(var i=0; i<N; i++){\n        var theta = 2*Math.PI/N * (i+1);\n        var thetaN = 2*Math.PI/N * (i+0.5);\n        if(i<N-1){\n            // Bottom\n            verts.push(new Vec3(radiusBottom*cos(theta),\n                                       radiusBottom*sin(theta),\n                                       -height*0.5));\n            bottomface.push(2*i+2);\n            // Top\n            verts.push(new Vec3(radiusTop*cos(theta),\n                                       radiusTop*sin(theta),\n                                       height*0.5));\n            topface.push(2*i+3);\n\n            // Face\n            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n        } else {\n            faces.push([0,1, 2*i+1, 2*i]); // Connect\n        }\n\n        // Axis: we can cut off half of them if we have even number of segments\n        if(N % 2 === 1 || i < N / 2){\n            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n        }\n    }\n    faces.push(topface);\n    axes.push(new Vec3(0,0,1));\n\n    // Reorder bottom face\n    var temp = [];\n    for(var i=0; i<bottomface.length; i++){\n        temp.push(bottomface[bottomface.length - i - 1]);\n    }\n    faces.push(temp);\n\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n    ConvexPolyhedron.call( this, verts, faces, axes );\n}\n\nCylinder.prototype = new ConvexPolyhedron();\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],40:[function(_dereq_,module,exports){\nvar Shape = _dereq_('./Shape');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this);\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.type = Shape.types.HEIGHTFIELD;\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var idx = [];\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\n    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n    var minmax = [];\n    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\n    return (minmax[0] + minmax[1]) / 2; // average\n};\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53,\"./ConvexPolyhedron\":38,\"./Shape\":43}],41:[function(_dereq_,module,exports){\nmodule.exports = Particle;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Particle shape.\n * @class Particle\n * @constructor\n * @author schteppe\n * @extends Shape\n */\nfunction Particle(){\n    Shape.call(this);\n\n    this.type = Shape.types.PARTICLE;\n}\nParticle.prototype = new Shape();\nParticle.prototype.constructor = Particle;\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nParticle.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nParticle.prototype.volume = function(){\n    return 0;\n};\n\nParticle.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = 0;\n};\n\nParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],42:[function(_dereq_,module,exports){\nmodule.exports = Plane;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n * @class Plane\n * @constructor\n * @extends Shape\n * @author schteppe\n */\nfunction Plane(){\n    Shape.call(this);\n    this.type = Shape.types.PLANE;\n\n    // World oriented normal\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n\n    this.boundingSphereRadius = Number.MAX_VALUE;\n}\nPlane.prototype = new Shape();\nPlane.prototype.constructor = Plane;\n\nPlane.prototype.computeWorldNormal = function(quat){\n    var n = this.worldNormal;\n    n.set(0,0,1);\n    quat.vmult(n,n);\n    this.worldNormalNeedsUpdate = false;\n};\n\nPlane.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    return target;\n};\n\nPlane.prototype.volume = function(){\n    return Number.MAX_VALUE; // The plane is infinite...\n};\n\nvar tempNormal = new Vec3();\nPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0,0,1); // Default plane normal is z\n    quat.vmult(tempNormal,tempNormal);\n    var maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if(tempNormal.x === 1){ max.x = pos.x; }\n    if(tempNormal.y === 1){ max.y = pos.y; }\n    if(tempNormal.z === 1){ max.z = pos.z; }\n\n    if(tempNormal.x === -1){ min.x = pos.x; }\n    if(tempNormal.y === -1){ min.y = pos.y; }\n    if(tempNormal.z === -1){ min.z = pos.z; }\n};\n\nPlane.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = Number.MAX_VALUE;\n};\n},{\"../math/Vec3\":30,\"./Shape\":43}],43:[function(_dereq_,module,exports){\nmodule.exports = Shape;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @author schteppe\n * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n */\nfunction Shape(){\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = true;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n * @return {Number}\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @return {Vec3}\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Shape\":43}],44:[function(_dereq_,module,exports){\nmodule.exports = Sphere;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this);\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius!==undefined ? Number(radius) : 1.0;\n    this.type = Shape.types.SPHERE;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],45:[function(_dereq_,module,exports){\nmodule.exports = Trimesh;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar AABB = _dereq_('../collision/AABB');\nvar Octree = _dereq_('../utils/Octree');\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     var vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     var indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     var trimeshShape = new Trimesh(vertices, indices);\n */\nfunction Trimesh(vertices, indices) {\n    Shape.call(this);\n    this.type = Shape.types.TRIMESH;\n\n    /**\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = new Float32Array(vertices);\n\n    /**\n     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n     * @property indices\n     * @type {Array}\n     */\n    this.indices = new Int16Array(indices);\n\n    /**\n     * The normals data.\n     * @property normals\n     * @type {Array}\n     */\n    this.normals = new Float32Array(indices.length);\n\n    /**\n     * The local AABB of the mesh.\n     * @property aabb\n     * @type {Array}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * References to vertex pairs, making up all unique edges in the trimesh.\n     * @property {array} edges\n     */\n    this.edges = null;\n\n    /**\n     * Local scaling of the mesh. Use .setScale() to set it.\n     * @property {Vec3} scale\n     */\n    this.scale = new Vec3(1, 1, 1);\n\n    /**\n     * The indexed triangles. Use .updateTree() to update it.\n     * @property {Octree} tree\n     */\n    this.tree = new Octree();\n\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n}\nTrimesh.prototype = new Shape();\nTrimesh.prototype.constructor = Trimesh;\n\nvar computeNormals_n = new Vec3();\n\n/**\n * @method updateTree\n */\nTrimesh.prototype.updateTree = function(){\n    var tree = this.tree;\n\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n\n    // Insert all triangles\n    var triangleAABB = new AABB();\n    var a = new Vec3();\n    var b = new Vec3();\n    var c = new Vec3();\n    var points = [a, b, c];\n    for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n};\n\nvar unscaledAABB = new AABB();\n\n/**\n * Get triangles in a local AABB from the trimesh.\n * @method getTrianglesInAABB\n * @param  {AABB} aabb\n * @param  {array} result An array of integers, referencing the queried triangles.\n */\nTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n    unscaledAABB.copy(aabb);\n\n    // Scale it to local\n    var scale = this.scale;\n    var isx = scale.x;\n    var isy = scale.y;\n    var isz = scale.z;\n    var l = unscaledAABB.lowerBound;\n    var u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n\n    return this.tree.aabbQuery(unscaledAABB, result);\n};\n\n/**\n * @method setScale\n * @param {Vec3} scale\n */\nTrimesh.prototype.setScale = function(scale){\n    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n    var isUniform = scale.x === scale.y === scale.z;\n\n    if(!(wasUniform && isUniform)){\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n};\n\n/**\n * Compute the normals of the faces. Will save in the .normals array.\n * @method updateNormals\n */\nTrimesh.prototype.updateNormals = function(){\n    var n = computeNormals_n;\n\n    // Generate normals\n    var normals = this.normals;\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n\n        this.getVertex(a, va);\n        this.getVertex(b, vb);\n        this.getVertex(c, vc);\n\n        Trimesh.computeNormal(vb, va, vc, n);\n\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n    }\n};\n\n/**\n * Update the .edges property\n * @method updateEdges\n */\nTrimesh.prototype.updateEdges = function(){\n    var edges = {};\n    var add = function(indexA, indexB){\n        var key = a < b ? a + '_' + b : b + '_' + a;\n        edges[key] = true;\n    };\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n        add(a,b);\n        add(b,c);\n        add(c,a);\n    }\n    var keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (var i = 0; i < keys.length; i++) {\n        var indices = keys[i].split('_');\n        this.edges[2 * i] = parseInt(indices[0], 10);\n        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n};\n\n/**\n * Get an edge vertex\n * @method getEdgeVertex\n * @param  {number} edgeIndex\n * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n * @param  {Vec3} vertexStore Where to store the result\n */\nTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n};\n\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\n\n/**\n * Get a vector along an edge.\n * @method getEdgeVector\n * @param  {number} edgeIndex\n * @param  {Vec3} vectorStore\n */\nTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n    var va = getEdgeVector_va;\n    var vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nTrimesh.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\n\n/**\n * Get vertex i.\n * @method getVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getVertex = function(i, out){\n    var scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n};\n\n/**\n * Get raw vertex i\n * @private\n * @method _getUnscaledVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype._getUnscaledVertex = function(i, out){\n    var i3 = i * 3;\n    var vertices = this.vertices;\n    return out.set(\n        vertices[i3],\n        vertices[i3 + 1],\n        vertices[i3 + 2]\n    );\n};\n\n/**\n * Get a vertex from the trimesh,transformed by the given position and quaternion.\n * @method getWorldVertex\n * @param  {number} i\n * @param  {Vec3} pos\n * @param  {Quaternion} quat\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n};\n\n/**\n * Get the three vertices for triangle i.\n * @method getTriangleVertices\n * @param  {number} i\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n    var i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n};\n\n/**\n * Compute the normal of triangle i.\n * @method getNormal\n * @param  {Number} i\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.getNormal = function(i, target){\n    var i3 = i * 3;\n    return target.set(\n        this.normals[i3],\n        this.normals[i3 + 1],\n        this.normals[i3 + 2]\n    );\n};\n\nvar cli_aabb = new AABB();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n    );\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\n\n/**\n * Compute the local AABB for the trimesh\n * @method computeLocalAABB\n * @param  {AABB} aabb\n */\nTrimesh.prototype.computeLocalAABB = function(aabb){\n    var l = aabb.lowerBound,\n        u = aabb.upperBound,\n        n = this.vertices.length,\n        vertices = this.vertices,\n        v = computeLocalAABB_worldVert;\n\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for(var i=0; i !== n; i++){\n        this.getVertex(i, v);\n\n        if(v.x < l.x){\n            l.x = v.x;\n        } else if(v.x > u.x){\n            u.x = v.x;\n        }\n\n        if(v.y < l.y){\n            l.y = v.y;\n        } else if(v.y > u.y){\n            u.y = v.y;\n        }\n\n        if(v.z < l.z){\n            l.z = v.z;\n        } else if(v.z > u.z){\n            u.z = v.z;\n        }\n    }\n};\n\n\n/**\n * Update the .aabb property\n * @method updateAABB\n */\nTrimesh.prototype.updateAABB = function(){\n    this.computeLocalAABB(this.aabb);\n};\n\n/**\n * Will update the .boundingSphereRadius property\n * @method updateBoundingSphereRadius\n */\nTrimesh.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var vertices = this.vertices;\n    var v = new Vec3();\n    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    /*\n    var n = this.vertices.length / 3,\n        verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n\n    var v = tempWorldVertex;\n    for(var i=0; i<n; i++){\n        this.getVertex(i, v);\n        quat.vmult(v, v);\n        pos.vadd(v, v);\n        if (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n    */\n\n    // Faster approximation using local AABB\n    var frame = calculateWorldAABB_frame;\n    var result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n};\n\n/**\n * Get approximate volume\n * @method volume\n * @return {Number}\n */\nTrimesh.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\nTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n    radius = radius || 1;\n    tube = tube || 0.5;\n    radialSegments = radialSegments || 8;\n    tubularSegments = tubularSegments || 6;\n    arc = arc || Math.PI * 2;\n\n    var vertices = [];\n    var indices = [];\n\n    for ( var j = 0; j <= radialSegments; j ++ ) {\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n\n            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n            var z = tube * Math.sin( v );\n\n            vertices.push( x, y, z );\n        }\n    }\n\n    for ( var j = 1; j <= radialSegments; j ++ ) {\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\n            var a = ( tubularSegments + 1 ) * j + i - 1;\n            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( tubularSegments + 1 ) * j + i;\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return new Trimesh(vertices, indices);\n};\n\n},{\"../collision/AABB\":3,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Octree\":50,\"./Shape\":43}],46:[function(_dereq_,module,exports){\nmodule.exports = GSSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @class GSSolver\n * @constructor\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @author schteppe / https://github.com/schteppe\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n * @extends Solver\n */\nfunction GSSolver(){\n    Solver.call(this);\n\n    /**\n     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n     * @property iterations\n     * @type {Number}\n     * @todo write more about solver and iterations in the wiki\n     */\n    this.iterations = 10;\n\n    /**\n     * When tolerance is reached, the system is assumed to be converged.\n     * @property tolerance\n     * @type {Number}\n     */\n    this.tolerance = 1e-7;\n}\nGSSolver.prototype = new Solver();\n\nvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\nGSSolver.prototype.solve = function(dt,world){\n    var iter = 0,\n        maxIter = this.iterations,\n        tolSquared = this.tolerance*this.tolerance,\n        equations = this.equations,\n        Neq = equations.length,\n        bodies = world.bodies,\n        Nbodies = bodies.length,\n        h = dt,\n        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\n    // Update solve mass\n    if(Neq !== 0){\n        for(var i=0; i!==Nbodies; i++){\n            bodies[i].updateSolveMassProperties();\n        }\n    }\n\n    // Things that does not change during iteration can be computed once\n    var invCs = GSSolver_solve_invCs,\n        Bs = GSSolver_solve_Bs,\n        lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for(var i=0; i!==Neq; i++){\n        var c = equations[i];\n        lambda[i] = 0.0;\n        Bs[i] = c.computeB(h);\n        invCs[i] = 1.0 / c.computeC();\n    }\n\n    if(Neq !== 0){\n\n        // Reset vlambda\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                vlambda=b.vlambda,\n                wlambda=b.wlambda;\n            vlambda.set(0,0,0);\n            if(wlambda){\n                wlambda.set(0,0,0);\n            }\n        }\n\n        // Iterate over equations\n        for(iter=0; iter!==maxIter; iter++){\n\n            // Accumulate the total error for each iteration.\n            deltalambdaTot = 0.0;\n\n            for(var j=0; j!==Neq; j++){\n\n                var c = equations[j];\n\n                // Compute iteration\n                B = Bs[j];\n                invC = invCs[j];\n                lambdaj = lambda[j];\n                GWlambda = c.computeGWlambda();\n                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\n                // Clamp if we are not within the min/max interval\n                if(lambdaj + deltalambda < c.minForce){\n                    deltalambda = c.minForce - lambdaj;\n                } else if(lambdaj + deltalambda > c.maxForce){\n                    deltalambda = c.maxForce - lambdaj;\n                }\n                lambda[j] += deltalambda;\n\n                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n                c.addToWlambda(deltalambda);\n            }\n\n            // If the total error is small enough - stop iterate\n            if(deltalambdaTot*deltalambdaTot < tolSquared){\n                break;\n            }\n        }\n\n        // Add result to velocity\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                v=b.velocity,\n                w=b.angularVelocity;\n            v.vadd(b.vlambda, v);\n            if(w){\n                w.vadd(b.wlambda, w);\n            }\n        }\n    }\n\n    return iter;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Solver\":47}],47:[function(_dereq_,module,exports){\nmodule.exports = Solver;\n\n/**\n * Constraint equation solver base class.\n * @class Solver\n * @constructor\n * @author schteppe / https://github.com/schteppe\n */\nfunction Solver(){\n    /**\n     * All equations to be solved\n     * @property {Array} equations\n     */\n    this.equations = [];\n}\n\n/**\n * Should be implemented in subclasses!\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSolver.prototype.solve = function(dt,world){\n    // Should return the number of iterations done!\n    return 0;\n};\n\n/**\n * Add an equation\n * @method addEquation\n * @param {Equation} eq\n */\nSolver.prototype.addEquation = function(eq){\n    if (eq.enabled) {\n        this.equations.push(eq);\n    }\n};\n\n/**\n * Remove an equation\n * @method removeEquation\n * @param {Equation} eq\n */\nSolver.prototype.removeEquation = function(eq){\n    var eqs = this.equations;\n    var i = eqs.indexOf(eq);\n    if(i !== -1){\n        eqs.splice(i,1);\n    }\n};\n\n/**\n * Add all equations\n * @method removeAllEquations\n */\nSolver.prototype.removeAllEquations = function(){\n    this.equations.length = 0;\n};\n\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports = SplitSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\nvar Body = _dereq_('../objects/Body');\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n * @class SplitSolver\n * @constructor\n * @extends Solver\n * @param {Solver} subsolver\n */\nfunction SplitSolver(subsolver){\n    Solver.call(this);\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n\n    // Create needed nodes, reuse if possible\n    while(this.nodePool.length < 128){\n        this.nodePool.push(this.createNode());\n    }\n}\nSplitSolver.prototype = new Solver();\n\n// Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\nvar SplitSolver_solve_nodePool = []; // All allocated node objects\nvar SplitSolver_solve_eqs = [];   // Temp array\nvar SplitSolver_solve_bds = [];   // Temp array\nvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes){\n    var Nnodes = nodes.length;\n    for(var i=0; i!==Nnodes; i++){\n        var node = nodes[i];\n        if(!node.visited && !(node.body.type & STATIC)){\n            return node;\n        }\n    }\n    return false;\n}\n\nvar queue = [];\nfunction bfs(root,visitFunc,bds,eqs){\n    queue.push(root);\n    root.visited = true;\n    visitFunc(root,bds,eqs);\n    while(queue.length) {\n        var node = queue.pop();\n        // Loop over unvisited child nodes\n        var child;\n        while((child = getUnvisitedNode(node.children))) {\n            child.visited = true;\n            visitFunc(child,bds,eqs);\n            queue.push(child);\n        }\n    }\n}\n\nfunction visitFunc(node,bds,eqs){\n    bds.push(node.body);\n    var Neqs = node.eqs.length;\n    for(var i=0; i!==Neqs; i++){\n        var eq = node.eqs[i];\n        if(eqs.indexOf(eq) === -1){\n            eqs.push(eq);\n        }\n    }\n}\n\nSplitSolver.prototype.createNode = function(){\n    return { body:null, children:[], eqs:[], visited:false };\n};\n\n/**\n * Solve the subsystems\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSplitSolver.prototype.solve = function(dt,world){\n    var nodes=SplitSolver_solve_nodes,\n        nodePool=this.nodePool,\n        bodies=world.bodies,\n        equations=this.equations,\n        Neq=equations.length,\n        Nbodies=bodies.length,\n        subsolver=this.subsolver;\n\n    // Create needed nodes, reuse if possible\n    while(nodePool.length < Nbodies){\n        nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n    }\n\n    // Reset node values\n    for(var i=0; i!==Nbodies; i++){\n        var node = nodes[i];\n        node.body = bodies[i];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n    }\n    for(var k=0; k!==Neq; k++){\n        var eq=equations[k],\n            i=bodies.indexOf(eq.bi),\n            j=bodies.indexOf(eq.bj),\n            ni=nodes[i],\n            nj=nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n    }\n\n    var child, n=0, eqs=SplitSolver_solve_eqs;\n\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n\n    var dummyWorld = SplitSolver_solve_dummyWorld;\n    while((child = getUnvisitedNode(nodes))){\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\n        var Neqs = eqs.length;\n\n        eqs = eqs.sort(sortById);\n\n        for(var i=0; i!==Neqs; i++){\n            subsolver.addEquation(eqs[i]);\n        }\n\n        var iter = subsolver.solve(dt,dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n    }\n\n    return n;\n};\n\nfunction sortById(a, b){\n    return b.id - a.id;\n}\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"./Solver\":47}],49:[function(_dereq_,module,exports){\n/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n\n},{}],50:[function(_dereq_,module,exports){\nvar AABB = _dereq_('../collision/AABB');\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Octree;\n\n/**\n * @class OctreeNode\n * @param {object} [options]\n * @param {Octree} [options.root]\n * @param {AABB} [options.aabb]\n */\nfunction OctreeNode(options){\n    options = options || {};\n\n    /**\n     * The root node\n     * @property {OctreeNode} root\n     */\n    this.root = options.root || null;\n\n    /**\n     * Boundary of this node\n     * @property {AABB} aabb\n     */\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\n    /**\n     * Contained data at the current node level.\n     * @property {Array} data\n     */\n    this.data = [];\n\n    /**\n     * Children to this node\n     * @property {Array} children\n     */\n    this.children = [];\n}\n\n/**\n * @class Octree\n * @param {AABB} aabb The total AABB of the tree\n * @param {object} [options]\n * @param {number} [options.maxDepth=8]\n * @extends OctreeNode\n */\nfunction Octree(aabb, options){\n    options = options || {};\n    options.root = null;\n    options.aabb = aabb;\n    OctreeNode.call(this, options);\n\n    /**\n     * Maximum subdivision depth\n     * @property {number} maxDepth\n     */\n    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n}\nOctree.prototype = new OctreeNode();\n\nOctreeNode.prototype.reset = function(aabb, options){\n    this.children.length = this.data.length = 0;\n};\n\n/**\n * Insert data into this node\n * @method insert\n * @param  {AABB} aabb\n * @param  {object} elementData\n * @return {boolean} True if successful, otherwise false\n */\nOctreeNode.prototype.insert = function(aabb, elementData, level){\n    var nodeData = this.data;\n    level = level || 0;\n\n    // Ignore objects that do not belong in this node\n    if (!this.aabb.contains(aabb)){\n        return false; // object cannot be added\n    }\n\n    var children = this.children;\n\n    if(level < (this.maxDepth || this.root.maxDepth)){\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length){\n            this.subdivide();\n            subdivided = true;\n        }\n\n        // add to whichever node will accept it\n        for (var i = 0; i !== 8; i++) {\n            if (children[i].insert(aabb, elementData, level + 1)){\n                return true;\n            }\n        }\n\n        if(subdivided){\n            // No children accepted! Might as well just remove em since they contain none\n            children.length = 0;\n        }\n    }\n\n    // Too deep, or children didnt want it. add it in current node\n    nodeData.push(elementData);\n\n    return true;\n};\n\nvar halfDiagonal = new Vec3();\n\n/**\n * Create 8 equally sized children nodes and put them in the .children array.\n * @method subdivide\n */\nOctreeNode.prototype.subdivide = function() {\n    var aabb = this.aabb;\n    var l = aabb.lowerBound;\n    var u = aabb.upperBound;\n\n    var children = this.children;\n\n    children.push(\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n    );\n\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n\n    var root = this.root || this;\n\n    for (var i = 0; i !== 8; i++) {\n        var child = children[i];\n\n        // Set current node as root\n        child.root = root;\n\n        // Compute bounds\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n\n        lowerBound.vadd(l, lowerBound);\n\n        // Upper bound is always lower bound + halfDiagonal\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n};\n\n/**\n * Get all data, potentially within an AABB\n * @method aabbQuery\n * @param  {AABB} aabb\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\n    var nodeData = this.data;\n\n    // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n    var children = this.children;\n\n\n    // for (var i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)){\n            Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Get all data, potentially intersected by a ray.\n * @method rayQuery\n * @param  {Ray} ray\n * @param  {Transform} treeTransform\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n\n    return result;\n};\n\n/**\n * @method removeEmptyNodes\n */\nOctreeNode.prototype.removeEmptyNodes = function() {\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            if(!node.children[i].data.length){\n                node.children.splice(i, 1);\n            }\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../math/Vec3\":30}],51:[function(_dereq_,module,exports){\nmodule.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n},{}],52:[function(_dereq_,module,exports){\nmodule.exports = TupleDictionary;\n\n/**\n * @class TupleDictionary\n * @constructor\n */\nfunction TupleDictionary() {\n\n    /**\n     * The data storage\n     * @property data\n     * @type {Object}\n     */\n    this.data = { keys:[] };\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nTupleDictionary.prototype.get = function(i, j) {\n    if (i > j) {\n        // swap\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    return this.data[i+'-'+j];\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nTupleDictionary.prototype.set = function(i, j, value) {\n    if (i > j) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    var key = i+'-'+j;\n\n    // Check if key already exists\n    if(!this.get(i,j)){\n        this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n};\n\n/**\n * @method reset\n */\nTupleDictionary.prototype.reset = function() {\n    var data = this.data,\n        keys = data.keys;\n    while(keys.length > 0){\n        var key = keys.pop();\n        delete data[key];\n    }\n};\n\n},{}],53:[function(_dereq_,module,exports){\nfunction Utils(){}\n\nmodule.exports = Utils;\n\n/**\n * Extend an options object with default values.\n * @static\n * @method defaults\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n * @param  {object} defaults An object containing default values.\n * @return {object} The modified options object.\n */\nUtils.defaults = function(options, defaults){\n    options = options || {};\n\n    for(var key in defaults){\n        if(!(key in options)){\n            options[key] = defaults[key];\n        }\n    }\n\n    return options;\n};\n\n},{}],54:[function(_dereq_,module,exports){\nmodule.exports = Vec3Pool;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Pool = _dereq_('./Pool');\n\n/**\n * @class Vec3Pool\n * @constructor\n * @extends Pool\n */\nfunction Vec3Pool(){\n    Pool.call(this);\n    this.type = Vec3;\n}\nVec3Pool.prototype = new Pool();\n\n/**\n * Construct a vector\n * @method constructObject\n * @return {Vec3}\n */\nVec3Pool.prototype.constructObject = function(){\n    return new Vec3();\n};\n\n},{\"../math/Vec3\":30,\"./Pool\":51}],55:[function(_dereq_,module,exports){\nmodule.exports = Narrowphase;\n\nvar AABB = _dereq_('../collision/AABB');\nvar Shape = _dereq_('../shapes/Shape');\nvar Ray = _dereq_('../collision/Ray');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('../solver/Solver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @class Narrowphase\n * @constructor\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo  should move methods to prototype\n */\nfunction Narrowphase(world){\n\n    /**\n     * Internal storage of pooled contact points.\n     * @property {Array} contactPointPool\n     */\n    this.contactPointPool = [];\n\n    this.frictionEquationPool = [];\n\n    this.result = [];\n    this.frictionResult = [];\n\n    /**\n     * Pooled vectors.\n     * @property {Vec3Pool} v3pool\n     */\n    this.v3pool = new Vec3Pool();\n\n    this.world = world;\n    this.currentContactMaterial = null;\n\n    /**\n     * @property {Boolean} enableFrictionReduction\n     */\n    this.enableFrictionReduction = false;\n}\n\n/**\n * Make a contact object, by using the internal pool or creating a new one.\n * @method createContactEquation\n * @return {ContactEquation}\n */\nNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n    var c;\n    if(this.contactPointPool.length){\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n    } else {\n        c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n    var cm = this.currentContactMaterial;\n\n    c.restitution = cm.restitution;\n\n    c.setSpookParams(\n        cm.contactEquationStiffness,\n        cm.contactEquationRelaxation,\n        this.world.dt\n    );\n\n    var matA = si.material || bi.material;\n    var matB = sj.material || bj.material;\n    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n        c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = rsi || si;\n    c.sj = rsj || sj;\n\n    return c;\n};\n\nNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n    var bodyA = contactEquation.bi;\n    var bodyB = contactEquation.bj;\n    var shapeA = contactEquation.si;\n    var shapeB = contactEquation.sj;\n\n    var world = this.world;\n    var cm = this.currentContactMaterial;\n\n    // If friction or restitution were specified in the material, use them\n    var friction = cm.friction;\n    var matA = shapeA.material || bodyA.material;\n    var matB = shapeB.material || bodyB.material;\n    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n        friction = matA.friction * matB.friction;\n    }\n\n    if(friction > 0){\n\n        // Create 2 tangent equations\n        var mug = friction * world.gravity.length();\n        var reducedMass = (bodyA.invMass + bodyB.invMass);\n        if(reducedMass > 0){\n            reducedMass = 1/reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug*reducedMass;\n        c1.maxForce = c2.maxForce = mug*reducedMass;\n\n        // Copy over the relative vectors\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj);\n\n        // Construct tangents\n        contactEquation.ni.tangents(c1.t, c2.t);\n\n        // Set spook params\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\n        c1.enabled = c2.enabled = contactEquation.enabled;\n\n        outArray.push(c1, c2);\n\n        return true;\n    }\n\n    return false;\n};\n\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\n\n// Take the average N latest contact point on the plane.\nNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n    // The last contactEquation\n    var c = this.result[this.result.length - 1];\n\n    // Create the result: two \"average\" friction equations\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n    }\n\n    var f1 = this.frictionResult[this.frictionResult.length - 2];\n    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n\n    var bodyA = c.bi;\n    var bodyB = c.bj;\n    for(var i=0; i!==numContacts; i++){\n        c = this.result[this.result.length - 1 - i];\n        if(c.bodyA !== bodyA){\n            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n    }\n\n    var invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n    f2.ri.copy(f1.ri); // Should be the same\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n    // return eq;\n};\n\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\n\n/**\n * Generate all contacts between a list of body pairs\n * @method getContacts\n * @param {array} p1 Array of body indices\n * @param {array} p2 Array of body indices\n * @param {World} world\n * @param {array} result Array to store generated contacts\n * @param {array} oldcontacts Optional. Array of reusable contact objects\n */\nNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n\n    var qi = tmpQuat1;\n    var qj = tmpQuat2;\n    var xi = tmpVec1;\n    var xj = tmpVec2;\n\n    for(var k=0, N=p1.length; k!==N; k++){\n\n        // Get current collision bodies\n        var bi = p1[k],\n            bj = p2[k];\n\n        // Get contact material\n        var bodyContactMaterial = null;\n        if(bi.material && bj.material){\n            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n        }\n\n        for (var i = 0; i < bi.shapes.length; i++) {\n            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n            xi.vadd(bi.position, xi);\n            var si = bi.shapes[i];\n\n            for (var j = 0; j < bj.shapes.length; j++) {\n\n                // Compute world transform of shapes\n                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n                xj.vadd(bj.position, xj);\n                var sj = bj.shapes[j];\n\n                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n                    continue;\n                }\n\n                // Get collision material\n                var shapeContactMaterial = null;\n                if(si.material && sj.material){\n                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n                }\n\n                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\n                // Get contacts\n                var resolver = this[si.type | sj.type];\n                if(resolver){\n                    if (si.type < sj.type) {\n                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n                    } else {\n                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n                    }\n                }\n            }\n        }\n    }\n};\n\nvar numWarnings = 0;\nvar maxWarnings = 10;\n\nfunction warn(msg){\n    if(numWarnings > maxWarnings){\n        return;\n    }\n\n    numWarnings++;\n\n    console.warn(msg);\n}\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\nNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\nNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\n/**\n * @method sphereSphere\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE] =\nNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have only one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    xj.vsub(xi, r.ni);\n    r.ni.normalize();\n\n    // Contact point locations\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.mult(si.radius, r.ri);\n    r.rj.mult(-sj.radius, r.rj);\n\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n\n    this.result.push(r);\n\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n};\n\n/**\n * @method planeTrimesh\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\nNarrowphase.prototype.planeTrimesh = function(\n    planeShape,\n    trimeshShape,\n    planePos,\n    trimeshPos,\n    planeQuat,\n    trimeshQuat,\n    planeBody,\n    trimeshBody\n){\n    // Make contacts!\n    var v = new Vec3();\n\n    var normal = planeTrimesh_normal;\n    normal.set(0,0,1);\n    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\n    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v);\n\n        // Safe up\n        var v2 = new Vec3();\n        v2.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n        // Check plane side\n        var relpos = planeTrimesh_relpos;\n        v.vsub(planePos, relpos);\n        var dot = normal.dot(relpos);\n\n        if(dot <= 0.0){\n            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\n            r.ni.copy(normal); // Contact normal is the plane normal\n\n            // Get vertex position projected on plane\n            var projected = planeTrimesh_projected;\n            normal.scale(relpos.dot(normal), projected);\n            v.vsub(projected,projected);\n\n            // ri is the projected world position minus plane position\n            r.ri.copy(projected);\n            r.ri.vsub(planeBody.position, r.ri);\n\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj);\n\n            // Store result\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n};\n\n/**\n * @method sphereTrimesh\n * @param  {Shape}      sphereShape\n * @param  {Shape}      trimeshShape\n * @param  {Vec3}       spherePos\n * @param  {Vec3}       trimeshPos\n * @param  {Quaternion} sphereQuat\n * @param  {Quaternion} trimeshQuat\n * @param  {Body}       sphereBody\n * @param  {Body}       trimeshBody\n */\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nvar sphereTrimesh_projected = new Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\nNarrowphase.prototype.sphereTrimesh = function (\n    sphereShape,\n    trimeshShape,\n    spherePos,\n    trimeshPos,\n    sphereQuat,\n    trimeshQuat,\n    sphereBody,\n    trimeshBody\n) {\n\n    var edgeVertexA = sphereTrimesh_edgeVertexA;\n    var edgeVertexB = sphereTrimesh_edgeVertexB;\n    var edgeVector = sphereTrimesh_edgeVector;\n    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    var localSpherePos = sphereTrimesh_localSpherePos;\n    var tmp = sphereTrimesh_tmp;\n    var localSphereAABB = sphereTrimesh_localSphereAABB;\n    var v2 = sphereTrimesh_v2;\n    var relpos = sphereTrimesh_relpos;\n    var triangles = sphereTrimesh_triangles;\n\n    // Convert sphere position to local in the trimesh\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\n    // Get the aabb of the sphere locally in the trimesh\n    var sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(\n        localSpherePos.x - sphereRadius,\n        localSpherePos.y - sphereRadius,\n        localSpherePos.z - sphereRadius\n    );\n    localSphereAABB.upperBound.set(\n        localSpherePos.x + sphereRadius,\n        localSpherePos.y + sphereRadius,\n        localSpherePos.z + sphereRadius\n    );\n\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\n    // Vertices\n    var v = sphereTrimesh_v;\n    var radiusSquared = sphereShape.radius * sphereShape.radius;\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\n            // Check vertex overlap in sphere\n            v.vsub(localSpherePos, relpos);\n\n            if(relpos.norm2() <= radiusSquared){\n\n                // Safe up\n                v2.copy(v);\n                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n                v.vsub(spherePos, relpos);\n\n                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n                r.ni.copy(relpos);\n                r.ni.normalize();\n\n                // ri is the vector from sphere center to the sphere surface\n                r.ri.copy(r.ni);\n                r.ri.scale(sphereShape.radius, r.ri);\n                r.ri.vadd(spherePos, r.ri);\n                r.ri.vsub(sphereBody.position, r.ri);\n\n                r.rj.copy(v);\n                r.rj.vsub(trimeshBody.position, r.rj);\n\n                // Store result\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    // Check all edges\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\n            // Project sphere position to the edge\n            localSpherePos.vsub(edgeVertexB, tmp);\n            var positionAlongEdgeB = tmp.dot(edgeVector);\n\n            localSpherePos.vsub(edgeVertexA, tmp);\n            var positionAlongEdgeA = tmp.dot(edgeVector);\n\n            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\n                // Now check the orthogonal distance from edge to sphere center\n                localSpherePos.vsub(edgeVertexA, tmp);\n\n                edgeVectorUnit.copy(edgeVector);\n                edgeVectorUnit.normalize();\n                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\n                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n                tmp.vadd(edgeVertexA, tmp);\n\n                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n                var dist = tmp.distanceTo(localSpherePos);\n                if(dist < sphereShape.radius){\n                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n                    tmp.vsub(localSpherePos, r.ni);\n                    r.ni.normalize();\n                    r.ni.scale(sphereShape.radius, r.ri);\n\n                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n                    tmp.vsub(trimeshBody.position, r.rj);\n\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n\n    // Triangle faces\n    var va = sphereTrimesh_va;\n    var vb = sphereTrimesh_vb;\n    var vc = sphereTrimesh_vc;\n    var normal = sphereTrimesh_normal;\n    for(var i=0, N = triangles.length; i !== N; i++){\n        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n        trimeshShape.getNormal(triangles[i], normal);\n        localSpherePos.vsub(va, tmp);\n        var dist = tmp.dot(normal);\n        normal.scale(dist, tmp);\n        localSpherePos.vsub(tmp, tmp);\n\n        // tmp is now the sphere position projected to the triangle plane\n        dist = tmp.distanceTo(localSpherePos);\n        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n\n    triangles.length = 0;\n};\n\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3();\n\n/**\n * @method spherePlane\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\nNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    r.ni.set(0,0,1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n    r.ni.normalize(); // Needed?\n\n    // Vector from sphere center to contact point\n    r.ni.mult(si.radius, r.ri);\n\n    // Project down sphere on plane\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\n    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\n        // Make it relative to the body\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p){\n    var positiveResult = null;\n    var N = verts.length;\n    for(var i=0; i!==N; i++){\n        var v = verts[i];\n\n        // Get edge to the next vertex\n        var edge = pointInPolygon_edge;\n        verts[(i+1) % (N)].vsub(v,edge);\n\n        // Get cross product between polygon normal and the edge\n        var edge_x_normal = pointInPolygon_edge_x_normal;\n        //var edge_x_normal = new Vec3();\n        edge.cross(normal,edge_x_normal);\n\n        // Get vector between point and current vertex\n        var vertex_to_p = pointInPolygon_vtp;\n        p.vsub(v,vertex_to_p);\n\n        // This dot product determines which side of the edge the point is\n        var r = edge_x_normal.dot(vertex_to_p);\n\n        // If all such dot products have same sign, we are inside the polygon.\n        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n            if(positiveResult===null){\n                positiveResult = r>0;\n            }\n            continue;\n        } else {\n            return false; // Encountered some other sign. Exit.\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return true;\n}\n\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\n\n/**\n * @method sphereBox\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\nNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n\n    // we refer to the box as body j\n    var sides = sphereBox_sides;\n    xi.vsub(xj,box_to_sphere);\n    sj.getSideNormals(sides,qj);\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // Check side (plane) intersections\n    var found = false;\n\n    // Store the resulting side penetration info\n    var side_ns = sphereBox_side_ns;\n    var side_ns1 = sphereBox_side_ns1;\n    var side_ns2 = sphereBox_side_ns2;\n    var side_h = null;\n    var side_penetrations = 0;\n    var side_dot1 = 0;\n    var side_dot2 = 0;\n    var side_distance = null;\n    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n\n        var h = ns.norm();\n        ns.normalize();\n\n        // The normal/distance dot product tells which side of the plane we are\n        var dot = box_to_sphere.dot(ns);\n\n        if(dot<h+R && dot>0){\n            // Intersects plane. Now check the other two dimensions\n            var ns1 = sphereBox_ns1;\n            var ns2 = sphereBox_ns2;\n            ns1.copy(sides[(idx+1)%3]);\n            ns2.copy(sides[(idx+2)%3]);\n            var h1 = ns1.norm();\n            var h2 = ns2.norm();\n            ns1.normalize();\n            ns2.normalize();\n            var dot1 = box_to_sphere.dot(ns1);\n            var dot2 = box_to_sphere.dot(ns2);\n            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n                var dist = Math.abs(dot-h-R);\n                if(side_distance===null || dist < side_distance){\n                    side_distance = dist;\n                    side_dot1 = dot1;\n                    side_dot2 = dot2;\n                    side_h = h;\n                    side_ns.copy(ns);\n                    side_ns1.copy(ns1);\n                    side_ns2.copy(ns2);\n                    side_penetrations++;\n                }\n            }\n        }\n    }\n    if(side_penetrations){\n        found = true;\n        var r = this.createContactEquation(bi,bj,si,sj);\n        side_ns.mult(-R,r.ri); // Sphere r\n        r.ni.copy(side_ns);\n        r.ni.negate(r.ni); // Normal should be out of sphere\n        side_ns.mult(side_h,side_ns);\n        side_ns1.mult(side_dot1,side_ns1);\n        side_ns.vadd(side_ns1,side_ns);\n        side_ns2.mult(side_dot2,side_ns2);\n        side_ns.vadd(side_ns2,r.rj);\n\n        // Make relative to bodies\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n\n    // Check corners\n    var rj = v3pool.get();\n    var sphere_to_corner = sphereBox_sphere_to_corner;\n    for(var j=0; j!==2 && !found; j++){\n        for(var k=0; k!==2 && !found; k++){\n            for(var l=0; l!==2 && !found; l++){\n                rj.set(0,0,0);\n                if(j){\n                    rj.vadd(sides[0],rj);\n                } else {\n                    rj.vsub(sides[0],rj);\n                }\n                if(k){\n                    rj.vadd(sides[1],rj);\n                } else {\n                    rj.vsub(sides[1],rj);\n                }\n                if(l){\n                    rj.vadd(sides[2],rj);\n                } else {\n                    rj.vsub(sides[2],rj);\n                }\n\n                // World position of corner\n                xj.vadd(rj,sphere_to_corner);\n                sphere_to_corner.vsub(xi,sphere_to_corner);\n\n                if(sphere_to_corner.norm2() < R*R){\n                    found = true;\n                    var r = this.createContactEquation(bi,bj,si,sj);\n                    r.ri.copy(sphere_to_corner);\n                    r.ri.normalize();\n                    r.ni.copy(r.ri);\n                    r.ri.mult(R,r.ri);\n                    r.rj.copy(rj);\n\n                    // Make relative to bodies\n                    r.ri.vadd(xi, r.ri);\n                    r.ri.vsub(bi.position, r.ri);\n                    r.rj.vadd(xj, r.rj);\n                    r.rj.vsub(bj.position, r.rj);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(rj);\n    rj = null;\n\n    // Check edges\n    var edgeTangent = v3pool.get();\n    var edgeCenter = v3pool.get();\n    var r = v3pool.get(); // r = edge center to sphere center\n    var orthogonal = v3pool.get();\n    var dist = v3pool.get();\n    var Nsides = sides.length;\n    for(var j=0; j!==Nsides && !found; j++){\n        for(var k=0; k!==Nsides && !found; k++){\n            if(j%3 !== k%3){\n                // Get edge tangent\n                sides[k].cross(sides[j],edgeTangent);\n                edgeTangent.normalize();\n                sides[j].vadd(sides[k], edgeCenter);\n                r.copy(xi);\n                r.vsub(edgeCenter,r);\n                r.vsub(xj,r);\n                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\n                // Find the third side orthogonal to this one\n                var l = 0;\n                while(l===j%3 || l===k%3){\n                    l++;\n                }\n\n                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n                dist.copy(xi);\n                dist.vsub(orthogonal,dist);\n                dist.vsub(edgeCenter,dist);\n                dist.vsub(xj,dist);\n\n                // Distances in tangent direction and distance in the plane orthogonal to it\n                var tdist = Math.abs(orthonorm);\n                var ndist = dist.norm();\n\n                if(tdist < sides[l].norm() && ndist<R){\n                    found = true;\n                    var res = this.createContactEquation(bi,bj,si,sj);\n                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n                    res.rj.copy(res.rj);\n                    dist.negate(res.ni);\n                    res.ni.normalize();\n\n                    res.ri.copy(res.rj);\n                    res.ri.vadd(xj,res.ri);\n                    res.ri.vsub(xi,res.ri);\n                    res.ri.normalize();\n                    res.ri.mult(R,res.ri);\n\n                    // Make relative to bodies\n                    res.ri.vadd(xi, res.ri);\n                    res.ri.vsub(bi.position, res.ri);\n                    res.rj.vadd(xj, res.rj);\n                    res.rj.vsub(bj.position, res.rj);\n\n                    this.result.push(res);\n                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n};\n\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\n\n/**\n * @method sphereConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n    xi.vsub(xj,convex_to_sphere);\n    var normals = sj.faceNormals;\n    var faces = sj.faces;\n    var verts = sj.vertices;\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //     return;\n    // }\n\n    // Check corners\n    for(var i=0; i!==verts.length; i++){\n        var v = verts[i];\n\n        // World position of corner\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v,worldCorner);\n        xj.vadd(worldCorner,worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if(sphere_to_corner.norm2() < R * R){\n            found = true;\n            var r = this.createContactEquation(bi,bj,si,sj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.mult(R,r.ri);\n            worldCorner.vsub(xj,r.rj);\n\n            // Should be relative to the body.\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n\n            // Should be relative to the body.\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n            return;\n        }\n    }\n\n    // Check side (plane) intersections\n    var found = false;\n    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n        var normal = normals[i];\n        var face = faces[i];\n\n        // Get world-transformed normal of the face\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal,worldNormal);\n\n        // Get a world vertex from the face\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]],worldPoint);\n        worldPoint.vadd(xj,worldPoint);\n\n        // Get a point on the sphere, closest to the face normal\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\n        // Vector from a face point to the closest point on the sphere\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\n        // The penetration. Negative value means overlap.\n        var penetration = penetrationVec.dot(worldNormal);\n\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n\n        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n            // Intersects plane. Now check if the sphere is inside the face polygon\n            var faceVerts = []; // Face vertices, in world coords\n            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n                var worldVertex = v3pool.get();\n                qj.vmult(verts[face[j]], worldVertex);\n                xj.vadd(worldVertex,worldVertex);\n                faceVerts.push(worldVertex);\n            }\n\n            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n                found = true;\n                var r = this.createContactEquation(bi,bj,si,sj);\n\n                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n                var penetrationVec2 = v3pool.get();\n                worldNormal.mult(-penetration, penetrationVec2);\n                var penetrationSpherePoint = v3pool.get();\n                worldNormal.mult(-R, penetrationSpherePoint);\n\n                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n                xi.vsub(xj,r.rj);\n                r.rj.vadd(penetrationSpherePoint,r.rj);\n                r.rj.vadd(penetrationVec2 , r.rj);\n\n                // Should be relative to the body.\n                r.rj.vadd(xj, r.rj);\n                r.rj.vsub(bj.position, r.rj);\n\n                // Should be relative to the body.\n                r.ri.vadd(xi, r.ri);\n                r.ri.vsub(bi.position, r.ri);\n\n                v3pool.release(penetrationVec2);\n                v3pool.release(penetrationSpherePoint);\n\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                // Release world vertices\n                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                    v3pool.release(faceVerts[j]);\n                }\n\n                return; // We only expect *one* face contact\n            } else {\n                // Edge?\n                for(var j=0; j!==face.length; j++){\n\n                    // Get two world transformed vertices\n                    var v1 = v3pool.get();\n                    var v2 = v3pool.get();\n                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n                    xj.vadd(v1, v1);\n                    xj.vadd(v2, v2);\n\n                    // Construct edge vector\n                    var edge = sphereConvex_edge;\n                    v2.vsub(v1,edge);\n\n                    // Construct the same vector, but normalized\n                    var edgeUnit = sphereConvex_edgeUnit;\n                    edge.unit(edgeUnit);\n\n                    // p is xi projected onto the edge\n                    var p = v3pool.get();\n                    var v1_to_xi = v3pool.get();\n                    xi.vsub(v1, v1_to_xi);\n                    var dot = v1_to_xi.dot(edgeUnit);\n                    edgeUnit.mult(dot, p);\n                    p.vadd(v1, p);\n\n                    // Compute a vector from p to the center of the sphere\n                    var xi_to_p = v3pool.get();\n                    p.vsub(xi, xi_to_p);\n\n                    // Collision if the edge-sphere distance is less than the radius\n                    // AND if p is in between v1 and v2\n                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n                        // Edge contact!\n                        var r = this.createContactEquation(bi,bj,si,sj);\n                        p.vsub(xj,r.rj);\n\n                        p.vsub(xi,r.ni);\n                        r.ni.normalize();\n\n                        r.ni.mult(R,r.ri);\n\n                        // Should be relative to the body.\n                        r.rj.vadd(xj, r.rj);\n                        r.rj.vsub(bj.position, r.rj);\n\n                        // Should be relative to the body.\n                        r.ri.vadd(xi, r.ri);\n                        r.ri.vsub(bi.position, r.ri);\n\n                        this.result.push(r);\n                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                        // Release world vertices\n                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                            v3pool.release(faceVerts[j]);\n                        }\n\n                        v3pool.release(v1);\n                        v3pool.release(v2);\n                        v3pool.release(p);\n                        v3pool.release(xi_to_p);\n                        v3pool.release(v1_to_xi);\n\n                        return;\n                    }\n\n                    v3pool.release(v1);\n                    v3pool.release(v2);\n                    v3pool.release(p);\n                    v3pool.release(xi_to_p);\n                    v3pool.release(v1_to_xi);\n                }\n            }\n\n            // Release world vertices\n            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                v3pool.release(faceVerts[j]);\n            }\n        }\n    }\n};\n\nvar planeBox_normal = new Vec3();\nvar plane_to_corner = new Vec3();\n\n/**\n * @method planeBox\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\nNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n};\n\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\n\n/**\n * @method planeConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.planeConvex = function(\n    planeShape,\n    convexShape,\n    planePosition,\n    convexPosition,\n    planeQuat,\n    convexQuat,\n    planeBody,\n    convexBody\n){\n    // Simply return the points behind the plane.\n    var worldVertex = planeConvex_v,\n        worldNormal = planeConvex_normal;\n    worldNormal.set(0,0,1);\n    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\n    var numContacts = 0;\n    var relpos = planeConvex_relpos;\n    for(var i = 0; i !== convexShape.vertices.length; i++){\n\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n\n        var dot = worldNormal.dot(relpos);\n        if(dot <= 0.0){\n\n            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\n            // Get vertex position projected on plane\n            var projected = planeConvex_projected;\n            worldNormal.mult(worldNormal.dot(relpos),projected);\n            worldVertex.vsub(projected, projected);\n            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\n            // rj is now just the vector from the convex center to the vertex\n            worldVertex.vsub(convexPosition, r.rj);\n\n            // Make it relative to the body\n            r.ri.vadd(planePosition, r.ri);\n            r.ri.vsub(planeBody.position, r.ri);\n            r.rj.vadd(convexPosition, r.rj);\n            r.rj.vsub(convexBody.position, r.rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    if(this.enableFrictionReduction && numContacts){\n        this.createFrictionFromAverage(numContacts);\n    }\n};\n\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\n\n/**\n * @method convexConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n    var sepAxis = convexConvex_sepAxis;\n\n    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n        return;\n    }\n\n    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n        var numContacts = 0;\n        for(var j = 0; j !== res.length; j++){\n            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n                ri = r.ri,\n                rj = r.rj;\n            sepAxis.negate(r.ni);\n            res[j].normal.negate(q);\n            q.mult(res[j].depth, q);\n            res[j].point.vadd(q, ri);\n            rj.copy(res[j].point);\n\n            // Contact points are in world coordinates. Transform back to relative\n            ri.vsub(xi,ri);\n            rj.vsub(xj,rj);\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n        if(this.enableFrictionReduction && numContacts){\n            this.createFrictionFromAverage(numContacts);\n        }\n    }\n};\n\n\n/**\n * @method convexTrimesh\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\n// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n//     var sepAxis = convexConvex_sepAxis;\n\n//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n//         return;\n//     }\n\n//     // Construct a temp hull for each triangle\n//     var hullB = new ConvexPolyhedron();\n\n//     hullB.faces = [[0,1,2]];\n//     var va = new Vec3();\n//     var vb = new Vec3();\n//     var vc = new Vec3();\n//     hullB.vertices = [\n//         va,\n//         vb,\n//         vc\n//     ];\n\n//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\n//         var triangleNormal = new Vec3();\n//         sj.getNormal(i, triangleNormal);\n//         hullB.faceNormals = [triangleNormal];\n\n//         sj.getTriangleVertices(i, va, vb, vc);\n\n//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n//         if(!d){\n//             triangleNormal.scale(-1, triangleNormal);\n//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\n//             if(!d){\n//                 continue;\n//             }\n//         }\n\n//         var res = [];\n//         var q = convexConvex_q;\n//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n//         for(var j = 0; j !== res.length; j++){\n//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n//                 ri = r.ri,\n//                 rj = r.rj;\n//             r.ni.copy(triangleNormal);\n//             r.ni.negate(r.ni);\n//             res[j].normal.negate(q);\n//             q.mult(res[j].depth, q);\n//             res[j].point.vadd(q, ri);\n//             rj.copy(res[j].point);\n\n//             // Contact points are in world coordinates. Transform back to relative\n//             ri.vsub(xi,ri);\n//             rj.vsub(xj,rj);\n\n//             // Make relative to bodies\n//             ri.vadd(xi, ri);\n//             ri.vsub(bi.position, ri);\n//             rj.vadd(xj, rj);\n//             rj.vsub(bj.position, rj);\n\n//             result.push(r);\n//         }\n//     }\n// };\n\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\n\n/**\n * @method particlePlane\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\nNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var normal = particlePlane_normal;\n    normal.set(0,0,1);\n    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n    var relpos = particlePlane_relpos;\n    xi.vsub(bj.position,relpos);\n    var dot = normal.dot(relpos);\n    if(dot <= 0.0){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n\n        // Get particle position projected on plane\n        var projected = particlePlane_projected;\n        normal.mult(normal.dot(xi),projected);\n        xi.vsub(projected,projected);\n        //projected.vadd(bj.position,projected);\n\n        // rj is now the projected world position minus plane position\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\nvar particleSphere_normal = new Vec3();\n\n/**\n * @method particleSphere\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\nNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    // The normal is the unit vector from sphere center to particle center\n    var normal = particleSphere_normal;\n    normal.set(0,0,1);\n    xi.vsub(xj,normal);\n    var lengthSquared = normal.norm2();\n\n    if(lengthSquared <= sj.radius * sj.radius){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.mult(sj.radius,r.rj);\n        r.ni.copy(normal); // Contact normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// WIP\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nvar convexParticle_normal = new Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\n\n/**\n * @method convexParticle\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var penetratedFaceIndex = -1;\n    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n    var minPenetration = null;\n    var numDetectedFaces = 0;\n\n    // Convert particle position xi to local coords in the convex\n    var local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj,local); // Convert position to relative the convex origin\n    qj.conjugate(cqj);\n    cqj.vmult(local,local);\n\n    if(sj.pointIsInside(local)){\n\n        if(sj.worldVerticesNeedsUpdate){\n            sj.computeWorldVertices(xj,qj);\n        }\n        if(sj.worldFaceNormalsNeedsUpdate){\n            sj.computeWorldFaceNormals(qj);\n        }\n\n        // For each world polygon in the polyhedra\n        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\n            // Construct world face vertices\n            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n            var normal = sj.worldFaceNormals[i];\n\n            // Check how much the particle penetrates the polygon plane.\n            xi.vsub(verts[0],convexParticle_vertexToParticle);\n            var penetration = -normal.dot(convexParticle_vertexToParticle);\n            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n                minPenetration = penetration;\n                penetratedFaceIndex = i;\n                penetratedFaceNormal.copy(normal);\n                numDetectedFaces++;\n            }\n        }\n\n        if(penetratedFaceIndex!==-1){\n            // Setup contact\n            var r = this.createContactEquation(bi,bj,si,sj);\n            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\n            // rj is the particle position projected to the face\n            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n            r.rj.copy(worldPenetrationVec);\n            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n            //projectedToFace.copy(r.rj);\n\n            //qj.vmult(r.rj,r.rj);\n            penetratedFaceNormal.negate( r.ni ); // Contact normal\n            r.ri.set(0,0,0); // Center of particle\n\n            var ri = r.ri,\n                rj = r.rj;\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n        }\n    }\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n};\n\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\n\n/**\n * @method convexHeightfield\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.convexHeightfield = function (\n    convexShape,\n    hfShape,\n    convexPos,\n    hfPos,\n    convexQuat,\n    hfQuat,\n    convexBody,\n    hfBody\n){\n    var data = hfShape.data,\n        w = hfShape.elementSize,\n        radius = convexShape.boundingSphereRadius,\n        worldPillarOffset = convexHeightfield_tmp2,\n        faceList = convexHeightfield_faceList;\n\n    // Get sphere position to heightfield local!\n    var localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n        return;\n    }\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n        }\n    }\n};\n\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\n\n/**\n * @method sphereHeightfield\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.sphereHeightfield = function (\n    sphereShape,\n    hfShape,\n    spherePos,\n    hfPos,\n    sphereQuat,\n    hfQuat,\n    sphereBody,\n    hfBody\n){\n    var data = hfShape.data,\n        radius = sphereShape.radius,\n        w = hfShape.elementSize,\n        worldPillarOffset = sphereHeightfield_tmp2;\n\n    // Get sphere position to heightfield local!\n    var localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n        return;\n    }\n\n    var result = this.result;\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            var numContactsBefore = result.length;\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            var numContacts = result.length - numContactsBefore;\n\n            if(numContacts > 2){\n                return;\n            }\n            /*\n            // Skip all but 1\n            for (var k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n            */\n        }\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/Ray\":9,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43,\"../solver/Solver\":47,\"../utils/Vec3Pool\":54}],56:[function(_dereq_,module,exports){\n/* global performance */\n\nmodule.exports = World;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar GSSolver = _dereq_('../solver/GSSolver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\nvar Narrowphase = _dereq_('./Narrowphase');\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');\nvar Material = _dereq_('../material/Material');\nvar ContactMaterial = _dereq_('../material/ContactMaterial');\nvar Body = _dereq_('../objects/Body');\nvar TupleDictionary = _dereq_('../utils/TupleDictionary');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar AABB = _dereq_('../collision/AABB');\nvar Ray = _dereq_('../collision/Ray');\nvar NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');\n\n/**\n * The physics world\n * @class World\n * @constructor\n * @extends EventTarget\n */\nfunction World(){\n    EventTarget.apply(this);\n\n    /**\n     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n     * @property {Number} dt\n     */\n    this.dt = -1;\n\n    /**\n     * Makes bodies go to sleep when they've been inactive\n     * @property allowSleep\n     * @type {Boolean}\n     */\n    this.allowSleep = false;\n\n    /**\n     * All the current contacts (instances of ContactEquation) in the world.\n     * @property contacts\n     * @type {Array}\n     */\n    this.contacts = [];\n    this.frictionEquations = [];\n\n    /**\n     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n     * @property quatNormalizeSkip\n     * @type {Number}\n     */\n    this.quatNormalizeSkip = 0;\n\n    /**\n     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n     * @property quatNormalizeFast\n     * @type {Boolean}\n     * @see Quaternion.normalizeFast\n     * @see Quaternion.normalize\n     */\n    this.quatNormalizeFast = false;\n\n    /**\n     * The wall-clock time since simulation start\n     * @property time\n     * @type {Number}\n     */\n    this.time = 0.0;\n\n    /**\n     * Number of timesteps taken since start\n     * @property stepnumber\n     * @type {Number}\n     */\n    this.stepnumber = 0;\n\n    /// Default and last timestep sizes\n    this.default_dt = 1/60;\n\n    this.nextId = 0;\n    /**\n     * @property gravity\n     * @type {Vec3}\n     */\n    this.gravity = new Vec3();\n\n    /**\n     * @property broadphase\n     * @type {Broadphase}\n     */\n    this.broadphase = new NaiveBroadphase();\n\n    /**\n     * @property bodies\n     * @type {Array}\n     */\n    this.bodies = [];\n\n    /**\n     * @property solver\n     * @type {Solver}\n     */\n    this.solver = new GSSolver();\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    /**\n     * @property narrowphase\n     * @type {Narrowphase}\n     */\n    this.narrowphase = new Narrowphase(this);\n\n    /**\n     * @property {ArrayCollisionMatrix} collisionMatrix\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\n    /**\n     * CollisionMatrix from the previous step.\n     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\n    /**\n     * All added materials\n     * @property materials\n     * @type {Array}\n     */\n    this.materials = [];\n\n    /**\n     * @property contactmaterials\n     * @type {Array}\n     */\n    this.contactmaterials = [];\n\n    /**\n     * Used to look up a ContactMaterial given two instances of Material.\n     * @property {TupleDictionary} contactMaterialTable\n     */\n    this.contactMaterialTable = new TupleDictionary();\n\n    this.defaultMaterial = new Material(\"default\");\n\n    /**\n     * This contact material is used if no suitable contactmaterial is found for a contact.\n     * @property defaultContactMaterial\n     * @type {ContactMaterial}\n     */\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\n    /**\n     * @property doProfiling\n     * @type {Boolean}\n     */\n    this.doProfiling = false;\n\n    /**\n     * @property profile\n     * @type {Object}\n     */\n    this.profile = {\n        solve:0,\n        makeContactConstraints:0,\n        broadphase:0,\n        integrate:0,\n        narrowphase:0,\n    };\n\n    /**\n     * @property subsystems\n     * @type {Array}\n     */\n    this.subsystems = [];\n\n    this.addBodyEvent = {\n        type:\"addBody\",\n        body : null,\n    };\n\n    this.removeBodyEvent = {\n        type:\"removeBody\",\n        body : null,\n    };\n}\nWorld.prototype = new EventTarget();\n\n// Temp stuff\nvar tmpAABB1 = new AABB();\nvar tmpArray1 = [];\nvar tmpRay = new Ray();\n\n/**\n * Get the contact material between materials m1 and m2\n * @method getContactMaterial\n * @param {Material} m1\n * @param {Material} m2\n * @return {ContactMaterial} The contact material if it was found.\n */\nWorld.prototype.getContactMaterial = function(m1,m2){\n    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n};\n\n/**\n * Get number of objects in the world.\n * @method numObjects\n * @return {Number}\n * @deprecated\n */\nWorld.prototype.numObjects = function(){\n    return this.bodies.length;\n};\n\n/**\n * Store old collision state info\n * @method collisionMatrixTick\n */\nWorld.prototype.collisionMatrixTick = function(){\n\tvar temp = this.collisionMatrixPrevious;\n\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\tthis.collisionMatrix = temp;\n\tthis.collisionMatrix.reset();\n};\n\n/**\n * Add a rigid body to the simulation.\n * @method add\n * @param {Body} body\n * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n * @todo Adding an array of bodies should be possible. This would save some loops too\n * @deprecated Use .addBody instead\n */\nWorld.prototype.add = World.prototype.addBody = function(body){\n    if(this.bodies.indexOf(body) !== -1){\n        return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if(body instanceof Body){\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n    }\n\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.dispatchEvent(this.addBodyEvent);\n};\n\n/**\n * Add a constraint to the simulation.\n * @method addConstraint\n * @param {Constraint} c\n */\nWorld.prototype.addConstraint = function(c){\n    this.constraints.push(c);\n};\n\n/**\n * Removes a constraint\n * @method removeConstraint\n * @param {Constraint} c\n */\nWorld.prototype.removeConstraint = function(c){\n    var idx = this.constraints.indexOf(c);\n    if(idx!==-1){\n        this.constraints.splice(idx,1);\n    }\n};\n\n/**\n * Raycast test\n * @method rayTest\n * @param {Vec3} from\n * @param {Vec3} to\n * @param {Function|RaycastResult} result\n * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n */\nWorld.prototype.rayTest = function(from, to, result){\n    if(result instanceof RaycastResult){\n        // Do raycastclosest\n        this.raycastClosest(from, to, {\n            skipBackfaces: true\n        }, result);\n    } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n            skipBackfaces: true\n        }, result);\n    }\n};\n\n/**\n * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n * @method raycastAll\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {Function} callback\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAll = function(from, to, options, callback){\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n * @method raycastAny\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAny = function(from, to, options, result){\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and return information of the closest hit.\n * @method raycastClosest\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastClosest = function(from, to, options, result){\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method remove\n * @param {Body} body\n * @deprecated Use .removeBody instead\n */\nWorld.prototype.remove = function(body){\n    body.world = null;\n    var n = this.bodies.length-1,\n        bodies = this.bodies,\n        idx = bodies.indexOf(body);\n    if(idx !== -1){\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\n        // Recompute index\n        for(var i=0; i!==bodies.length; i++){\n            bodies[i].index = i;\n        }\n\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        this.dispatchEvent(this.removeBodyEvent);\n    }\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method removeBody\n * @param {Body} body\n */\nWorld.prototype.removeBody = World.prototype.remove;\n\n/**\n * Adds a material to the World.\n * @method addMaterial\n * @param {Material} m\n * @todo Necessary?\n */\nWorld.prototype.addMaterial = function(m){\n    this.materials.push(m);\n};\n\n/**\n * Adds a contact material to the World\n * @method addContactMaterial\n * @param {ContactMaterial} cmat\n */\nWorld.prototype.addContactMaterial = function(cmat) {\n\n    // Add contact material\n    this.contactmaterials.push(cmat);\n\n    // Add current contact material to the material table\n    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n};\n\n// performance.now()\nif(typeof performance === 'undefined'){\n    performance = {};\n}\nif(!performance.now){\n    var nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = function(){\n        return Date.now() - nowOffset;\n    };\n}\n\nvar step_tmp1 = new Vec3();\n\n/**\n * Step the physics world forward in time.\n *\n * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n *\n * @method step\n * @param {Number} dt                       The fixed time step size to use.\n * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n *\n * @example\n *     // fixed timestepping without interpolation\n *     world.step(1/60);\n *\n * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n */\nWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n    maxSubSteps = maxSubSteps || 10;\n    timeSinceLastCalled = timeSinceLastCalled || 0;\n\n    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\n        this.internalStep(dt);\n\n        // Increment time\n        this.time += dt;\n\n    } else {\n\n        // Compute the number of fixed steps we should have taken since the last step\n        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n        internalSteps = Math.min(internalSteps,maxSubSteps);\n\n        // Do some fixed steps to catch up\n        var t0 = performance.now();\n        for(var i=0; i!==internalSteps; i++){\n            this.internalStep(dt);\n            if(performance.now() - t0 > dt * 1000){\n                // We are slower than real-time. Better bail out.\n                break;\n            }\n        }\n\n        // Increment internal clock\n        this.time += timeSinceLastCalled;\n\n        // Compute \"Left over\" time step\n        var h = this.time % dt;\n        var h_div_dt = h / dt;\n        var interpvelo = step_tmp1;\n        var bodies = this.bodies;\n\n        for(var j=0; j !== bodies.length; j++){\n            var b = bodies[j];\n            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\n                // Interpolate\n                b.position.vsub(b.previousPosition, interpvelo);\n                interpvelo.scale(h_div_dt, interpvelo);\n                b.position.vadd(interpvelo, b.interpolatedPosition);\n\n                // TODO: interpolate quaternion\n                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\n            } else {\n\n                // For static bodies, just copy. Who else will do it?\n                b.interpolatedPosition.copy(b.position);\n                b.interpolatedQuaternion.copy(b.quaternion);\n            }\n        }\n    }\n};\n\n/**\n * Step the simulation\n * @method step\n * @param {Number} dt\n */\nvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n    World_step_preStepEvent = {type:\"preStep\"},\n    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n    World_step_oldContacts = [], // Pools for unused objects\n    World_step_frictionEquationPool = [],\n    World_step_p1 = [], // Reusable arrays for collision pairs\n    World_step_p2 = [],\n    World_step_gvec = new Vec3(), // Temporary vectors and quats\n    World_step_vi = new Vec3(),\n    World_step_vj = new Vec3(),\n    World_step_wi = new Vec3(),\n    World_step_wj = new Vec3(),\n    World_step_t1 = new Vec3(),\n    World_step_t2 = new Vec3(),\n    World_step_rixn = new Vec3(),\n    World_step_rjxn = new Vec3(),\n    World_step_step_q = new Quaternion(),\n    World_step_step_w = new Quaternion(),\n    World_step_step_wq = new Quaternion(),\n    invI_tau_dt = new Vec3();\nWorld.prototype.internalStep = function(dt){\n    this.dt = dt;\n\n    var world = this,\n        that = this,\n        contacts = this.contacts,\n        p1 = World_step_p1,\n        p2 = World_step_p2,\n        N = this.numObjects(),\n        bodies = this.bodies,\n        solver = this.solver,\n        gravity = this.gravity,\n        doProfiling = this.doProfiling,\n        profile = this.profile,\n        DYNAMIC = Body.DYNAMIC,\n        profilingStart,\n        constraints = this.constraints,\n        frictionEquationPool = World_step_frictionEquationPool,\n        gnorm = gravity.norm(),\n        gx = gravity.x,\n        gy = gravity.y,\n        gz = gravity.z,\n        i=0;\n\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add gravity to all objects\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var f = bi.force, m = bi.mass;\n            f.x += m*gx;\n            f.y += m*gy;\n            f.z += m*gz;\n        }\n    }\n\n    // Update subsystems\n    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n        this.subsystems[i].update();\n    }\n\n    // Collision detection\n    if(doProfiling){ profilingStart = performance.now(); }\n    p1.length = 0; // Clean up pair arrays from last step\n    p2.length = 0;\n    this.broadphase.collisionPairs(this,p1,p2);\n    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\n    // Remove constrained pairs with collideConnected == false\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        if(!c.collideConnected){\n            for(var j = p1.length-1; j>=0; j-=1){\n                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n                    p1.splice(j, 1);\n                    p2.splice(j, 1);\n                }\n            }\n        }\n    }\n\n    this.collisionMatrixTick();\n\n    // Generate contacts\n    if(doProfiling){ profilingStart = performance.now(); }\n    var oldcontacts = World_step_oldContacts;\n    var NoldContacts = contacts.length;\n\n    for(i=0; i!==NoldContacts; i++){\n        oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n\n    // Transfer FrictionEquation from current list to the pool for reuse\n    var NoldFrictionEquations = this.frictionEquations.length;\n    for(i=0; i!==NoldFrictionEquations; i++){\n        frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n\n    this.narrowphase.getContacts(\n        p1,\n        p2,\n        this,\n        contacts,\n        oldcontacts, // To be reused\n        this.frictionEquations,\n        frictionEquationPool\n    );\n\n    if(doProfiling){\n        profile.narrowphase = performance.now() - profilingStart;\n    }\n\n    // Loop over all collisions\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add all friction eqs\n    for (var i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n    }\n\n    var ncontacts = contacts.length;\n    for(var k=0; k!==ncontacts; k++){\n\n        // Current contact\n        var c = contacts[k];\n\n        // Get current collision indeces\n        var bi = c.bi,\n            bj = c.bj,\n            si = c.si,\n            sj = c.sj;\n\n        // Get collision properties\n        var cm;\n        if(bi.material && bj.material){\n            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n        } else {\n            cm = this.defaultContactMaterial;\n        }\n\n        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        var mu = cm.friction;\n        // c.restitution = cm.restitution;\n\n        // If friction or restitution were specified in the material, use them\n        if(bi.material && bj.material){\n            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n                mu = bi.material.friction * bj.material.friction;\n            }\n\n            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n                c.restitution = bi.material.restitution * bj.material.restitution;\n            }\n        }\n\n\t\t// c.setSpookParams(\n  //           cm.contactEquationStiffness,\n  //           cm.contactEquationRelaxation,\n  //           dt\n  //       );\n\n\t\tsolver.addEquation(c);\n\n\t\t// // Add friction constraint equation\n\t\t// if(mu > 0){\n\n\t\t// \t// Create 2 tangent equations\n\t\t// \tvar mug = mu * gnorm;\n\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t// \tif(reducedMass > 0){\n\t\t// \t\treducedMass = 1/reducedMass;\n\t\t// \t}\n\t\t// \tvar pool = frictionEquationPool;\n\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tthis.frictionEquations.push(c1, c2);\n\n\t\t// \tc1.bi = c2.bi = bi;\n\t\t// \tc1.bj = c2.bj = bj;\n\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\n\t\t// \t// Copy over the relative vectors\n\t\t// \tc1.ri.copy(c.ri);\n\t\t// \tc1.rj.copy(c.rj);\n\t\t// \tc2.ri.copy(c.ri);\n\t\t// \tc2.rj.copy(c.rj);\n\n\t\t// \t// Construct tangents\n\t\t// \tc.ni.tangents(c1.t, c2.t);\n\n  //           // Set spook params\n  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\n  //           c1.enabled = c2.enabled = c.enabled;\n\n\t\t// \t// Add equations to solver\n\t\t// \tsolver.addEquation(c1);\n\t\t// \tsolver.addEquation(c2);\n\t\t// }\n\n        if( bi.allowSleep &&\n            bi.type === Body.DYNAMIC &&\n            bi.sleepState  === Body.SLEEPING &&\n            bj.sleepState  === Body.AWAKE &&\n            bj.type !== Body.STATIC\n        ){\n            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n            if(speedSquaredB >= speedLimitSquaredB*2){\n                bi._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        if( bj.allowSleep &&\n            bj.type === Body.DYNAMIC &&\n            bj.sleepState  === Body.SLEEPING &&\n            bi.sleepState  === Body.AWAKE &&\n            bi.type !== Body.STATIC\n        ){\n            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n            if(speedSquaredA >= speedLimitSquaredA*2){\n                bj._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        // Now we know that i and j are in contact. Set collision matrix state\n\t\tthis.collisionMatrix.set(bi, bj, true);\n\n        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n            // First contact!\n            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n            World_step_collideEvent.body = bj;\n            World_step_collideEvent.contact = c;\n            bi.dispatchEvent(World_step_collideEvent);\n\n            World_step_collideEvent.body = bi;\n            bj.dispatchEvent(World_step_collideEvent);\n        }\n    }\n    if(doProfiling){\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n    }\n\n    // Wake up bodies\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi._wakeUpAfterNarrowphase){\n            bi.wakeUp();\n            bi._wakeUpAfterNarrowphase = false;\n        }\n    }\n\n    // Add user-added constraints\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        c.update();\n        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n            var eq = c.equations[j];\n            solver.addEquation(eq);\n        }\n    }\n\n    // Solve the constrained system\n    solver.solve(dt,this);\n\n    if(doProfiling){\n        profile.solve = performance.now() - profilingStart;\n    }\n\n    // Remove all contacts from solver\n    solver.removeAllEquations();\n\n    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n    var pow = Math.pow;\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var ld = pow(1.0 - bi.linearDamping,dt);\n            var v = bi.velocity;\n            v.mult(ld,v);\n            var av = bi.angularVelocity;\n            if(av){\n                var ad = pow(1.0 - bi.angularDamping,dt);\n                av.mult(ad,av);\n            }\n        }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent);\n\n    // Invoke pre-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.preStep){\n            bi.preStep.call(bi);\n        }\n    }\n\n    // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n    var q = World_step_step_q;\n    var w = World_step_step_w;\n    var wq = World_step_step_wq;\n    var stepnumber = this.stepnumber;\n    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n    var quatNormalizeFast = this.quatNormalizeFast;\n    var half_dt = dt * 0.5;\n    var PLANE = Shape.types.PLANE,\n        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\n    for(i=0; i!==N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n            var velo = b.velocity,\n                angularVelo = b.angularVelocity,\n                pos = b.position,\n                quat = b.quaternion,\n                invMass = b.invMass,\n                invInertia = b.invInertiaWorld;\n\n            velo.x += force.x * invMass * dt;\n            velo.y += force.y * invMass * dt;\n            velo.z += force.z * invMass * dt;\n\n            if(b.angularVelocity){\n                invInertia.vmult(tau,invI_tau_dt);\n                invI_tau_dt.mult(dt,invI_tau_dt);\n                invI_tau_dt.vadd(angularVelo,angularVelo);\n            }\n\n            // Use new velocity  - leap frog\n            pos.x += velo.x * dt;\n            pos.y += velo.y * dt;\n            pos.z += velo.z * dt;\n\n            if(b.angularVelocity){\n                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n                w.mult(quat,wq);\n                quat.x += half_dt * wq.x;\n                quat.y += half_dt * wq.y;\n                quat.z += half_dt * wq.z;\n                quat.w += half_dt * wq.w;\n                if(quatNormalize){\n                    if(quatNormalizeFast){\n                        quat.normalizeFast();\n                    } else {\n                        quat.normalize();\n                    }\n                }\n            }\n\n            if(b.aabb){\n                b.aabbNeedsUpdate = true;\n            }\n\n            // Update world inertia\n            if(b.updateInertiaWorld){\n                b.updateInertiaWorld();\n            }\n        }\n    }\n    this.clearForces();\n\n    this.broadphase.dirty = true;\n\n    if(doProfiling){\n        profile.integrate = performance.now() - profilingStart;\n    }\n\n    // Update world time\n    this.time += dt;\n    this.stepnumber += 1;\n\n    this.dispatchEvent(World_step_postStepEvent);\n\n    // Invoke post-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        var postStep = bi.postStep;\n        if(postStep){\n            postStep.call(bi);\n        }\n    }\n\n    // Sleeping update\n    if(this.allowSleep){\n        for(i=0; i!==N; i++){\n            bodies[i].sleepTick(this.time);\n        }\n    }\n};\n\n/**\n * Sets all body forces in the world to zero.\n * @method clearForces\n */\nWorld.prototype.clearForces = function(){\n    var bodies = this.bodies;\n    var N = bodies.length;\n    for(var i=0; i !== N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n\n        b.force.set(0,0,0);\n        b.torque.set(0,0,0);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/ArrayCollisionMatrix\":4,\"../collision/NaiveBroadphase\":7,\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../material/ContactMaterial\":24,\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Shape\":43,\"../solver/GSSolver\":46,\"../utils/EventTarget\":49,\"../utils/TupleDictionary\":52,\"../utils/Vec3Pool\":54,\"./Narrowphase\":55}]},{},[2])\n(2)\n});"],"sourceRoot":""}