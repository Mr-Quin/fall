{"version":3,"sources":["../../../../sourceES6/gui/src/2D/valueAndUnit.ts","../../../../sourceES6/gui/src/2D/measure.ts","../../../../sourceES6/gui/src/2D/math2D.ts","../../../../../sourceES6/gui/src/2D/controls/control.ts","../../../../../sourceES6/gui/src/2D/controls/container.ts","../../../../../sourceES6/gui/src/2D/controls/rectangle.ts","../../../../../sourceES6/gui/src/2D/controls/textBlock.ts","../../../../../sourceES6/gui/src/2D/controls/image.ts","../../../../../sourceES6/gui/src/2D/controls/button.ts","../../../../../sourceES6/gui/src/2D/controls/stackPanel.ts","../../../../../sourceES6/gui/src/2D/controls/checkbox.ts","../../../../../sourceES6/gui/src/2D/controls/inputText.ts","../../../../../sourceES6/gui/src/2D/controls/grid.ts","../../../../../sourceES6/gui/src/2D/controls/colorpicker.ts","../../../../../sourceES6/gui/src/2D/controls/ellipse.ts","../../../../../sourceES6/gui/src/2D/controls/inputPassword.ts","../../../../../sourceES6/gui/src/2D/controls/line.ts","../../../../sourceES6/gui/src/2D/multiLinePoint.ts","../../../../../sourceES6/gui/src/2D/controls/multiLine.ts","../../../../../sourceES6/gui/src/2D/controls/radioButton.ts","../../../../../../sourceES6/gui/src/2D/controls/sliders/baseSlider.ts","../../../../../../sourceES6/gui/src/2D/controls/sliders/slider.ts","../../../../../sourceES6/gui/src/2D/controls/selector.ts","../../../../../../sourceES6/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts","../../../../../../sourceES6/gui/src/2D/controls/sliders/scrollBar.ts","../../../../../../sourceES6/gui/src/2D/controls/sliders/imageScrollBar.ts","../../../../../../sourceES6/gui/src/2D/controls/scrollViewers/scrollViewer.ts","../../../../../sourceES6/gui/src/2D/controls/virtualKeyboard.ts","../../../../../sourceES6/gui/src/2D/controls/displayGrid.ts","../../../../../../sourceES6/gui/src/2D/controls/sliders/imageBasedSlider.ts","../../../../../sourceES6/gui/src/2D/controls/statics.ts","../../../../sourceES6/gui/src/2D/style.ts","../../../../sourceES6/gui/src/2D/advancedDynamicTexture.ts","../../../../sourceES6/gui/src/2D/adtInstrumentation.ts","../../../../sourceES6/gui/src/2D/xmlLoader.ts","../../../../sourceES6/gui/src/3D/vector3WithInfo.ts","../../../../../sourceES6/gui/src/3D/controls/control3D.ts","../../../../../sourceES6/gui/src/3D/controls/abstractButton3D.ts","../../../../../sourceES6/gui/src/3D/controls/button3D.ts","../../../../../sourceES6/gui/src/3D/controls/container3D.ts","../../../../../sourceES6/gui/src/3D/controls/volumeBasedPanel.ts","../../../../../sourceES6/gui/src/3D/controls/cylinderPanel.ts","../../../../../../sourceES6/gui/src/3D/materials/shaders/fluent.vertex.ts","../../../../../../sourceES6/gui/src/3D/materials/shaders/fluent.fragment.ts","../../../../../sourceES6/gui/src/3D/materials/fluentMaterial.ts","../../../../../sourceES6/gui/src/3D/controls/holographicButton.ts","../../../../../sourceES6/gui/src/3D/controls/meshButton3D.ts","../../../../../sourceES6/gui/src/3D/controls/planePanel.ts","../../../../../sourceES6/gui/src/3D/controls/scatterPanel.ts","../../../../../sourceES6/gui/src/3D/controls/spherePanel.ts","../../../../../sourceES6/gui/src/3D/controls/stackPanel3D.ts","../../../../sourceES6/gui/src/3D/gui3DManager.ts"],"names":["value","unit","negativeValueAllowed","ValueAndUnit","UNITMODE_PIXEL","_value","ignoreAdaptiveScaling","this","_originalUnit","UNITMODE_PERCENTAGE","getValueInPixel","host","refValue","isPixel","getValue","updateInPlace","width","height","idealWidth","getSize","idealHeight","useSmallestIdeal","window","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","tmpRect","tmpRect2","tmpV1","tmpV2","left","top","copyFrom","other","copyFromFloats","CombineToRef","a","b","result","Math","min","right","max","bottom","transformToRef","transform","Number","MAX_VALUE","i","transformCoordinates","x","y","floor","ceil","isEqualsTo","Empty","Measure","buttonIndex","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","Identity","Matrix2D","TranslationToRef","ScalingToRef","RotationToRef","angle","s","sin","c","cos","ComposeToRef","tx","ty","scaleX","scaleY","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","name","_alpha","_alphaSet","_zIndex","_currentMeasure","_fontFamily","_fontStyle","_fontWeight","_fontSize","_width","_height","_color","_style","_horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_prevCurrentMeasureTransformedIntoGlobalSpace","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","_invertTransformMatrix","_transformedPosition","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_disabledColorItem","_rebuildLayout","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","clipContent","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_tmpMeasureA","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","isNaN","_resetFontCache","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","fontSize","zIndex","parent","_reOrderControl","_linkedMesh","paddingLeft","paddingRight","paddingTop","paddingBottom","linkOffsetX","linkOffsetY","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Project","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Error","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","invalidateRect","_transform","useInvalidateRectOptimization","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isDirty","isVisible","_numLayoutCalls","rebuildCount","_processMeasures","_evaluateClippingState","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","type","pointerId","deltaX","deltaY","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","key","_onWheelScroll","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","POINTERWHEEL","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","RegisteredTypes","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","logLayoutCycleErrors","maxLayoutCycle","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","slice","_cleanControlAfterRemoval","wasAdded","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","TextWrapping","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","lineSpacing","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","_parseLine","measureText","words","n","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","url","_workingCanvas","_loaded","_stretch","Image","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_svgAttributesComputationCompleted","_isSVG","_cellWidth","_cellHeight","_cellId","_populateNinePatchSlicesFromImage","onImageLoadedObservable","onSVGAttributesComputedObservable","_extractNinePatchSliceDataFromImage","_detectPointerOnOpaqueOnly","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","synchronizeSizeWithContent","_rotate90","preserveProperties","canvas","_domImage","drawImage","dataUrl","toDataURL","rotatedImage","_handleRotationForSVGImage","srcImage","dstImage","_rotate90SourceProperties","addOnce","srcLeft","sourceLeft","srcTop","sourceTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","sourceWidth","dstHeight","sourceHeight","mult","_onImageLoaded","onload","_imageWidth","_imageHeight","imageData","data","_source","_svgCheck","SetCorsBehavior","src","SVGSVGElement","search","lastIndexOf","svgsrc","elemid","svgExist","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","addEventListener","svgImage","svgobj","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","baseVal","consolidate","matrix","d","e","f","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","clearRect","_drawImage","sx","sy","sw","sh","tw","th","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","_renderNinePatch","_renderCornerPatch","targetX","targetY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","targetCenterWidth","sliceLeft","targetTopHeight","delegatePickingToChildren","thickness","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","pointerUpAnimation","_image","_textBlock","isEnabled","CreateImageButton","imageUrl","Button","textBlock","textWrapping","textHorizontalAlignment","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","ignoreLayoutWarnings","isVertical","stackWidth","stackHeight","Warn","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","Checkbox","header","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","disableMobilePrompt","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","valueAsString","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","navigator","userAgent","prompt","focusedControl","registerClipboardEvents","clipboardInfo","COPY","_onCopyText","event","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","focusedColor","_capturingControl","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","hasOwnProperty","parseInt","Red","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","_lastPointerDownID","onValueChangedObservable","_pointerIsDown","size","equals","toHSVToRef","r","g","ColorPicker","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","HSVtoRGBToRef","alphaAmount","alphaRatio","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","Promise","resolve","reject","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","closeIconColor","buttonFontSize","butEdit","buttonWidth","buttonHeight","currentColor","swatchNumber","swatchDrawer","picker","rValInt","gValInt","bValInt","rValDec","gValDec","bValDec","hexVal","newSwatch","lastVal","activeField","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","luminanceLimitColor","FromHexString","luminanceLimit","inputFieldLabels","editSwatchMode","updateValues","inputField","pickedColor","toHexString","background","minusPound","updateInt","field","channel","newValue","test","newSwatchRGB","updateFloat","createSwatch","savedColors","icon","swatch","swatchColor","swatchLuminence","setEditButtonVisibility","updateSwatches","butSave","editSwatches","mode","undefined","button","gutterCount","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","disableButton","enableButton","pickerGrid","disabled","closePicker","dialogContainer","topRow","initialRows","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","textVerticalAlignment","currentSwatch","dialogBody","dialogBodyCols","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","swatchOutline","currentText","buttonGrid","butOK","butCancel","pickerColorValues","rgbValuesQuadrant","labelText","hexValueQuadrant","val","newHexValue","checkHex","leadingZero","txt","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","getProjectedPosition","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","_canvas","yValue","_points","getAt","items","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","group","executeOnAllControls","childRadio","AddRadioButtonWithHeader","radio","RadioButton","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_step","_effectiveBarOffset","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","rotation","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","addCheckbox","func","checked","state","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","_selectNb","addRadio","nb","addSlider","onValueChange","v","borderColor","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","_freezeControls","_bucketWidth","_bucketHeight","_buckets","textureSize","renderWidth","renderHeight","measure","_updateMeasures","_useBuckets","_makeBuckets","setBucketSizes","_bucketLen","_dispatchInBuckets","bStartX","bEndX","bStartY","bEndY","bucket","lstc","leftInPixels","topInPixels","_updateChildrenMeasures","_origLeft","_origTop","_parentMeasure","_scrollChildren","_scrollChildrenWithBuckets","scrollLeft","scrollTop","_oldLeft","_oldTop","maxWidth","parentClientWidth","maxHeight","parentClientHeight","_tempMeasure","_first","_originX","_originY","delta","_thumbLength","_thumbHeight","_barImageHeight","num90RotationInVerticalMode","_backgroundBaseImage","isLoaded","_backgroundImage","rotatedValue","_thumbBaseImage","_thumbImage","isImageBased","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarImageHeight","_verticalBarImageHeight","_forceHorizontalBar","_forceVerticalBar","_useImageBar","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","_verticalBar","_window","_addBar","barColor","barBackground","freezeControls","bucketWidth","bucketHeight","resetWindow","_buildClientSizes","idealRatio","forceVerticalBar","forceHorizontalBar","_clientWidth","_clientHeight","_updateScroller","_barImage","hb","thumbImage","_horizontalBarImage","_verticalBarImage","thumbLength","thumbHeight","barImageHeight","_barBackground","_barBackgroundImage","backgroundImage","_horizontalBarBackgroundImage","_verticalBarBackgroundImage","_setWindowPosition","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","thumbWidth","_attachWheel","barControl","barContainer","barOffset","_onWheelObserver","pi","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","addKeysRow","keys","propertySets","maxKey","properties","heightInPixels","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","VirtualKeyboard","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","_valueBarImage","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_cursorChanged","_defaultMousePointerId","_clipboardData","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","onClipboardCopy","rawEvt","onClipboardCut","onClipboardPaste","_texture","_rootElement","getEngine","getInputElement","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KEYDOWN","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","rwidth","rheight","_layerToDispose","getChildren","layer","isBackground","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","createStyle","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","getRenderWidth","getRenderHeight","scaleTo","toGlobal","worldMatrix","scaleInPlace","renderScale","layerMask","isDisposed","ZeroReadOnly","SetImmediate","update","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","tempViewport","isPointerCaptured","toGlobalToRef","pointerX","getHardwareScalingLevel","pointerY","_attachToOnPointerOut","self","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","friendlyControls","canMoveFocus","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","AdvancedDynamicTexture","TRILINEAR_SAMPLINGMODE","material","backFaceCulling","diffuseColor","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","_captureRenderTime","_renderTime","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","parentClass","_nodes","_nodeTypes","element","attribute","_isLoaded","_objectAttributes","_parentClass","_getChainElement","attributeValue","_getClassAttribute","attributeName","GetClass","_createGuiElement","node","linkParent","guiNode","nodeName","attributes","includes","startsWith","endsWith","getNamedItem","Object","id","_parseGrid","columns","cells","cellNode","rows","rowNumber","columnNumber","totalColumnsNumber","nodeType","nodeValue","JSON","parse","k","firstChild","_parseXml","nextSibling","_parseElement","_prepareSourceElement","variable","iterator","_parseElementsFromSource","dataSource","isArray","splittedSource","generated","setAttribute","getNodeById","getNodes","loadLayout","xmlFile","rootNode","callback","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseXML","xmlDoc","bind","open","send","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","removeBehavior","detach","getBehaviorByName","setEnabled","linkToTransformNode","_prepareNode","_createNode","isPickable","_affectMaterial","forcePointerUp","pickedPoint","_disposeNode","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","utilityLayer","rootContainer","utilityLayerScene","_applyFacade","facadeTexture","faceUV","CreateBox","depth","_blockLayout","_arrangeChildren","updateLayout","blockLayout","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","_columns","_rows","_rowThenColum","_orientation","margin","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Vector3","diff","subtractToRef","TransformNormalToRef","startOffsetX","startOffsetY","nodeGrid","cellCounter","_mapGridNode","_finalProcessing","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Y","LOCAL","yAngle","RotationYawPitchRollToRef","Matrix","TransformNormal","shader","ShadersStore","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","effect","_wasPreviouslyReady","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","Clone","FluentMaterial","serialize","serializationObject","Serialize","customType","Parse","rootUrl","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","_backPlate","renderingGroupId","_textPlate","CreatePlane","_scene","tooltipBackground","sideOrientation","DOUBLESIDE","mat","addChild","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","_currentMesh","getChildMeshes","addInPlace","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","Vector2","difference","combinedRadius","distance","normalize","subtractInPlace","_sphericalMapping","xAngle","extendSizes","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","Up","isPointerUp","shouldRender","pickingInfo","pointerType","materialName"],"mappings":"ipFAKA,aAeI,WAAmBA,EAERC,EAEAC,QAFA,IAAAD,MAAOE,EAAaC,qBAEpB,IAAAF,OAAA,GAFA,KAAAD,OAEA,KAAAC,uBAlBH,KAAAG,OAAS,EAMV,KAAAC,uBAAwB,EAa3BC,KAAKF,OAASL,EACdO,KAAKC,cAAgBP,EA2J7B,OAvJI,sBAAW,2BAAY,C,IAAvB,WACI,OAAOM,KAAKN,OAASE,EAAaM,qB,gCAItC,sBAAW,sBAAO,C,IAAlB,WACI,OAAOF,KAAKN,OAASE,EAAaC,gB,gCAItC,sBAAW,4BAAa,C,IAAxB,WACI,OAAOG,KAAKF,Q,gCAST,YAAAK,gBAAP,SAAuBC,EAA8BC,GACjD,OAAIL,KAAKM,QACEN,KAAKO,SAASH,GAGlBJ,KAAKO,SAASH,GAAQC,GAS1B,YAAAG,cAAP,SAAqBf,EAAeC,GAIhC,YAJgC,IAAAA,MAAOE,EAAaC,gBACpDG,KAAKF,OAASL,EACdO,KAAKN,KAAOA,EAELM,MAQJ,YAAAO,SAAP,SAAgBH,GACZ,GAAIA,IAASJ,KAAKD,uBAAyBC,KAAKN,OAASE,EAAaM,oBAAqB,CACvF,IAAIO,EAAgB,EAChBC,EAAiB,EAUrB,GARIN,EAAKO,aACLF,EAAST,KAAKF,OAASM,EAAKQ,UAAUH,MAASL,EAAKO,YAGpDP,EAAKS,cACLH,EAAUV,KAAKF,OAASM,EAAKQ,UAAUF,OAAUN,EAAKS,aAGtDT,EAAKU,kBAAoBV,EAAKO,YAAcP,EAAKS,YACjD,OAAOE,OAAOC,WAAaD,OAAOE,YAAcR,EAAQC,EAG5D,GAAIN,EAAKO,WACL,OAAOF,EAGX,GAAIL,EAAKS,YACL,OAAOH,EAGf,OAAOV,KAAKF,QAST,YAAAoB,SAAP,SAAgBd,EAA8Be,GAC1C,OAAQnB,KAAKN,MACT,KAAKE,EAAaM,oBACd,IAAIkB,EAAmC,IAAtBpB,KAAKO,SAASH,GAE/B,OAAQe,EAAWC,EAAWC,QAAQF,GAAYC,GAAc,IACpE,KAAKxB,EAAaC,eACd,IAAIyB,EAAStB,KAAKO,SAASH,GAC3B,OAAQe,EAAWG,EAAOD,QAAQF,GAAYG,GAAU,KAGhE,OAAOtB,KAAKN,KAAKwB,YAQd,YAAAK,WAAP,SAAkBC,GACd,IAAIC,EAAQ7B,EAAa8B,OAAOC,KAAKH,EAAON,YAE5C,IAAKO,GAA0B,IAAjBA,EAAMG,OAChB,OAAO,EAGX,IAAIC,EAAcC,WAAWL,EAAM,IAC/BM,EAAa/B,KAAKC,cAQtB,GANKD,KAAKL,sBACFkC,EAAc,IACdA,EAAc,GAID,IAAjBJ,EAAMG,OACN,OAAQH,EAAM,IACV,IAAK,KACDM,EAAanC,EAAaC,eAC1B,MACJ,IAAK,IACDkC,EAAanC,EAAaM,oBAC1B2B,GAAe,IAK3B,OAAIA,IAAgB7B,KAAKF,QAAUiC,IAAe/B,KAAKN,QAIvDM,KAAKF,OAAS+B,EACd7B,KAAKN,KAAOqC,GAEL,IASX,sBAAkB,wBAAmB,C,IAArC,WACI,OAAOnC,EAAaoC,sB,gCAIxB,sBAAkB,mBAAc,C,IAAhC,WACI,OAAOpC,EAAaqC,iB,gCAXT,EAAAP,OAAS,0BACT,EAAAM,qBAAuB,EACvB,EAAAC,gBAAkB,EAWrC,EAhLA,GCFIC,EAAU,CACV,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,IAGfC,EAAW,CACX,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,GACf,IAAI,IAAQ,EAAG,IAGfC,EAAQ,IAAI,IAAQ,EAAG,GACvBC,EAAQ,IAAI,IAAQ,EAAG,GAK3B,aAQI,WAEWC,EAEAC,EAEA9B,EAEAC,GANA,KAAA4B,OAEA,KAAAC,MAEA,KAAA9B,QAEA,KAAAC,SAyGf,OAjGW,YAAA8B,SAAP,SAAgBC,GACZzC,KAAKsC,KAAOG,EAAMH,KAClBtC,KAAKuC,IAAME,EAAMF,IACjBvC,KAAKS,MAAQgC,EAAMhC,MACnBT,KAAKU,OAAS+B,EAAM/B,QAUjB,YAAAgC,eAAP,SAAsBJ,EAAcC,EAAa9B,EAAeC,GAC5DV,KAAKsC,KAAOA,EACZtC,KAAKuC,IAAMA,EACXvC,KAAKS,MAAQA,EACbT,KAAKU,OAASA,GASJ,EAAAiC,aAAd,SAA2BC,EAAYC,EAAYC,GAC/C,IAAIR,EAAOS,KAAKC,IAAIJ,EAAEN,KAAMO,EAAEP,MAC1BC,EAAMQ,KAAKC,IAAIJ,EAAEL,IAAKM,EAAEN,KACxBU,EAAQF,KAAKG,IAAIN,EAAEN,KAAOM,EAAEnC,MAAOoC,EAAEP,KAAOO,EAAEpC,OAC9C0C,EAASJ,KAAKG,IAAIN,EAAEL,IAAMK,EAAElC,OAAQmC,EAAEN,IAAMM,EAAEnC,QAClDoC,EAAOR,KAAOA,EACdQ,EAAOP,IAAMA,EACbO,EAAOrC,MAAQwC,EAAQX,EACvBQ,EAAOpC,OAASyC,EAASZ,GAQtB,YAAAa,eAAP,SAAsBC,EAAqBP,GACvCZ,EAAQ,GAAGQ,eAAe1C,KAAKsC,KAAMtC,KAAKuC,KAC1CL,EAAQ,GAAGQ,eAAe1C,KAAKsC,KAAOtC,KAAKS,MAAOT,KAAKuC,KACvDL,EAAQ,GAAGQ,eAAe1C,KAAKsC,KAAOtC,KAAKS,MAAOT,KAAKuC,IAAMvC,KAAKU,QAClEwB,EAAQ,GAAGQ,eAAe1C,KAAKsC,KAAMtC,KAAKuC,IAAMvC,KAAKU,QAErD0B,EAAMM,eAAeY,OAAOC,UAAWD,OAAOC,WAC9ClB,EAAMK,eAAe,EAAG,GACxB,IAAK,IAAIc,EAAI,EAAGA,EAAI,EAAGA,IACnBH,EAAUI,qBAAqBvB,EAAQsB,GAAGE,EAAGxB,EAAQsB,GAAGG,EAAGxB,EAASqB,IACpEpB,EAAMsB,EAAIX,KAAKa,MAAMb,KAAKC,IAAIZ,EAAMsB,EAAGvB,EAASqB,GAAGE,IACnDtB,EAAMuB,EAAIZ,KAAKa,MAAMb,KAAKC,IAAIZ,EAAMuB,EAAGxB,EAASqB,GAAGG,IACnDtB,EAAMqB,EAAIX,KAAKc,KAAKd,KAAKG,IAAIb,EAAMqB,EAAGvB,EAASqB,GAAGE,IAClDrB,EAAMsB,EAAIZ,KAAKc,KAAKd,KAAKG,IAAIb,EAAMsB,EAAGxB,EAASqB,GAAGG,IAEtDb,EAAOR,KAAOF,EAAMsB,EACpBZ,EAAOP,IAAMH,EAAMuB,EACnBb,EAAOrC,MAAQ4B,EAAMqB,EAAItB,EAAMsB,EAC/BZ,EAAOpC,OAAS2B,EAAMsB,EAAIvB,EAAMuB,GAQ7B,YAAAG,WAAP,SAAkBrB,GAEd,OAAIzC,KAAKsC,OAASG,EAAMH,OAIpBtC,KAAKuC,MAAQE,EAAMF,MAInBvC,KAAKS,QAAUgC,EAAMhC,OAIrBT,KAAKU,SAAW+B,EAAM/B,UAWhB,EAAAqD,MAAd,WACI,OAAO,IAAIC,EAAQ,EAAG,EAAG,EAAG,IAEpC,EAzHA,G,QChBA,cAMI,WAAmBxC,EAERyC,QAAA,IAAAA,MAAA,GAFX,MAGI,YAAMzC,EAAOkC,EAAGlC,EAAOmC,IAAE,K,OADlB,EAAAM,c,EAGf,OAXqC,iBAWrC,EAXA,CAAqC,KAcrC,aAaI,WAAYC,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAXtE,KAAAC,EAAI,IAAIC,aAAa,GAYxBzE,KAAK0E,WAAWR,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GA2KjD,OA9JW,YAAAG,WAAP,SAAkBR,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAI/E,OAHAvE,KAAKwE,EAAE,GAAKN,EAAKlE,KAAKwE,EAAE,GAAKL,EAC7BnE,KAAKwE,EAAE,GAAKJ,EAAKpE,KAAKwE,EAAE,GAAKH,EAC7BrE,KAAKwE,EAAE,GAAKF,EAAKtE,KAAKwE,EAAE,GAAKD,EACtBvE,MAOJ,YAAA2E,YAAP,WACI,OAAO3E,KAAKwE,EAAE,GAAKxE,KAAKwE,EAAE,GAAKxE,KAAKwE,EAAE,GAAKxE,KAAKwE,EAAE,IAQ/C,YAAAI,YAAP,SAAmB9B,GACf,IAAI+B,EAAK7E,KAAKwE,EAAE,GAAQM,EAAK9E,KAAKwE,EAAE,GAChCO,EAAK/E,KAAKwE,EAAE,GAAQQ,EAAKhF,KAAKwE,EAAE,GAChCS,EAAKjF,KAAKwE,EAAE,GAAQU,EAAKlF,KAAKwE,EAAE,GAEhCW,EAAMnF,KAAK2E,cACf,GAAIQ,EAAO,IAAU,IAIjB,OAHArC,EAAO0B,EAAE,GAAK,EAAG1B,EAAO0B,EAAE,GAAK,EAC/B1B,EAAO0B,EAAE,GAAK,EAAG1B,EAAO0B,EAAE,GAAK,EAC/B1B,EAAO0B,EAAE,GAAK,EAAG1B,EAAO0B,EAAE,GAAK,EACxBxE,KAGX,IAAIoF,EAAS,EAAID,EAEbE,EAAON,EAAKG,EAAKF,EAAKC,EACtBK,EAAOR,EAAKG,EAAKJ,EAAKK,EAM1B,OAJApC,EAAO0B,EAAE,GAAKQ,EAAKI,EAAQtC,EAAO0B,EAAE,IAAMM,EAAKM,EAC/CtC,EAAO0B,EAAE,IAAMO,EAAKK,EAAQtC,EAAO0B,EAAE,GAAKK,EAAKO,EAC/CtC,EAAO0B,EAAE,GAAKa,EAAOD,EAAQtC,EAAO0B,EAAE,GAAKc,EAAOF,EAE3CpF,MASJ,YAAAuF,cAAP,SAAqB9C,EAAiBK,GAClC,IAAI+B,EAAK7E,KAAKwE,EAAE,GAAQM,EAAK9E,KAAKwE,EAAE,GAChCO,EAAK/E,KAAKwE,EAAE,GAAQQ,EAAKhF,KAAKwE,EAAE,GAChCS,EAAKjF,KAAKwE,EAAE,GAAQU,EAAKlF,KAAKwE,EAAE,GAEhCgB,EAAK/C,EAAM+B,EAAE,GAAQiB,EAAKhD,EAAM+B,EAAE,GAClCkB,EAAKjD,EAAM+B,EAAE,GAAQmB,EAAKlD,EAAM+B,EAAE,GAClCoB,EAAKnD,EAAM+B,EAAE,GAAQqB,EAAKpD,EAAM+B,EAAE,GAMtC,OAJA1B,EAAO0B,EAAE,GAAKK,EAAKW,EAAKV,EAAKY,EAAI5C,EAAO0B,EAAE,GAAKK,EAAKY,EAAKX,EAAKa,EAC9D7C,EAAO0B,EAAE,GAAKO,EAAKS,EAAKR,EAAKU,EAAI5C,EAAO0B,EAAE,GAAKO,EAAKU,EAAKT,EAAKW,EAC9D7C,EAAO0B,EAAE,GAAKS,EAAKO,EAAKN,EAAKQ,EAAKE,EAAI9C,EAAO0B,EAAE,GAAKS,EAAKQ,EAAKP,EAAKS,EAAKE,EAEjE7F,MAUJ,YAAAyD,qBAAP,SAA4BC,EAAWC,EAAWb,GAI9C,OAHAA,EAAOY,EAAIA,EAAI1D,KAAKwE,EAAE,GAAKb,EAAI3D,KAAKwE,EAAE,GAAKxE,KAAKwE,EAAE,GAClD1B,EAAOa,EAAID,EAAI1D,KAAKwE,EAAE,GAAKb,EAAI3D,KAAKwE,EAAE,GAAKxE,KAAKwE,EAAE,GAE3CxE,MAQG,EAAA8F,SAAd,WACI,OAAO,IAAIC,EAAS,EAAG,EAAG,EAAG,EAAG,EAAG,IASzB,EAAAC,iBAAd,SAA+BtC,EAAWC,EAAWb,GACjDA,EAAO4B,WAAW,EAAG,EAAG,EAAG,EAAGhB,EAAGC,IASvB,EAAAsC,aAAd,SAA2BvC,EAAWC,EAAWb,GAC7CA,EAAO4B,WAAWhB,EAAG,EAAG,EAAGC,EAAG,EAAG,IAQvB,EAAAuC,cAAd,SAA4BC,EAAerD,GACvC,IAAIsD,EAAIrD,KAAKsD,IAAIF,GACbG,EAAIvD,KAAKwD,IAAIJ,GAEjBrD,EAAO4B,WAAW4B,EAAGF,GAAIA,EAAGE,EAAG,EAAG,IAqBxB,EAAAE,aAAd,SAA2BC,EAAYC,EAAYP,EAAeQ,EAAgBC,EAAgBC,EAAkC/D,GAChIiD,EAASC,iBAAiBS,EAAIC,EAAIX,EAASe,2BAE3Cf,EAASE,aAAaU,EAAQC,EAAQb,EAASgB,oBAE/ChB,EAASG,cAAcC,EAAOJ,EAASiB,qBAEvCjB,EAASC,kBAAkBS,GAAKC,EAAIX,EAASkB,4BAE7ClB,EAASe,0BAA0BvB,cAAcQ,EAASgB,mBAAoBhB,EAASmB,eACvFnB,EAASmB,cAAc3B,cAAcQ,EAASiB,oBAAqBjB,EAASoB,eACxEN,GACAd,EAASoB,cAAc5B,cAAcQ,EAASkB,2BAA4BlB,EAASqB,eACnFrB,EAASqB,cAAc7B,cAAcsB,EAAc/D,IAEnDiD,EAASoB,cAAc5B,cAAcQ,EAASkB,2BAA4BnE,IAjCnE,EAAAgE,0BAA4Bf,EAASD,WACrC,EAAAmB,2BAA6BlB,EAASD,WACtC,EAAAkB,oBAAsBjB,EAASD,WAC/B,EAAAiB,mBAAqBhB,EAASD,WAC9B,EAAAoB,cAAgBnB,EAASD,WACzB,EAAAqB,cAAgBpB,EAASD,WACzB,EAAAsB,cAAgBrB,EAASD,WA8B5C,EAzLA,G,QCAA,aAi8BI,WAEWuB,GAAA,KAAAA,OA77BH,KAAAC,OAAS,EACT,KAAAC,WAAY,EACZ,KAAAC,QAAU,EAMX,KAAAC,gBAAkBzD,EAAQD,QACzB,KAAA2D,YAAc,QACd,KAAAC,WAAa,GACb,KAAAC,YAAc,GACd,KAAAC,UAAY,IAAIjI,EAAa,GAAIA,EAAaC,gBAAgB,GAG/D,KAAAiI,OAAS,IAAIlI,EAAa,EAAGA,EAAaM,qBAAqB,GAE/D,KAAA6H,QAAU,IAAInI,EAAa,EAAGA,EAAaM,qBAAqB,GAG/D,KAAA8H,OAAS,GACT,KAAAC,OAA0B,KAGxB,KAAAC,qBAAuBC,EAAQC,4BAE/B,KAAAC,mBAAqBF,EAAQG,0BAE7B,KAAAC,UAAW,EAEX,KAAAC,WAAY,EAEf,KAAAC,mBAAqBzE,EAAQD,QAE7B,KAAA2E,8CAAgD1E,EAAQD,QAErD,KAAA4E,qBAAuB3E,EAAQD,QACjC,KAAA6E,aAAe,IAAIhJ,EAAa,GAChC,KAAAiJ,cAAgB,IAAIjJ,EAAa,GACjC,KAAAkJ,YAAc,IAAIlJ,EAAa,GAC/B,KAAAmJ,eAAiB,IAAInJ,EAAa,GAEnC,KAAAoJ,MAAQ,IAAIpJ,EAAa,GAEzB,KAAAqJ,KAAO,IAAIrJ,EAAa,GACvB,KAAAsJ,QAAU,EACV,KAAAC,QAAU,EACV,KAAAC,UAAY,EACZ,KAAAC,kBAAoB,GACpB,KAAAC,kBAAoB,GAErB,KAAAC,iBAAmB,EAASzD,WAEzB,KAAA0D,uBAAyB,EAAS1D,WAElC,KAAA2D,qBAAuB,IAAQC,OACjC,KAAAC,gBAAiB,EAGjB,KAAAC,YAAa,EACb,KAAAC,gBAAiB,EAGjB,KAAAC,UAAW,EACX,KAAAC,cAAgB,IAAQL,OACxB,KAAAM,WAAa,EACb,KAAAC,aAAe,EACf,KAAAC,cAAe,EACf,KAAAC,gBAA6C,GAC3C,KAAAC,YAAa,EACb,KAAAC,eAAiB,UACjB,KAAAC,mBAAqB,UAErB,KAAAC,gBAAiB,EAGpB,KAAAC,YAAmB,GAGnB,KAAAC,YAAa,EAGb,KAAAC,gBAAiB,EAajB,KAAAC,SAAgB,KAGhB,KAAAC,kBAAmB,EAEnB,KAAAC,kBAAmB,EAEnB,KAAAC,kBAAmB,EAMnB,KAAAC,cAAe,EAMf,KAAAC,aAAc,EAKd,KAAAC,gBAAiB,EAIhB,KAAAC,eAAiB,EAejB,KAAAC,eAAiB,EAejB,KAAAC,YAAc,EAed,KAAAC,aAAe,QAgBhB,KAAAC,YAAc,GAGX,KAAAC,aAAe,IAAI3L,EAAa,GAEhC,KAAA4L,aAAe,IAAI5L,EAAa,GAoBnC,KAAA6L,kBAAoB,IAAI,IAIxB,KAAAC,wBAA0B,IAAI,IAK9B,KAAAC,uBAAyB,IAAI,IAK7B,KAAAC,wBAA0B,IAAI,IAK9B,KAAAC,sBAAwB,IAAI,IAK5B,KAAAC,yBAA2B,IAAI,IAK/B,KAAAC,yBAA2B,IAAI,IAK/B,KAAAC,kBAAoB,IAAI,IAKxB,KAAAC,uBAAyB,IAAI,IAK7B,KAAAC,sBAAwB,IAAI,IA+wC3B,KAAAC,aAAe,IAAInI,EAAQ,EAAG,EAAG,EAAG,GA8bhD,OA70DI,sBAAW,4BAAa,C,IAAxB,WACI,OAAOhE,KAAKkL,gB,IAGhB,SAAyBzL,GACjBO,KAAKkL,iBAAmBzL,IAI5BO,KAAKkL,eAAiBzL,EACtBO,KAAKoM,iB,gCAKT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAKmL,gB,IAGhB,SAAyB1L,GACjBO,KAAKmL,iBAAmB1L,IAI5BO,KAAKmL,eAAiB1L,EACtBO,KAAKoM,iB,gCAKT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAKoL,a,IAGhB,SAAsB3L,GACdO,KAAKoL,cAAgB3L,IAIzBO,KAAKoL,YAAc3L,EACnBO,KAAKoM,iB,gCAKT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAKqL,c,IAGhB,SAAuB5L,GACfO,KAAKqL,eAAiB5L,IAI1BO,KAAKqL,aAAe5L,EACpBO,KAAKoM,iB,gCAcT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOpM,KAAKqM,gB,gCAOT,YAAAC,aAAP,WACI,OAAOtM,KAAKqM,gBAuDhB,sBAAW,mBAAI,C,IAAf,WACI,OAAOrM,KAAKuM,O,gCAIhB,sBAAW,yBAAU,C,IAArB,WACI,OAAOvM,KAAKwM,a,IAGhB,SAAsBC,GAClBzM,KAAKwM,YAAcC,G,gCAIvB,sBAAW,oBAAK,C,IAAhB,WACI,OAAOzM,KAAKsH,Q,IAGhB,SAAiB7H,GACTO,KAAKsH,SAAW7H,IAGpBO,KAAKuH,WAAY,EACjBvH,KAAKsH,OAAS7H,EACdO,KAAKoM,iB,gCAMT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAK6J,gB,IAGhB,SAAyBpK,GACjBO,KAAK6J,iBAAmBpK,IAI5BO,KAAK6J,eAAiBpK,EACtBO,KAAKoM,iB,gCAMT,sBAAW,qBAAM,C,IAAjB,WACI,OAAOpM,KAAKkJ,S,IAGhB,SAAkBzJ,GACVO,KAAKkJ,UAAYzJ,IAIrBO,KAAKkJ,QAAUzJ,EACfO,KAAKoM,eACLpM,KAAK0M,uB,gCAMT,sBAAW,qBAAM,C,IAAjB,WACI,OAAO1M,KAAKmJ,S,IAGhB,SAAkB1J,GACVO,KAAKmJ,UAAY1J,IAIrBO,KAAKmJ,QAAU1J,EACfO,KAAKoM,eACLpM,KAAK0M,uB,gCAMT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO1M,KAAKoJ,W,IAGhB,SAAoB3J,GACZO,KAAKoJ,YAAc3J,IAIvBO,KAAKoJ,UAAY3J,EACjBO,KAAKoM,eACLpM,KAAK0M,uB,gCAMT,sBAAW,+BAAgB,C,IAA3B,WACI,OAAO1M,KAAKsJ,mB,IAGhB,SAA4B7J,GACpBO,KAAKsJ,oBAAsB7J,IAI/BO,KAAKsJ,kBAAoB7J,EACzBO,KAAKoM,eACLpM,KAAK0M,uB,gCAMT,sBAAW,+BAAgB,C,IAA3B,WACI,OAAO1M,KAAKqJ,mB,IAGhB,SAA4B5J,GACpBO,KAAKqJ,oBAAsB5J,IAI/BO,KAAKqJ,kBAAoB5J,EACzBO,KAAKoM,eACLpM,KAAK0M,uB,gCAOT,sBAAW,kCAAmB,C,IAA9B,WACI,OAAO1M,KAAKkI,sB,IAGhB,SAA+BzI,GACvBO,KAAKkI,uBAAyBzI,IAIlCO,KAAKkI,qBAAuBzI,EAC5BO,KAAKoM,iB,gCAOT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAKqI,oB,IAGhB,SAA6B5I,GACrBO,KAAKqI,qBAAuB5I,IAIhCO,KAAKqI,mBAAqB5I,EAC1BO,KAAKoM,iB,gCAOT,sBAAW,oBAAK,C,IAAhB,WACI,OAAOpM,KAAK8H,OAAO5G,SAASlB,KAAKuM,Q,IAGrC,SAAiB9M,GACTO,KAAK8H,OAAO5G,SAASlB,KAAKuM,SAAW9M,GAIrCO,KAAK8H,OAAOvG,WAAW9B,IACvBO,KAAKoM,gB,gCAQb,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAK8H,OAAO3H,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,IAG7E,SAAyBhB,GACjBkN,MAAMlN,KAGVO,KAAKS,MAAQhB,EAAQ,O,gCAOzB,sBAAW,qBAAM,C,IAAjB,WACI,OAAOO,KAAK+H,QAAQ7G,SAASlB,KAAKuM,Q,IAGtC,SAAkB9M,GACVO,KAAK+H,QAAQ7G,SAASlB,KAAKuM,SAAW9M,GAItCO,KAAK+H,QAAQxG,WAAW9B,IACxBO,KAAKoM,gB,gCAQb,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK+H,QAAQ5H,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,S,IAG9E,SAA0BjB,GAClBkN,MAAMlN,KAGVO,KAAKU,OAASjB,EAAQ,O,gCAI1B,sBAAW,yBAAU,C,IAArB,WACI,OAAKO,KAAK8J,SAGH9J,KAAK0H,YAFD,I,IAKf,SAAsBjI,GACdO,KAAK0H,cAAgBjI,IAIzBO,KAAK0H,YAAcjI,EACnBO,KAAK4M,oB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAO5M,KAAK2H,Y,IAGhB,SAAqBlI,GACbO,KAAK2H,aAAelI,IAIxBO,KAAK2H,WAAalI,EAClBO,KAAK4M,oB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAO5M,KAAK4H,a,IAGhB,SAAsBnI,GACdO,KAAK4H,cAAgBnI,IAIzBO,KAAK4H,YAAcnI,EACnBO,KAAK4M,oB,gCAOT,sBAAW,oBAAK,C,IAAhB,WACI,OAAO5M,KAAKiI,Q,IAGhB,SAAiBxI,GAAjB,WACQO,KAAKiI,SACLjI,KAAKiI,OAAO4E,oBAAoBC,OAAO9M,KAAK+M,gBAC5C/M,KAAK+M,eAAiB,MAG1B/M,KAAKiI,OAASxI,EAEVO,KAAKiI,SACLjI,KAAK+M,eAAiB/M,KAAKiI,OAAO4E,oBAAoBG,KAAI,WACtD,EAAKZ,eACL,EAAKQ,sBAIb5M,KAAKoM,eACLpM,KAAK4M,mB,gCAIT,sBAAW,sCAAuB,C,IAAlC,WACI,OAAO5M,KAAK6H,UAAUoF,c,gCAI1B,sBAAW,+BAAgB,C,IAA3B,WACI,IAAIC,EAAgBlN,KAAKiI,OAASjI,KAAKiI,OAAOJ,UAAY7H,KAAK6H,UAE/D,OAAIqF,EAAc5M,QACP4M,EAAc3M,SAASP,KAAKuM,OAGhCW,EAAc/M,gBAAgBH,KAAKuM,MAAOvM,KAAKyI,mBAAmB/H,QAAUV,KAAK2I,qBAAqBjI,S,IAGjH,SAA4BjB,GACpBkN,MAAMlN,KAGVO,KAAKmN,SAAW1N,EAAQ,O,gCAI5B,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOO,KAAK6H,UAAU3G,SAASlB,KAAKuM,Q,IAGxC,SAAoB9M,GACZO,KAAK6H,UAAU3G,SAASlB,KAAKuM,SAAW9M,GAIxCO,KAAK6H,UAAUtG,WAAW9B,KAC1BO,KAAKoM,eACLpM,KAAK4M,oB,gCAKb,sBAAW,oBAAK,C,IAAhB,WACI,OAAO5M,KAAKgI,Q,IAGhB,SAAiBvI,GACTO,KAAKgI,SAAWvI,IAIpBO,KAAKgI,OAASvI,EACdO,KAAKoM,iB,gCAIT,sBAAW,qBAAM,C,IAAjB,WACI,OAAOpM,KAAKwH,S,IAGhB,SAAkB/H,GACVO,KAAKoN,SAAW3N,IAIpBO,KAAKwH,QAAU/H,EAEXO,KAAKqN,QACLrN,KAAKqN,OAAOC,gBAAgBtN,Q,gCAKpC,sBAAW,4BAAa,C,IAAxB,WACI,OAAOA,KAAKkK,c,IAGhB,SAAyBzK,GACjBO,KAAKkK,eAAiBzK,IAI1BO,KAAKkK,aAAezK,EACpBO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK4J,Y,IAGhB,SAAqBnK,GACbO,KAAK4J,aAAenK,IAIxBO,KAAK4J,WAAanK,EAClBO,KAAKoM,cAAa,K,gCAItB,sBAAW,sBAAO,C,IAAlB,WACI,OAAOpM,KAAKuI,U,gCAMhB,sBAAW,yBAAU,C,IAArB,WACI,OAAOvI,KAAKuN,a,gCAOhB,sBAAW,0BAAW,C,IAAtB,WACI,OAAOvN,KAAK4I,aAAa1H,SAASlB,KAAKuM,Q,IAG3C,SAAuB9M,GACfO,KAAK4I,aAAarH,WAAW9B,IAC7BO,KAAKoM,gB,gCAQb,sBAAW,kCAAmB,C,IAA9B,WACI,OAAOpM,KAAK4I,aAAazI,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,IAGnF,SAA+BhB,GACvBkN,MAAMlN,KAGVO,KAAKwN,YAAc/N,EAAQ,O,gCAO/B,sBAAW,2BAAY,C,IAAvB,WACI,OAAOO,KAAK6I,cAAc3H,SAASlB,KAAKuM,Q,IAG5C,SAAwB9M,GAChBO,KAAK6I,cAActH,WAAW9B,IAC9BO,KAAKoM,gB,gCAQb,sBAAW,mCAAoB,C,IAA/B,WACI,OAAOpM,KAAK6I,cAAc1I,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,IAGpF,SAAgChB,GACxBkN,MAAMlN,KAGVO,KAAKyN,aAAehO,EAAQ,O,gCAOhC,sBAAW,yBAAU,C,IAArB,WACI,OAAOO,KAAK8I,YAAY5H,SAASlB,KAAKuM,Q,IAG1C,SAAsB9M,GACdO,KAAK8I,YAAYvH,WAAW9B,IAC5BO,KAAKoM,gB,gCAQb,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOpM,KAAK8I,YAAY3I,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,S,IAGlF,SAA8BjB,GACtBkN,MAAMlN,KAGVO,KAAK0N,WAAajO,EAAQ,O,gCAO9B,sBAAW,4BAAa,C,IAAxB,WACI,OAAOO,KAAK+I,eAAe7H,SAASlB,KAAKuM,Q,IAG7C,SAAyB9M,GACjBO,KAAK+I,eAAexH,WAAW9B,IAC/BO,KAAKoM,gB,gCAQb,sBAAW,oCAAqB,C,IAAhC,WACI,OAAOpM,KAAK+I,eAAe5I,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,S,IAGrF,SAAiCjB,GACzBkN,MAAMlN,KAGVO,KAAK2N,cAAgBlO,EAAQ,O,gCAOjC,sBAAW,mBAAI,C,IAAf,WACI,OAAOO,KAAKgJ,MAAM9H,SAASlB,KAAKuM,Q,IAGpC,SAAgB9M,GACRO,KAAKgJ,MAAMzH,WAAW9B,IACtBO,KAAKoM,gB,gCAQb,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAKgJ,MAAM7I,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,IAG5E,SAAwBhB,GAChBkN,MAAMlN,KAGVO,KAAKsC,KAAO7C,EAAQ,O,gCAOxB,sBAAW,kBAAG,C,IAAd,WACI,OAAOO,KAAKiJ,KAAK/H,SAASlB,KAAKuM,Q,IAGnC,SAAe9M,GACPO,KAAKiJ,KAAK1H,WAAW9B,IACrBO,KAAKoM,gB,gCAQb,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAKiJ,KAAK9I,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,S,IAG3E,SAAuBjB,GACfkN,MAAMlN,KAGVO,KAAKuC,IAAM9C,EAAQ,O,gCAOvB,sBAAW,0BAAW,C,IAAtB,WACI,OAAOO,KAAKuL,aAAarK,SAASlB,KAAKuM,Q,IAG3C,SAAuB9M,GACfO,KAAKuL,aAAahK,WAAW9B,IAC7BO,KAAKoM,gB,gCAQb,sBAAW,kCAAmB,C,IAA9B,WACI,OAAOpM,KAAKuL,aAAapL,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,IAGnF,SAA+BhB,GACvBkN,MAAMlN,KAGVO,KAAK4N,YAAcnO,EAAQ,O,gCAO/B,sBAAW,0BAAW,C,IAAtB,WACI,OAAOO,KAAKwL,aAAatK,SAASlB,KAAKuM,Q,IAG3C,SAAuB9M,GACfO,KAAKwL,aAAajK,WAAW9B,IAC7BO,KAAKoM,gB,gCAQb,sBAAW,kCAAmB,C,IAA9B,WACI,OAAOpM,KAAKwL,aAAarL,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,S,IAGnF,SAA+BjB,GACvBkN,MAAMlN,KAGVO,KAAK6N,YAAcpO,EAAQ,O,gCAI/B,sBAAW,sBAAO,C,IAAlB,WACI,OAAOO,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,G,gCAIpE,sBAAW,sBAAO,C,IAAlB,WACI,OAAOT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,G,gCAIpE,sBAAW,wBAAS,C,IAApB,WACI,OAAOV,KAAKoK,Y,IAGhB,SAAqB3K,GACbO,KAAKoK,aAAe3K,IAIxBO,KAAKoK,WAAa3K,EAClBO,KAAKoM,iB,gCAGT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAKqK,gB,IAGhB,SAAyB5K,GACjBO,KAAKqK,iBAAmB5K,IAI5BO,KAAKqK,eAAiB5K,EACtBO,KAAKoM,iB,gCAGT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAKsK,oB,IAGhB,SAA6B7K,GACrBO,KAAKsK,qBAAuB7K,IAIhCO,KAAKsK,mBAAqB7K,EAC1BO,KAAKoM,iB,gCAcC,YAAAC,aAAV,WACI,MAAO,WAQJ,YAAAyB,oBAAP,SAA2BC,GACvB,OAAK/N,KAAKqN,OAINrN,KAAKqN,OAAOf,iBAAmByB,EACxB/N,KAAKqN,OAGTrN,KAAKqN,OAAOS,oBAAoBC,GAP5B,MAWR,YAAAnB,gBAAP,WACI5M,KAAK8J,UAAW,EAChB9J,KAAKoM,gBAQF,YAAA4B,YAAP,SAAmBC,GACf,QAAKjO,KAAKqN,SAINrN,KAAKqN,SAAWY,GAIbjO,KAAKqN,OAAOW,YAAYC,KAQ5B,YAAAC,oBAAP,SAA2BC,GACvB,IAAIrL,EAAS,IAAQ4G,OAIrB,OAFA1J,KAAKoO,yBAAyBD,EAAmBrL,GAE1CA,GASJ,YAAAsL,yBAAP,SAAgCD,EAA4BrL,GAGxD,OAFAA,EAAOY,EAAIyK,EAAkBzK,EAAI1D,KAAKyH,gBAAgBnF,KACtDQ,EAAOa,EAAIwK,EAAkBxK,EAAI3D,KAAKyH,gBAAgBlF,IAC/CvC,MAQJ,YAAAqO,0BAAP,SAAiCF,GAC7B,IAAIrL,EAAS,IAAQ4G,OAKrB,OAHA5G,EAAOY,EAAIyK,EAAkBzK,EAAI1D,KAAK2I,qBAAqBrG,KAC3DQ,EAAOa,EAAIwK,EAAkBxK,EAAI3D,KAAK2I,qBAAqBpG,IAEpDO,GAQJ,YAAAwL,cAAP,SAAqBC,EAAmBC,GACpC,GAAKxO,KAAKuM,OAASvM,KAAKqN,SAAWrN,KAAKuM,MAAMkC,eAA9C,CAKAzO,KAAK0O,oBAAsBvG,EAAQwG,0BACnC3O,KAAK4O,kBAAoBzG,EAAQ0G,uBAEjC,IAAIC,EAAiB9O,KAAKuM,MAAMwC,mBAAmBP,GAC/CQ,EAAoB,IAAQC,QAAQV,EAAU,IAAOzI,WAAY0I,EAAMU,qBAAsBJ,GAEjG9O,KAAKmP,yBAAyBH,GAE1BA,EAAkBI,EAAI,GAAKJ,EAAkBI,EAAI,EACjDpP,KAAKqP,eAAgB,EAGzBrP,KAAKqP,eAAgB,OAhBjB,IAAMC,MAAM,2EAyBb,YAAAC,oBAAP,SAA2BC,EAAoBC,EAAwCC,QAAxC,IAAAD,OAAA,IAUxC,YAAAE,eAAP,SAAsBF,EAAiCC,GACnD,IAAIF,EAAU,IAAII,MAIlB,OAFA5P,KAAKuP,oBAAoBC,EAASC,EAAuBC,GAElDF,GAQJ,YAAAK,aAAP,SAAoBC,GAChB,IAAK9P,KAAKuM,OAASvM,KAAKqN,QAAUrN,KAAKqN,SAAWrN,KAAKuM,MAAMkC,eACrDqB,GACA,IAAMR,MAAM,2EAFpB,CAOA,IAAIS,EAAQ/P,KAAKuM,MAAMyD,gBAAgBC,QAAQjQ,MAC/C,IAAe,IAAX+P,EAKA,OAJA/P,KAAKuN,YAAcuC,OACdA,GACD9P,KAAKuM,MAAMyD,gBAAgBE,OAAOH,EAAO,IAGrCD,IAIZ9P,KAAK0O,oBAAsBvG,EAAQwG,0BACnC3O,KAAK4O,kBAAoBzG,EAAQ0G,uBACjC7O,KAAKuN,YAAcuC,EACnB9P,KAAKuM,MAAMyD,gBAAgBG,KAAKnQ,SAI7B,YAAAmP,yBAAP,SAAgCH,GAC5B,IAAIoB,EAAUpQ,KAAKgJ,MAAMzI,SAASP,KAAKuM,OACnC8D,EAASrQ,KAAKiJ,KAAK1I,SAASP,KAAKuM,OAEjC+D,EAAYtB,EAAkBtL,EAAI1D,KAAKuL,aAAahL,SAASP,KAAKuM,OAAUvM,KAAKyH,gBAAgBhH,MAAQ,EACzG8P,EAAWvB,EAAkBrL,EAAI3D,KAAKwL,aAAajL,SAASP,KAAKuM,OAAUvM,KAAKyH,gBAAgB/G,OAAS,EAEzGV,KAAKgJ,MAAMjJ,uBAAyBC,KAAKiJ,KAAKlJ,wBAC1CgD,KAAKyN,IAAIF,EAAUF,GAAW,KAC9BE,EAAUF,GAGVrN,KAAKyN,IAAID,EAASF,GAAU,KAC5BE,EAASF,IAIjBrQ,KAAKsC,KAAOgO,EAAU,KACtBtQ,KAAKuC,IAAMgO,EAAS,KAEpBvQ,KAAKgJ,MAAMjJ,uBAAwB,EACnCC,KAAKiJ,KAAKlJ,uBAAwB,EAClCC,KAAKoM,gBAIF,YAAAqE,YAAP,SAAmBhE,GACfzM,KAAKuI,UAAW,EAChBvI,KAAKyH,gBAAgBnF,MAAQmK,GAI1B,YAAAiE,WAAP,SAAkBjE,GACdzM,KAAKuI,UAAW,EAChBvI,KAAKyH,gBAAgBlF,KAAOkK,GAIzB,YAAAC,mBAAP,WACI1M,KAAK2J,gBAAiB,EACtB3J,KAAK2Q,iCAIF,YAAAA,8BAAP,aAKO,YAAAC,gBAAP,SAAuBC,GAGnB,OADA7Q,KAAKyH,gBAAgBrE,eAAepD,KAAKuJ,iBAAkBvJ,KAAKmM,gBAC5DnM,KAAKmM,aAAa7J,MAAQuO,EAAKvO,KAAOuO,EAAKpQ,WAI3CT,KAAKmM,aAAa5J,KAAOsO,EAAKtO,IAAMsO,EAAKnQ,YAIzCV,KAAKmM,aAAa7J,KAAOtC,KAAKmM,aAAa1L,OAASoQ,EAAKvO,SAIzDtC,KAAKmM,aAAa5J,IAAMvC,KAAKmM,aAAazL,QAAUmQ,EAAKtO,QAQvD,YAAAuO,eAAV,WAEI,GADA9Q,KAAK+Q,aACD/Q,KAAKI,MAAQJ,KAAKI,KAAK4Q,8BAOvB,GALAhR,KAAKyH,gBAAgBrE,eAAepD,KAAKuJ,iBAAkBvJ,KAAKmM,cAGhEnI,EAAQrB,aAAa3C,KAAKmM,aAAcnM,KAAK0I,8CAA+C1I,KAAKmM,cAE7FnM,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,cAAe,CAE7D,IAAID,EAAgBlR,KAAKkR,cACrBC,EAAgBnR,KAAKmR,cACrBF,EAAajR,KAAKiR,WAElBG,EAAmBrO,KAAKC,IAAID,KAAKC,IAAIkO,EAAe,GAAkB,EAAbD,EAAgB,GACzEI,EAAoBtO,KAAKG,IAAIH,KAAKG,IAAIgO,EAAe,GAAkB,EAAbD,EAAgB,GAC1EK,EAAkBvO,KAAKC,IAAID,KAAKC,IAAImO,EAAe,GAAkB,EAAbF,EAAgB,GACxEM,EAAqBxO,KAAKG,IAAIH,KAAKG,IAAIiO,EAAe,GAAkB,EAAbF,EAAgB,GAE/EjR,KAAKI,KAAK0Q,eACN/N,KAAKa,MAAM5D,KAAKmM,aAAa7J,KAAO8O,GACpCrO,KAAKa,MAAM5D,KAAKmM,aAAa5J,IAAM+O,GACnCvO,KAAKc,KAAK7D,KAAKmM,aAAa7J,KAAOtC,KAAKmM,aAAa1L,MAAQ4Q,GAC7DtO,KAAKc,KAAK7D,KAAKmM,aAAa5J,IAAMvC,KAAKmM,aAAazL,OAAS6Q,SAGjEvR,KAAKI,KAAK0Q,eACN/N,KAAKa,MAAM5D,KAAKmM,aAAa7J,MAC7BS,KAAKa,MAAM5D,KAAKmM,aAAa5J,KAC7BQ,KAAKc,KAAK7D,KAAKmM,aAAa7J,KAAOtC,KAAKmM,aAAa1L,OACrDsC,KAAKc,KAAK7D,KAAKmM,aAAa5J,IAAMvC,KAAKmM,aAAazL,UAQ7D,YAAA0L,aAAP,SAAoBoF,QAAA,IAAAA,OAAA,IACXxR,KAAK4J,YAAe4H,KAIzBxR,KAAKuI,UAAW,EAGZvI,KAAKuM,OACLvM,KAAKuM,MAAMkF,gBAKZ,YAAAC,gBAAP,WACI1R,KAAKoM,eAEDpM,KAAK2R,OACL3R,KAAK4R,gBAKN,YAAAC,MAAP,SAAazR,GACTJ,KAAKuM,MAAQnM,EACTJ,KAAKuM,QACLvM,KAAK8R,SAAW9R,KAAKuM,MAAMwF,WAAYC,gBAKrC,YAAAjB,WAAV,SAAqBkB,GACjB,GAAKjS,KAAK2J,gBAAmC,IAAjB3J,KAAKkJ,SAAkC,IAAjBlJ,KAAKmJ,SAAoC,IAAnBnJ,KAAKoJ,UAA7E,CAKA,IAAI8I,EAAUlS,KAAKyH,gBAAgBhH,MAAQT,KAAKqJ,kBAAoBrJ,KAAKyH,gBAAgBnF,KACrF6P,EAAUnS,KAAKyH,gBAAgB/G,OAASV,KAAKsJ,kBAAoBtJ,KAAKyH,gBAAgBlF,IACtF0P,IACAA,EAAQG,UAAUF,EAASC,GAG3BF,EAAQI,OAAOrS,KAAKoJ,WAGpB6I,EAAQK,MAAMtS,KAAKkJ,QAASlJ,KAAKmJ,SAGjC8I,EAAQG,WAAWF,GAAUC,KAG7BnS,KAAK2J,gBAAkB3J,KAAKuS,iBAAmBL,GAAWlS,KAAKwS,iBAAmBL,KAClFnS,KAAKuS,eAAiBL,EACtBlS,KAAKwS,eAAiBL,EACtBnS,KAAK2J,gBAAiB,EACtB3J,KAAK2Q,gCAEL,EAASnK,cAAc0L,GAAUC,EAASnS,KAAKoJ,UAAWpJ,KAAKkJ,QAASlJ,KAAKmJ,QAASnJ,KAAKqN,OAASrN,KAAKqN,OAAO9D,iBAAmB,KAAMvJ,KAAKuJ,kBAE9IvJ,KAAKuJ,iBAAiB3E,YAAY5E,KAAKwJ,2BAKxC,YAAAiJ,iBAAP,SAAwBR,GACfjS,KAAK0S,gBAIVT,EAAQU,OACRV,EAAQW,YAAc,UACtBX,EAAQY,UAAY,EAEpB7S,KAAK8S,yBAAyBb,GAC9BA,EAAQc,YAIL,YAAAD,yBAAP,SAAgCb,GAC5BA,EAAQe,WAAWhT,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,SAInH,YAAAuS,aAAV,SAAuBhB,GACfjS,KAAKkT,0BACLlT,KAAK8J,UAAW,GAGhB9J,KAAK8J,WACL9J,KAAK4R,eACL5R,KAAK8J,UAAW,GAGhB9J,KAAK2R,QACLM,EAAQkB,KAAOnT,KAAK2R,OAGpB3R,KAAKgI,SACLiK,EAAQmB,UAAYpT,KAAKgI,QAGzBG,EAAQkL,sBACRpB,EAAQqB,aAAetT,KAAKsH,OACrBtH,KAAKuH,YACZ0K,EAAQqB,YAActT,KAAKqN,OAASrN,KAAKqN,OAAOkG,MAAQvT,KAAKsH,OAAStH,KAAKsH,SAK5E,YAAAkM,QAAP,SAAeC,EAAwBxB,GACnC,IAAKjS,KAAK0T,WAAa1T,KAAK2T,WAAa3T,KAAKqP,eAC1C,OAAO,EAGX,GAAIrP,KAAKuI,WAAavI,KAAK2I,qBAAqB7E,WAAW2P,GAAgB,CACvEzT,KAAKI,KAAKwT,kBAEV5T,KAAKyH,gBAAgBrE,eAAepD,KAAKuJ,iBAAkBvJ,KAAK0I,+CAEhEuJ,EAAQU,OAER3S,KAAKiT,aAAahB,GAElB,IAAI4B,EAAe,EACnB,GACI7T,KAAKuK,gBAAiB,EACtBvK,KAAK8T,iBAAiBL,EAAexB,GACrC4B,UAEG7T,KAAKuK,gBAAkBsJ,EAAe,GAEzCA,GAAgB,GAChB,IAAOvE,MAAM,8CAA8CtP,KAAKqH,KAAI,cAAcrH,KAAK8R,SAAQ,KAGnGG,EAAQc,UACR/S,KAAK8Q,iBACL9Q,KAAK+T,uBAAuBN,GAMhC,OAHAzT,KAAKwI,UAAYxI,KAAKuI,SACtBvI,KAAKuI,UAAW,GAET,GAID,YAAAuL,iBAAV,SAA2BL,EAAwBxB,GAC/CjS,KAAKyH,gBAAgBjF,SAASiR,GAG9BzT,KAAKgU,YAAYP,EAAexB,GAEhCjS,KAAKiU,WACLjU,KAAKkU,kBAAkBT,EAAexB,GAGtCjS,KAAKyH,gBAAgBnF,KAAmC,EAA5BtC,KAAKyH,gBAAgBnF,KACjDtC,KAAKyH,gBAAgBlF,IAAiC,EAA3BvC,KAAKyH,gBAAgBlF,IAChDvC,KAAKyH,gBAAgBhH,MAAqC,EAA7BT,KAAKyH,gBAAgBhH,MAClDT,KAAKyH,gBAAgB/G,OAAuC,EAA9BV,KAAKyH,gBAAgB/G,OAGnDV,KAAKmU,sBAAsBV,EAAexB,GAE1CjS,KAAK2I,qBAAqBnG,SAASiR,GAE/BzT,KAAKgM,kBAAkBoI,gBACvBpU,KAAKgM,kBAAkBqI,gBAAgBrU,OAIrC,YAAA+T,uBAAV,SAAiCN,GAC7B,GAAIzT,KAAKqN,QAAUrN,KAAKqN,OAAOtC,aAAc,CAEzC,GAAI/K,KAAKyH,gBAAgBnF,KAAOmR,EAAcnR,KAAOmR,EAAchT,MAE/D,YADAT,KAAKyK,YAAa,GAItB,GAAIzK,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQgT,EAAcnR,KAEvE,YADAtC,KAAKyK,YAAa,GAItB,GAAIzK,KAAKyH,gBAAgBlF,IAAMkR,EAAclR,IAAMkR,EAAc/S,OAE7D,YADAV,KAAKyK,YAAa,GAItB,GAAIzK,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS+S,EAAclR,IAEvE,YADAvC,KAAKyK,YAAa,GAK1BzK,KAAKyK,YAAa,GAIf,YAAAwJ,SAAP,WAEQjU,KAAK8H,OAAOxH,QACZN,KAAKyH,gBAAgBhH,MAAQT,KAAK8H,OAAOvH,SAASP,KAAKuM,OAEvDvM,KAAKyH,gBAAgBhH,OAAST,KAAK8H,OAAOvH,SAASP,KAAKuM,OAGxDvM,KAAK+H,QAAQzH,QACbN,KAAKyH,gBAAgB/G,OAASV,KAAK+H,QAAQxH,SAASP,KAAKuM,OAEzDvM,KAAKyH,gBAAgB/G,QAAUV,KAAK+H,QAAQxH,SAASP,KAAKuM,QAKxD,YAAA2H,kBAAV,SAA4BT,EAAwBxB,GAChD,IAAIxR,EAAQT,KAAKyH,gBAAgBhH,MAC7BC,EAASV,KAAKyH,gBAAgB/G,OAE9B4T,EAAcb,EAAchT,MAC5B8T,EAAed,EAAc/S,OAG7BgD,EAAI,EACJC,EAAI,EAER,OAAQ3D,KAAK0O,qBACT,KAAKvG,EAAQwG,0BACTjL,EAAI,EACJ,MACJ,KAAKyE,EAAQqM,2BACT9Q,EAAI4Q,EAAc7T,EAClB,MACJ,KAAK0H,EAAQC,4BACT1E,GAAK4Q,EAAc7T,GAAS,EAIpC,OAAQT,KAAK4O,mBACT,KAAKzG,EAAQ0G,uBACTlL,EAAI,EACJ,MACJ,KAAKwE,EAAQsM,0BACT9Q,EAAI4Q,EAAe7T,EACnB,MACJ,KAAKyH,EAAQG,0BACT3E,GAAK4Q,EAAe7T,GAAU,EAIlCV,KAAK4I,aAAatI,SAClBN,KAAKyH,gBAAgBnF,MAAQtC,KAAK4I,aAAarI,SAASP,KAAKuM,OAC7DvM,KAAKyH,gBAAgBhH,OAAST,KAAK4I,aAAarI,SAASP,KAAKuM,SAE9DvM,KAAKyH,gBAAgBnF,MAAQgS,EAActU,KAAK4I,aAAarI,SAASP,KAAKuM,OAC3EvM,KAAKyH,gBAAgBhH,OAAS6T,EAActU,KAAK4I,aAAarI,SAASP,KAAKuM,QAG5EvM,KAAK6I,cAAcvI,QACnBN,KAAKyH,gBAAgBhH,OAAST,KAAK6I,cAActI,SAASP,KAAKuM,OAE/DvM,KAAKyH,gBAAgBhH,OAAS6T,EAActU,KAAK6I,cAActI,SAASP,KAAKuM,OAG7EvM,KAAK8I,YAAYxI,SACjBN,KAAKyH,gBAAgBlF,KAAOvC,KAAK8I,YAAYvI,SAASP,KAAKuM,OAC3DvM,KAAKyH,gBAAgB/G,QAAUV,KAAK8I,YAAYvI,SAASP,KAAKuM,SAE9DvM,KAAKyH,gBAAgBlF,KAAOgS,EAAevU,KAAK8I,YAAYvI,SAASP,KAAKuM,OAC1EvM,KAAKyH,gBAAgB/G,QAAU6T,EAAevU,KAAK8I,YAAYvI,SAASP,KAAKuM,QAG7EvM,KAAK+I,eAAezI,QACpBN,KAAKyH,gBAAgB/G,QAAUV,KAAK+I,eAAexI,SAASP,KAAKuM,OAEjEvM,KAAKyH,gBAAgB/G,QAAU6T,EAAevU,KAAK+I,eAAexI,SAASP,KAAKuM,OAGhFvM,KAAKgJ,MAAM1I,QACXN,KAAKyH,gBAAgBnF,MAAQtC,KAAKgJ,MAAMzI,SAASP,KAAKuM,OAEtDvM,KAAKyH,gBAAgBnF,MAAQgS,EAActU,KAAKgJ,MAAMzI,SAASP,KAAKuM,OAGpEvM,KAAKiJ,KAAK3I,QACVN,KAAKyH,gBAAgBlF,KAAOvC,KAAKiJ,KAAK1I,SAASP,KAAKuM,OAEpDvM,KAAKyH,gBAAgBlF,KAAOgS,EAAevU,KAAKiJ,KAAK1I,SAASP,KAAKuM,OAGvEvM,KAAKyH,gBAAgBnF,MAAQoB,EAC7B1D,KAAKyH,gBAAgBlF,KAAOoB,GAItB,YAAAqQ,YAAV,SAAsBP,EAAwBxB,KAKpC,YAAAkC,sBAAV,SAAgCV,EAAwBxB,KAK9C,YAAAyC,iBAAV,SAA2BzC,KAMnB,YAAA0C,MAAR,SAAc1C,EAAmC2C,GAG7C,GAFA3C,EAAQ4C,YACR1M,EAAQ2M,aAAatS,SAASxC,KAAKyH,iBAC/BmN,EAAsB,CAEtBA,EAAqBxR,eAAepD,KAAKwJ,uBAAwBxJ,KAAKmM,cAGtE,IAAI4I,EAAe,IAAI/Q,EAAQ,EAAG,EAAG,EAAG,GACxC+Q,EAAazS,KAAOS,KAAKG,IAAIlD,KAAKmM,aAAa7J,KAAMtC,KAAKyH,gBAAgBnF,MAC1EyS,EAAaxS,IAAMQ,KAAKG,IAAIlD,KAAKmM,aAAa5J,IAAKvC,KAAKyH,gBAAgBlF,KACxEwS,EAAatU,MAAQsC,KAAKC,IAAIhD,KAAKmM,aAAa7J,KAAOtC,KAAKmM,aAAa1L,MAAOT,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,OAASsU,EAAazS,KACvJyS,EAAarU,OAASqC,KAAKC,IAAIhD,KAAKmM,aAAa5J,IAAMvC,KAAKmM,aAAazL,OAAQV,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,QAAUqU,EAAaxS,IACxJ4F,EAAQ2M,aAAatS,SAASuS,GAGlC,GAAI/U,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,cAAe,CAC7D,IAAID,EAAgBlR,KAAKkR,cACrBC,EAAgBnR,KAAKmR,cACrBF,EAAajR,KAAKiR,WAElBG,EAAmBrO,KAAKC,IAAID,KAAKC,IAAIkO,EAAe,GAAkB,EAAbD,EAAgB,GACzEI,EAAoBtO,KAAKG,IAAIH,KAAKG,IAAIgO,EAAe,GAAkB,EAAbD,EAAgB,GAC1EK,EAAkBvO,KAAKC,IAAID,KAAKC,IAAImO,EAAe,GAAkB,EAAbF,EAAgB,GACxEM,EAAqBxO,KAAKG,IAAIH,KAAKG,IAAIiO,EAAe,GAAkB,EAAbF,EAAgB,GAE/EgB,EAAQpB,KACJ1I,EAAQ2M,aAAaxS,KAAO8O,EAC5BjJ,EAAQ2M,aAAavS,IAAM+O,EAC3BnJ,EAAQ2M,aAAarU,MAAQ4Q,EAAoBD,EACjDjJ,EAAQ2M,aAAapU,OAAS6Q,EAAqBD,QAGvDW,EAAQpB,KAAK1I,EAAQ2M,aAAaxS,KAAM6F,EAAQ2M,aAAavS,IAAK4F,EAAQ2M,aAAarU,MAAO0H,EAAQ2M,aAAapU,QAGvHuR,EAAQ+C,QAIL,YAAAC,QAAP,SAAehD,EAAmC2C,GAC9C,OAAK5U,KAAK2T,WAAa3T,KAAKqP,eAAiBrP,KAAKyK,YAC9CzK,KAAKuI,UAAW,GACT,IAGXvI,KAAKI,KAAK8U,kBAEVjD,EAAQU,OAER3S,KAAKiT,aAAahB,GAGlBjS,KAAK+Q,WAAWkB,GAGZjS,KAAKgL,aACLhL,KAAK2U,MAAM1C,EAAS2C,GAGpB5U,KAAKiM,uBAAuBmI,gBAC5BpU,KAAKiM,uBAAuBoI,gBAAgBrU,MAG5CA,KAAKiL,iBAAmBjL,KAAKwI,WAAaxI,KAAKmV,WAC/ClD,EAAQmD,aAAapV,KAAKmV,WAAYnV,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,KAEtFvC,KAAKqV,MAAMpD,EAAS2C,GAGpB5U,KAAKiL,gBAAkBjL,KAAKwI,YAC5BxI,KAAKmV,WAAalD,EAAQqD,aAAatV,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,SAGjJV,KAAKyS,iBAAiBR,GAElBjS,KAAKkM,sBAAsBkI,gBAC3BpU,KAAKkM,sBAAsBmI,gBAAgBrU,MAG/CiS,EAAQc,WAED,IAIJ,YAAAsC,MAAP,SAAapD,EAAmC2C,KAUzC,YAAAW,SAAP,SAAgB7R,EAAWC,GAQvB,OANA3D,KAAKwJ,uBAAuB/F,qBAAqBC,EAAGC,EAAG3D,KAAKyJ,sBAE5D/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,IAG1BD,EAAI1D,KAAKyH,gBAAgBnF,UAIzBoB,EAAI1D,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,WAIrDkD,EAAI3D,KAAKyH,gBAAgBlF,SAIzBoB,EAAI3D,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,UAIpDV,KAAK6K,mBACL7K,KAAKuM,MAAMiJ,qBAAsB,IAE9B,OAIJ,YAAAC,gBAAP,SAAuB/R,EAAWC,EAAW+R,EAAcC,EAAmB1R,EAAqB2R,EAAiBC,GAChH,QAAK7V,KAAKoK,gBAGLpK,KAAK4K,mBAAqB5K,KAAK2T,WAAa3T,KAAKkK,kBAIjDlK,KAAKuV,SAAS7R,EAAGC,KAItB3D,KAAK8V,oBAAoBJ,EAAMhS,EAAGC,EAAGgS,EAAW1R,EAAa2R,EAAQC,IAE9D,MAIJ,YAAAE,eAAP,SAAsBC,EAAiBC,EAAsBN,GAChC3V,KAAK0L,wBAAwB2I,gBAAgB4B,GAAc,EAAGD,EAAQhW,OAE/D,MAAfA,KAAKqN,QAAkBrN,KAAKqN,OAAO0I,eAAeC,EAAQC,EAAaN,IAIrF,YAAAO,gBAAP,SAAuBF,GACnB,QAAKhW,KAAKoK,eAGNpK,KAAKiK,YAAc,MAIG,IAAtBjK,KAAKiK,cACLjK,KAAKiK,YAAc,GAEvBjK,KAAKiK,cAEoBjK,KAAK+L,yBAAyBsI,gBAAgBrU,MAAO,EAAGgW,EAAQhW,OAEzD,MAAfA,KAAKqN,QAAkBrN,KAAKqN,OAAO6I,gBAAgBF,IAE7D,KAIJ,YAAAG,cAAP,SAAqBH,EAAiBxE,GAClC,QADkC,IAAAA,OAAA,GAC7BA,GAAWxR,KAAKoK,YAAc4L,IAAWhW,KAA9C,CAGAA,KAAKiK,YAAc,EAEnB,IAAImM,GAAqB,EAEpBJ,EAAOhI,YAAYhO,QACpBoW,EAAYpW,KAAK2L,uBAAuB0I,gBAAgBrU,MAAO,EAAGgW,EAAQhW,OAG1EoW,GAA4B,MAAfpW,KAAKqN,QAClBrN,KAAKqN,OAAO8I,cAAcH,EAAQxE,KAKnC,YAAA6E,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAK5E,OAFAjE,KAAKkW,gBAAgBlW,MAEG,IAApBA,KAAKgK,aAIThK,KAAKgK,aAELhK,KAAKmK,gBAAgBwL,IAAa,EAET3V,KAAK4L,wBAAwByI,gBAAgB,IAAI,EAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,OAEjG,MAAfA,KAAKqN,QAAkBrN,KAAKqN,OAAOgJ,eAAeL,EAAQC,EAAaN,EAAW1R,IAE5F,IAIJ,YAAAqS,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmB1R,EAAqBsS,GAC/F,GAAKvW,KAAKoK,WAAV,CAGApK,KAAKgK,WAAa,SAEXhK,KAAKmK,gBAAgBwL,GAE5B,IAAIa,EAA0BD,EAC1BA,IAAgBvW,KAAKiK,YAAc,IAA2B,IAAtBjK,KAAKiK,eAC7CuM,EAAiBxW,KAAK8L,yBAAyBuI,gBAAgB,IAAI,EAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,OAErGA,KAAK6L,sBAAsBwI,gBAAgB,IAAI,EAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,OAE/F,MAAfA,KAAKqN,QAAkBrN,KAAKqN,OAAOiJ,aAAaN,EAAQC,EAAaN,EAAW1R,EAAauS,KAI3G,YAAAC,gBAAP,SAAuBd,GACnB,QADmB,IAAAA,MAAA,MACD,OAAdA,EACA3V,KAAKsW,aAAatW,KAAM,IAAQ0J,OAAQiM,EAAW,GAAG,QAEtD,IAAK,IAAIe,KAAO1W,KAAKmK,gBACjBnK,KAAKsW,aAAatW,KAAM,IAAQ0J,QAASgN,EAAe,GAAG,IAMhE,YAAAC,eAAP,SAAsBf,EAAiBC,GAC9B7V,KAAKoK,aAGepK,KAAKyL,kBAAkB4I,gBAAgB,IAAI,IAAQuB,EAAQC,KAEpD,MAAf7V,KAAKqN,QAAkBrN,KAAKqN,OAAOsJ,eAAef,EAAQC,KAIxE,YAAAC,oBAAP,SAA2BJ,EAAchS,EAAWC,EAAWgS,EAAmB1R,EAAqB2R,EAAiBC,GACpH,IAAK7V,KAAKoK,WACN,OAAO,EAGX,GADApK,KAAK+J,cAAcrH,eAAegB,EAAGC,GACjC+R,IAAS,IAAkBkB,YAAa,CACxC5W,KAAK+V,eAAe/V,KAAMA,KAAK+J,cAAe4L,GAE9C,IAAIkB,EAAsB7W,KAAKuM,MAAMuK,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwB7W,MAC/C6W,EAAoBV,cAAcnW,MAGlC6W,IAAwB7W,MACxBA,KAAKkW,gBAAgBlW,MAGzBA,KAAKuM,MAAMuK,iBAAiBnB,GAAa3V,MAClC,EAGX,OAAI0V,IAAS,IAAkBqB,aAC3B/W,KAAKqW,eAAerW,KAAMA,KAAK+J,cAAe4L,EAAW1R,GACzDjE,KAAKuM,MAAMyK,yBAAyBhX,KAAM2V,GAC1C3V,KAAKuM,MAAM0K,mBAAqBjX,MACzB,GAGP0V,IAAS,IAAkBwB,WACvBlX,KAAKuM,MAAM4K,iBAAiBxB,IAC5B3V,KAAKuM,MAAM4K,iBAAiBxB,GAAWW,aAAatW,KAAMA,KAAK+J,cAAe4L,EAAW1R,GAAa,UAEnGjE,KAAKuM,MAAM4K,iBAAiBxB,IAC5B,KAGPD,IAAS,IAAkB0B,eACvBpX,KAAKuM,MAAMuK,iBAAiBnB,MAC5B3V,KAAKuM,MAAMuK,iBAAiBnB,GAAWgB,eAAef,EAAQC,IACvD,IAOX,YAAAjE,aAAR,YACS5R,KAAK2R,OAAU3R,KAAK8J,YAIrB9J,KAAKiI,OACLjI,KAAK2R,MAAQ3R,KAAKiI,OAAOoP,UAAY,IAAMrX,KAAKiI,OAAOqP,WAAa,IAAMtX,KAAKuX,iBAAmB,MAAQvX,KAAKiI,OAAOuP,WAEtHxX,KAAK2R,MAAQ3R,KAAK2H,WAAa,IAAM3H,KAAK4H,YAAc,IAAM5H,KAAKuX,iBAAmB,MAAQvX,KAAK0H,YAGvG1H,KAAKwM,YAAcrE,EAAQsP,eAAezX,KAAK2R,SAI5C,YAAA+F,QAAP,YACI1X,KAAKgM,kBAAkB2L,QACvB3X,KAAKiM,uBAAuB0L,QAC5B3X,KAAKkM,sBAAsByL,QAC3B3X,KAAK4L,wBAAwB+L,QAC7B3X,KAAK+L,yBAAyB4L,QAC9B3X,KAAK0L,wBAAwBiM,QAC7B3X,KAAK2L,uBAAuBgM,QAC5B3X,KAAK6L,sBAAsB8L,QAC3B3X,KAAK8L,yBAAyB6L,QAC9B3X,KAAKyL,kBAAkBkM,QAEnB3X,KAAK+M,gBAAkB/M,KAAKiI,SAC5BjI,KAAKiI,OAAO4E,oBAAoBC,OAAO9M,KAAK+M,gBAC5C/M,KAAK+M,eAAiB,MAGtB/M,KAAKqN,SACLrN,KAAKqN,OAAOuK,cAAc5X,MAC1BA,KAAKqN,OAAS,MAGdrN,KAAKuM,SACOvM,KAAKuM,MAAMyD,gBAAgBC,QAAQjQ,OAClC,GACTA,KAAK6P,aAAa,QAe9B,sBAAkB,8BAAyB,C,IAA3C,WACI,OAAO1H,EAAQ0P,4B,gCAInB,sBAAkB,+BAA0B,C,IAA5C,WACI,OAAO1P,EAAQ2P,6B,gCAInB,sBAAkB,gCAA2B,C,IAA7C,WACI,OAAO3P,EAAQ4P,8B,gCAInB,sBAAkB,2BAAsB,C,IAAxC,WACI,OAAO5P,EAAQ6P,yB,gCAInB,sBAAkB,8BAAyB,C,IAA3C,WACI,OAAO7P,EAAQ8P,4B,gCAInB,sBAAkB,8BAAyB,C,IAA3C,WACI,OAAO9P,EAAQ+P,4B,gCAML,EAAAT,eAAd,SAA6BtE,GAEzB,GAAIhL,EAAQgQ,iBAAiBhF,GACzB,OAAOhL,EAAQgQ,iBAAiBhF,GAGpC,IAAIiF,EAAOC,SAASC,cAAc,QAClCF,EAAKG,UAAY,KACjBH,EAAKI,MAAMrF,KAAOA,EAElB,IAAIsF,EAAQJ,SAASC,cAAc,OACnCG,EAAMD,MAAME,QAAU,eACtBD,EAAMD,MAAM/X,MAAQ,MACpBgY,EAAMD,MAAM9X,OAAS,MACrB+X,EAAMD,MAAMG,cAAgB,SAE5B,IAAIC,EAAMP,SAASC,cAAc,OACjCM,EAAIC,YAAYT,GAChBQ,EAAIC,YAAYJ,GAEhBJ,SAASS,KAAKD,YAAYD,GAE1B,IAAIG,EAAa,EACbC,EAAa,EACjB,IACIA,EAAaP,EAAMQ,wBAAwB1W,IAAM6V,EAAKa,wBAAwB1W,IAC9EkW,EAAMD,MAAMG,cAAgB,WAC5BI,EAAaN,EAAMQ,wBAAwB1W,IAAM6V,EAAKa,wBAAwB1W,IAHlF,QAKI8V,SAASS,KAAKI,YAAYN,GAE9B,IAAI9V,EAAS,CAAEqW,OAAQJ,EAAYrY,OAAQsY,EAAYI,QAASJ,EAAaD,GAG7E,OAFA5Q,EAAQgQ,iBAAiBhF,GAAQrQ,EAE1BA,GAgBM,EAAAuW,YAAjB,SAA6B3V,EAAWC,EAAWlD,EAAeC,EAAgBuR,GAC9EA,EAAQG,UAAU1O,EAAGC,GACrBsO,EAAQK,MAAM7R,EAAOC,GAErBuR,EAAQ4C,YACR5C,EAAQqH,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIvW,KAAKwW,IACjCtH,EAAQuH,YAERvH,EAAQK,MAAM,EAAI7R,EAAO,EAAIC,GAC7BuR,EAAQG,WAAW1O,GAAIC,IA18Db,EAAA0P,uBAAwB,EA6gDvB,EAAAyB,aAAe,IAAI9Q,EAAQ,EAAG,EAAG,EAAG,GAyVpC,EAAA6T,2BAA6B,EAC7B,EAAAC,4BAA8B,EAC9B,EAAAC,6BAA+B,EAE/B,EAAAC,wBAA0B,EAC1B,EAAAC,2BAA6B,EAC7B,EAAAC,2BAA6B,EAgC7B,EAAAC,iBAA2F,GAkD5F,EAAAsB,UAAuI,aAczJ,EAh9DA,GAi9DA,IAAWC,gBAAgB,uBAAyB,EC19DpD,kBAmFI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAjFZ,EAAAsS,UAAY,IAAI/J,MAEb,EAAAgK,oBAAsB5V,EAAQD,QAE9B,EAAA8V,YAAc,GAEd,EAAAC,uBAAwB,EAExB,EAAAC,wBAAyB,EAK5B,EAAAC,sBAAuB,EAKvB,EAAAC,eAAiB,E,EA4a5B,OAhc+B,iBAuB3B,sBAAW,oCAAqB,C,IAAhC,WACI,OAAOja,KAAK+Z,wB,IAGhB,SAAiCta,GACzBO,KAAK+Z,yBAA2Bta,IAIpCO,KAAK+Z,uBAAyBta,EAE1BA,IACAO,KAAKU,OAAS,QAGlBV,KAAKoM,iB,gCAIT,sBAAW,mCAAoB,C,IAA/B,WACI,OAAOpM,KAAK8Z,uB,IAGhB,SAAgCra,GACxBO,KAAK8Z,wBAA0Bra,IAInCO,KAAK8Z,sBAAwBra,EAEzBA,IACAO,KAAKS,MAAQ,QAGjBT,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOpM,KAAK2Z,W,gCAWN,YAAAtN,aAAV,WACI,MAAO,aAGJ,YAAAsE,8BAAP,WACI,IAAkB,UAAA3Q,KAAKka,SAAL,eAAe,CAAnB,KACJxN,uBASP,YAAAyN,eAAP,SAAsB9S,GAClB,IAAkB,UAAArH,KAAKka,SAAL,eAAe,CAA5B,IAAIE,EAAK,KACV,GAAIA,EAAM/S,OAASA,EACf,OAAO+S,EAIf,OAAO,MASJ,YAAAC,eAAP,SAAsBhT,EAAcqO,GAChC,IAAkB,UAAA1V,KAAKka,SAAL,eAAe,CAA5B,IAAIE,EAAK,KACV,GAAIA,EAAME,WAAa5E,EACnB,OAAO0E,EAIf,OAAO,MAQJ,YAAAG,gBAAP,SAAuBC,GACnB,OAA2C,IAApCxa,KAAKka,SAASjK,QAAQuK,IAQ1B,YAAAC,WAAP,SAAkBD,GACd,OAAKA,IAMU,IAFHxa,KAAK2Z,UAAU1J,QAAQuK,KAKnCA,EAAQ3I,MAAM7R,KAAKuM,OAEnBiO,EAAQ9I,kBAER1R,KAAKsN,gBAAgBkN,GAErBxa,KAAKoM,gBARMpM,MANAA,MAsBR,YAAA0a,cAAP,WAGI,IAFA,IAEkB,MAFH1a,KAAKka,SAASS,QAEX,eAAU,CAAvB,IAAIP,EAAK,KACVpa,KAAK4X,cAAcwC,GAGvB,OAAOpa,MAQJ,YAAA4X,cAAP,SAAqB4C,GACjB,IAAIzK,EAAQ/P,KAAK2Z,UAAU1J,QAAQuK,GAenC,OAbe,IAAXzK,IACA/P,KAAK2Z,UAAUzJ,OAAOH,EAAO,GAE7ByK,EAAQnN,OAAS,MAGrBmN,EAAQ3K,aAAa,MAEjB7P,KAAKuM,OACLvM,KAAKuM,MAAMqO,0BAA0BJ,GAGzCxa,KAAKoM,eACEpM,MAIJ,YAAAsN,gBAAP,SAAuBkN,GACnBxa,KAAK4X,cAAc4C,GAGnB,IADA,IAAIK,GAAW,EACN9K,EAAQ,EAAGA,EAAQ/P,KAAK2Z,UAAU/X,OAAQmO,IAC/C,GAAI/P,KAAK2Z,UAAU5J,GAAO3C,OAASoN,EAAQpN,OAAQ,CAC/CpN,KAAK2Z,UAAUzJ,OAAOH,EAAO,EAAGyK,GAChCK,GAAW,EACX,MAIHA,GACD7a,KAAK2Z,UAAUxJ,KAAKqK,GAGxBA,EAAQnN,OAASrN,KAEjBA,KAAKoM,gBAIF,YAAAqE,YAAP,SAAmBhE,GACf,YAAMgE,YAAW,UAAChE,GAElB,IAAkB,UAAAzM,KAAK2Z,UAAL,eAAgB,CAApB,KACJlJ,YAAYhE,KAKnB,YAAAiE,WAAP,SAAkBjE,GACd,YAAMiE,WAAU,UAACjE,GAEjB,IAAkB,UAAAzM,KAAK2Z,UAAL,eAAgB,CAApB,KACJjJ,WAAWjE,KAKlB,YAAAiF,gBAAP,WACI,YAAMA,gBAAe,WAErB,IAAK,IAAI3B,EAAQ,EAAGA,EAAQ/P,KAAK2Z,UAAU/X,OAAQmO,IAC/C/P,KAAK2Z,UAAU5J,GAAO2B,mBAKpB,YAAAoJ,WAAV,SAAqB7I,GACbjS,KAAK6Z,cACL5H,EAAQU,QACJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjCc,EAAQmB,UAAYpT,KAAK6Z,YACzB5H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QACvHuR,EAAQc,YAKT,YAAAlB,MAAP,SAAazR,GACT,YAAMyR,MAAK,UAACzR,GAEZ,IAAkB,UAAAJ,KAAK2Z,UAAL,eAAgB,CAApB,KACJ9H,MAAMzR,KAKV,YAAA6a,cAAV,aAKU,YAAAnH,iBAAV,SAA2BL,EAAwBxB,IAC3CjS,KAAKuI,UAAavI,KAAK2I,qBAAqB7E,WAAW2P,KACvD,YAAMK,iBAAgB,UAACL,EAAexB,GACtCjS,KAAK+T,uBAAuBN,KAK7B,YAAAD,QAAP,SAAeC,EAAwBxB,GACnC,IAAKjS,KAAK0T,WAAa1T,KAAK2T,WAAa3T,KAAKqP,eAC1C,OAAO,EAGXrP,KAAKI,KAAKwT,kBAEN5T,KAAKuI,UACLvI,KAAKyH,gBAAgBrE,eAAepD,KAAKuJ,iBAAkBvJ,KAAK0I,+CAGpE,IAAImL,EAAe,EAEnB5B,EAAQU,OAER3S,KAAKiT,aAAahB,GAElBjS,KAAKib,gBAEL,EAAG,CACC,IAAIC,GAAiB,EACjBC,GAAkB,EAItB,GAHAnb,KAAKuK,gBAAiB,EACtBvK,KAAK8T,iBAAiBL,EAAexB,IAEhCjS,KAAKyK,WAAY,CAClB,IAAkB,UAAAzK,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KACVA,EAAM3R,mBAAmBjG,SAASxC,KAAK4Z,qBAEnCQ,EAAM5G,QAAQxT,KAAK4Z,oBAAqB3H,KAEpCjS,KAAKob,sBAAwBhB,EAAMtS,OAAOxH,UAC1C4a,EAAgBnY,KAAKG,IAAIgY,EAAed,EAAM3S,gBAAgBhH,QAE9DT,KAAKqb,uBAAyBjB,EAAMrS,QAAQzH,UAC5C6a,EAAiBpY,KAAKG,IAAIiY,EAAgBf,EAAM3S,gBAAgB/G,UAKxEV,KAAKob,sBAAwBF,GAAiB,GAC1Clb,KAAKS,QAAUya,EAAgB,OAC/Blb,KAAKS,MAAQya,EAAgB,KAC7Blb,KAAKuK,gBAAiB,GAG1BvK,KAAKqb,uBAAyBF,GAAkB,GAC5Cnb,KAAKU,SAAWya,EAAiB,OACjCnb,KAAKU,OAASya,EAAiB,KAC/Bnb,KAAKuK,gBAAiB,GAI9BvK,KAAKsb,eAETzH,UAEG7T,KAAKuK,gBAAkBsJ,EAAe7T,KAAKia,gBAclD,OAZIpG,GAAgB,GAAK7T,KAAKga,sBAC1B,IAAO1K,MAAM,gDAAgDtP,KAAKqH,KAAI,cAAcrH,KAAK8R,SAAQ,KAGrGG,EAAQc,UAEJ/S,KAAKuI,WACLvI,KAAK8Q,iBAEL9Q,KAAKuI,UAAW,IAGb,GAGD,YAAA+S,aAAV,aAKO,YAAAjG,MAAP,SAAapD,EAAmC2C,GAE5C5U,KAAK8a,WAAW7I,GAEZjS,KAAK+K,cACL/K,KAAK0U,iBAAiBzC,GAG1B,IAAkB,UAAAjS,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KAENxF,IACKwF,EAAMxJ,gBAAgBgE,IAI/BwF,EAAMnF,QAAQhD,EAAS2C,KAIxB,YAAArF,oBAAP,SAA2BC,EAAoBC,EAAwCC,GACnF,QAD2C,IAAAD,OAAA,GACtCzP,KAAKka,SAIV,IAAK,IAAInK,EAAQ,EAAGA,EAAQ/P,KAAKka,SAAStY,OAAQmO,IAAS,CACvD,IAAIwL,EAAOvb,KAAKka,SAASnK,GAEpBL,IAAaA,EAAU6L,IACxB/L,EAAQW,KAAKoL,GAGZ9L,GACD8L,EAAKhM,oBAAoBC,GAAS,EAAOE,KAM9C,YAAA+F,gBAAP,SAAuB/R,EAAWC,EAAW+R,EAAcC,EAAmB1R,EAAqB2R,EAAiBC,GAChH,IAAK7V,KAAKoK,aAAepK,KAAK2T,WAAa3T,KAAKqP,cAC5C,OAAO,EAGX,IAAK,YAAMkG,SAAQ,UAAC7R,EAAGC,GACnB,OAAO,EAIX,IAAK,IAAIoM,EAAQ/P,KAAK2Z,UAAU/X,OAAS,EAAGmO,GAAS,EAAGA,IAAS,CAC7D,IAAIqK,EAAQpa,KAAK2Z,UAAU5J,GAC3B,GAAIqK,EAAM3E,gBAAgB/R,EAAGC,EAAG+R,EAAMC,EAAW1R,EAAa2R,EAAQC,GAIlE,OAHIuE,EAAM9O,aACNtL,KAAKuM,MAAMiP,cAAcpB,EAAM9O,cAE5B,EAIf,QAAKtL,KAAK4K,kBAIH5K,KAAK8V,oBAAoBJ,EAAMhS,EAAGC,EAAGgS,EAAW1R,EAAa2R,EAAQC,IAItE,YAAA1B,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK4Z,oBAAoBpX,SAASxC,KAAKyH,kBAIpC,YAAAiQ,QAAP,WACI,YAAMA,QAAO,WAEb,IAAK,IAAI3H,EAAQ/P,KAAKka,SAAStY,OAAS,EAAGmO,GAAS,EAAGA,IACnD/P,KAAKka,SAASnK,GAAO2H,WAGjC,EAhcA,CAA+B,GAic/B,IAAWgC,gBAAgB,yBAA2B,ECxctD,ICKY+B,EDLZ,cAwCI,WAAmBpU,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAvCX,EAAAqU,WAAa,EACb,EAAAC,cAAgB,E,EAgI5B,OAlI+B,iBAK3B,sBAAW,wBAAS,C,IAApB,WACI,OAAO3b,KAAK0b,Y,IAGhB,SAAqBjc,GACbO,KAAK0b,aAAejc,IAIxBO,KAAK0b,WAAajc,EAClBO,KAAKoM,iB,gCAIT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAK2b,e,IAGhB,SAAwBlc,GAChBA,EAAQ,IACRA,EAAQ,GAGRO,KAAK2b,gBAAkBlc,IAI3BO,KAAK2b,cAAgBlc,EACrBO,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,aAGD,YAAAyO,WAAV,SAAqB7I,GACjBA,EAAQU,QAEJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAG7BnR,KAAK6Z,cACL5H,EAAQmB,UAAYpT,KAAK6Z,YAErB7Z,KAAK2b,eACL3b,KAAK4b,iBAAiB3J,EAASjS,KAAK0b,WAAa,GACjDzJ,EAAQ4J,QAER5J,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,SAI3HV,KAAK0b,cAED1b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAGxBnR,KAAK8b,QACL7J,EAAQW,YAAc5S,KAAK8b,OAE/B7J,EAAQY,UAAY7S,KAAK0b,WAErB1b,KAAK2b,eACL3b,KAAK4b,iBAAiB3J,EAASjS,KAAK0b,WAAa,GACjDzJ,EAAQ8J,UAER9J,EAAQe,WAAWhT,KAAKyH,gBAAgBnF,KAAOtC,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgBlF,IAAMvC,KAAK0b,WAAa,EAC7G1b,KAAKyH,gBAAgBhH,MAAQT,KAAK0b,WAAY1b,KAAKyH,gBAAgB/G,OAASV,KAAK0b,aAI7FzJ,EAAQc,WAGF,YAAAoB,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK4Z,oBAAoBnZ,OAAS,EAAIT,KAAK0b,WAC3C1b,KAAK4Z,oBAAoBlZ,QAAU,EAAIV,KAAK0b,WAC5C1b,KAAK4Z,oBAAoBtX,MAAQtC,KAAK0b,WACtC1b,KAAK4Z,oBAAoBrX,KAAOvC,KAAK0b,YAGjC,YAAAE,iBAAR,SAAyB3J,EAAmCxF,QAAA,IAAAA,MAAA,GACxD,IAAI/I,EAAI1D,KAAKyH,gBAAgBnF,KAAOmK,EAChC9I,EAAI3D,KAAKyH,gBAAgBlF,IAAMkK,EAC/BhM,EAAQT,KAAKyH,gBAAgBhH,MAAiB,EAATgM,EACrC/L,EAASV,KAAKyH,gBAAgB/G,OAAkB,EAAT+L,EAEvCuP,EAASjZ,KAAKC,IAAItC,EAAS,EAAI,EAAGqC,KAAKC,IAAIvC,EAAQ,EAAI,EAAGT,KAAK2b,gBAEnE1J,EAAQ4C,YACR5C,EAAQgK,OAAOvY,EAAIsY,EAAQrY,GAC3BsO,EAAQiK,OAAOxY,EAAIjD,EAAQub,EAAQrY,GACnCsO,EAAQkK,iBAAiBzY,EAAIjD,EAAOkD,EAAGD,EAAIjD,EAAOkD,EAAIqY,GACtD/J,EAAQiK,OAAOxY,EAAIjD,EAAOkD,EAAIjD,EAASsb,GACvC/J,EAAQkK,iBAAiBzY,EAAIjD,EAAOkD,EAAIjD,EAAQgD,EAAIjD,EAAQub,EAAQrY,EAAIjD,GACxEuR,EAAQiK,OAAOxY,EAAIsY,EAAQrY,EAAIjD,GAC/BuR,EAAQkK,iBAAiBzY,EAAGC,EAAIjD,EAAQgD,EAAGC,EAAIjD,EAASsb,GACxD/J,EAAQiK,OAAOxY,EAAGC,EAAIqY,GACtB/J,EAAQkK,iBAAiBzY,EAAGC,EAAGD,EAAIsY,EAAQrY,GAC3CsO,EAAQuH,aAGF,YAAA9E,iBAAV,SAA2BzC,GACnBjS,KAAK2b,gBACL3b,KAAK4b,iBAAiB3J,EAASjS,KAAK0b,YACpCzJ,EAAQ+C,SAGpB,EAlIA,CAA+B,GAmI/B,IAAW0E,gBAAgB,yBAA2B,EC9HtD,SAAY+B,GAIR,mBAKA,2BAKA,2BAdJ,CAAYA,MAAY,KAoBxB,kBAyLI,WAIWpU,EACP+Q,QAAA,IAAAA,MAAA,IALJ,MAMI,YAAM/Q,IAAK,K,OAFJ,EAAAA,OA5LH,EAAA+U,MAAQ,GACR,EAAAC,cAAgBZ,EAAaa,KAC7B,EAAAC,yBAA2B,EAAQnU,4BACnC,EAAAoU,uBAAyB,EAAQlU,0BAGjC,EAAAmU,cAAwB,EACxB,EAAAC,aAA6B,IAAI9c,EAAa,GAC9C,EAAA+c,cAAwB,EACxB,EAAAC,cAAwB,QAIzB,EAAAC,wBAA0B,IAAI,IAK9B,EAAAC,uBAAyB,IAAI,IA8KhC,EAAK1E,KAAOA,E,EAkPpB,OAnb+B,iBAwB3B,sBAAW,oBAAK,C,IAAhB,WACI,OAAOpY,KAAK+c,Q,gCAMhB,sBAAW,0BAAW,C,IAAtB,WACI,OAAO/c,KAAKyc,c,IAMhB,SAAuBhd,GACfO,KAAKyc,eAAiBhd,IAG1BO,KAAKyc,aAAehd,EAEhBO,KAAKyc,eACLzc,KAAK8H,OAAO/H,uBAAwB,EACpCC,KAAK+H,QAAQhI,uBAAwB,GAGzCC,KAAKoM,iB,gCAMT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAKqc,e,IAMhB,SAAwB5c,GAChBO,KAAKqc,gBAAkB5c,IAG3BO,KAAKqc,eAAiB5c,EACtBO,KAAKoM,iB,gCAMT,sBAAW,mBAAI,C,IAAf,WACI,OAAOpM,KAAKoc,O,IAMhB,SAAgB3c,GACRO,KAAKoc,QAAU3c,IAGnBO,KAAKoc,MAAQ3c,EACbO,KAAKoM,eAELpM,KAAK6c,wBAAwBxI,gBAAgBrU,Q,gCAMjD,sBAAW,sCAAuB,C,IAAlC,WACI,OAAOA,KAAKuc,0B,IAMhB,SAAmC9c,GAC3BO,KAAKuc,2BAA6B9c,IAItCO,KAAKuc,yBAA2B9c,EAChCO,KAAKoM,iB,gCAMT,sBAAW,oCAAqB,C,IAAhC,WACI,OAAOpM,KAAKwc,wB,IAMhB,SAAiC/c,GACzBO,KAAKwc,yBAA2B/c,IAIpCO,KAAKwc,uBAAyB/c,EAC9BO,KAAKoM,iB,gCAMT,sBAAW,0BAAW,C,IAStB,WACI,OAAOpM,KAAK0c,aAAaxb,SAASlB,KAAKuM,Q,IAV3C,SAAuB9M,GACfO,KAAK0c,aAAanb,WAAW9B,IAC7BO,KAAKoM,gB,gCAcb,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAK2c,e,IAMhB,SAAwBld,GAChBO,KAAK2c,gBAAkBld,IAG3BO,KAAK2c,cAAgBld,EACrBO,KAAKoM,iB,gCAMT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAK4c,e,IAMhB,SAAwBnd,GAChBO,KAAK4c,gBAAkBnd,IAG3BO,KAAK4c,cAAgBnd,EACrBO,KAAKoM,iB,gCAmBC,YAAAC,aAAV,WACI,MAAO,aAGD,YAAAyH,iBAAV,SAA2BL,EAAwBxB,GAC1CjS,KAAKwM,cACNxM,KAAKwM,YAAc,EAAQiL,eAAexF,EAAQkB,OAGtD,YAAMW,iBAAgB,UAACL,EAAexB,GAGtCjS,KAAK+c,OAAS/c,KAAKgd,YAAYhd,KAAKyH,gBAAgBhH,MAAOwR,GAC3DjS,KAAK8c,uBAAuBzI,gBAAgBrU,MAI5C,IAFA,IAAIid,EAAuB,EAElBzZ,EAAI,EAAGA,EAAIxD,KAAK+c,OAAOnb,OAAQ4B,IAAK,CACzC,IAAM0Z,EAAOld,KAAK+c,OAAOvZ,GAErB0Z,EAAKzc,MAAQwc,IACbA,EAAeC,EAAKzc,OAI5B,GAAIT,KAAKyc,aAAc,CACnB,GAAIzc,KAAKqc,gBAAkBZ,EAAaa,KAAM,CAC1C,IAAIa,EAAWnd,KAAKod,oBAAsBpd,KAAKqd,qBAAuBJ,EAClEE,IAAand,KAAK8H,OAAOwV,gBACzBtd,KAAK8H,OAAOtH,cAAc2c,EAAUvd,EAAaC,gBACjDG,KAAKuK,gBAAiB,GAG9B,IAAIgT,EAAYvd,KAAKwd,mBAAqBxd,KAAKyd,sBAAwBzd,KAAKwM,YAAY9L,OAASV,KAAK+c,OAAOnb,OAE7G,GAAI5B,KAAK+c,OAAOnb,OAAS,GAAyC,IAApC5B,KAAK0c,aAAaY,cAAqB,CACjE,IAAII,EAAc,EAEdA,EADA1d,KAAK0c,aAAapc,QACJN,KAAK0c,aAAanc,SAASP,KAAKuM,OAE/BvM,KAAK0c,aAAanc,SAASP,KAAKuM,OAASvM,KAAK+H,QAAQ5H,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,QAG/H6c,IAAcvd,KAAK+c,OAAOnb,OAAS,GAAK8b,EAGxCH,IAAcvd,KAAK+H,QAAQuV,gBAC3Btd,KAAK+H,QAAQvH,cAAc+c,EAAW3d,EAAaC,gBACnDG,KAAKuK,gBAAiB,KAK1B,YAAAoT,UAAR,SAAkBvF,EAAcwF,EAAmBja,EAAWsO,GAC1D,IAAIxR,EAAQT,KAAKyH,gBAAgBhH,MAC7BiD,EAAI,EACR,OAAQ1D,KAAKuc,0BACT,KAAK,EAAQ5N,0BACTjL,EAAI,EACJ,MACJ,KAAK,EAAQ8Q,2BACT9Q,EAAIjD,EAAQmd,EACZ,MACJ,KAAK,EAAQxV,4BACT1E,GAAKjD,EAAQmd,GAAa,GAI9B5d,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAG7BnR,KAAK6d,cACL5L,EAAQ6L,WAAW1F,EAAMpY,KAAKyH,gBAAgBnF,KAAOoB,EAAGC,GAE5DsO,EAAQ8L,SAAS3F,EAAMpY,KAAKyH,gBAAgBnF,KAAOoB,EAAGC,IAInD,YAAA0R,MAAP,SAAapD,EAAmC2C,GAC5C3C,EAAQU,OAER3S,KAAKiT,aAAahB,GAGlBjS,KAAKge,aAAa/L,GAElBA,EAAQc,WAGF,YAAAE,aAAV,SAAuBhB,GACnB,YAAMgB,aAAY,UAAChB,GACfjS,KAAK6d,eACL5L,EAAQY,UAAY7S,KAAK6d,aACzB5L,EAAQW,YAAc5S,KAAKie,eAIzB,YAAAjB,YAAV,SAAsBkB,EAAkBjM,GACpC,IAAIkM,EAAQ,GACRpB,EAAS/c,KAAKoY,KAAKgG,MAAM,MAE7B,GAAIpe,KAAKqc,gBAAkBZ,EAAa4C,SACpC,IAAkB,UAAAtB,EAAA,eAAQ,CAArB,IAAIuB,EAAK,KACVH,EAAMhO,KAAKnQ,KAAKue,mBAAmBD,EAAOJ,EAAUjM,SAErD,GAAIjS,KAAKqc,gBAAkBZ,EAAa+C,SAC3C,IAAkB,UAAAzB,EAAA,eAAQ,CAAjBuB,EAAK,KACVH,EAAMhO,KAAI,MAAVgO,EAAcne,KAAKye,mBAAmBH,EAAOJ,EAAUjM,SAG3D,IAAkB,UAAA8K,EAAA,eAAQ,CAAjBuB,EAAK,KACVH,EAAMhO,KAAKnQ,KAAK0e,WAAWJ,EAAOrM,IAI1C,OAAOkM,GAGD,YAAAO,WAAV,SAAqBxB,EAAmBjL,GACpC,YADiB,IAAAiL,MAAA,IACV,CAAE9E,KAAM8E,EAAMzc,MAAOwR,EAAQ0M,YAAYzB,GAAMzc,QAGhD,YAAA8d,mBAAV,SAA6BrB,EAAmBzc,EAC5CwR,QADyB,IAAAiL,MAAA,IAEzB,IAAIrK,EAAYZ,EAAQ0M,YAAYzB,GAAMzc,MAK1C,IAHIoS,EAAYpS,IACZyc,GAAQ,UAELA,EAAKtb,OAAS,GAAKiR,EAAYpS,GAClCyc,EAAOA,EAAKvC,MAAM,GAAI,GAAK,SAC3B9H,EAAYZ,EAAQ0M,YAAYzB,GAAMzc,MAG1C,MAAO,CAAE2X,KAAM8E,EAAMzc,MAAOoS,IAGtB,YAAA4L,mBAAV,SAA6BvB,EAAmBzc,EAC5CwR,QADyB,IAAAiL,MAAA,IAMzB,IAJA,IAAIiB,EAAQ,GACRS,EAAQ1B,EAAKkB,MAAM,KACnBvL,EAAY,EAEPgM,EAAI,EAAGA,EAAID,EAAMhd,OAAQid,IAAK,CACnC,IAAIC,EAAWD,EAAI,EAAI3B,EAAO,IAAM0B,EAAMC,GAAKD,EAAM,GAEjDG,EADU9M,EAAQ0M,YAAYG,GACVre,MACpBse,EAAYte,GAASoe,EAAI,GACzBV,EAAMhO,KAAK,CAAEiI,KAAM8E,EAAMzc,MAAOoS,IAChCqK,EAAO0B,EAAMC,GACbhM,EAAYZ,EAAQ0M,YAAYzB,GAAMzc,QAGtCoS,EAAYkM,EACZ7B,EAAO4B,GAKf,OAFAX,EAAMhO,KAAK,CAAEiI,KAAM8E,EAAMzc,MAAOoS,IAEzBsL,GAGD,YAAAH,aAAV,SAAuB/L,GACnB,IAAIvR,EAASV,KAAKyH,gBAAgB/G,OAC9Bse,EAAQ,EACZ,OAAQhf,KAAKwc,wBACT,KAAK,EAAQ3N,uBACTmQ,EAAQhf,KAAKwM,YAAY2M,OACzB,MACJ,KAAK,EAAQ1E,0BACTuK,EAAQte,EAASV,KAAKwM,YAAY9L,QAAUV,KAAK+c,OAAOnb,OAAS,GAAK5B,KAAKwM,YAAY4M,QACvF,MACJ,KAAK,EAAQ9Q,0BACT0W,EAAQhf,KAAKwM,YAAY2M,QAAUzY,EAASV,KAAKwM,YAAY9L,OAASV,KAAK+c,OAAOnb,QAAU,EAIpGod,GAAShf,KAAKyH,gBAAgBlF,IAE9B,IAAK,IAAIiB,EAAI,EAAGA,EAAIxD,KAAK+c,OAAOnb,OAAQ4B,IAAK,CACzC,IAAM0Z,EAAOld,KAAK+c,OAAOvZ,GAEf,IAANA,GAA+C,IAApCxD,KAAK0c,aAAaY,gBAEzBtd,KAAK0c,aAAapc,QAClB0e,GAAShf,KAAK0c,aAAanc,SAASP,KAAKuM,OAEzCyS,GAAiBhf,KAAK0c,aAAanc,SAASP,KAAKuM,OAASvM,KAAK+H,QAAQ5H,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,SAIrIV,KAAK2d,UAAUT,EAAK9E,KAAM8E,EAAKzc,MAAOue,EAAO/M,GAC7C+M,GAAShf,KAAKwM,YAAY9L,SAQ3B,YAAAue,sBAAP,WACI,GAAIjf,KAAKoY,MAAQpY,KAAKkf,cAAe,CACjC,IAAM,EAAU7G,SAASC,cAAc,UAAU6G,WAAW,MAC5D,GAAI,EAAS,CACTnf,KAAKiT,aAAa,GACbjT,KAAKwM,cACNxM,KAAKwM,YAAc,EAAQiL,eAAe,EAAQtE,OAEtD,IAAMgL,EAAQne,KAAK+c,OAAS/c,KAAK+c,OAAS/c,KAAKgd,YAC3Chd,KAAKkf,cAAgBlf,KAAKod,oBAAsBpd,KAAKqd,qBAAsB,GAE3EE,EAAYvd,KAAKwd,mBAAqBxd,KAAKyd,sBAAwBzd,KAAKwM,YAAY9L,OAASyd,EAAMvc,OAEvG,GAAIuc,EAAMvc,OAAS,GAAyC,IAApC5B,KAAK0c,aAAaY,cAAqB,CAC3D,IAAII,EAAc,EAEdA,EADA1d,KAAK0c,aAAapc,QACJN,KAAK0c,aAAanc,SAASP,KAAKuM,OAE/BvM,KAAK0c,aAAanc,SAASP,KAAKuM,OAASvM,KAAK+H,QAAQ5H,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBjI,QAG/H6c,IAAcY,EAAMvc,OAAS,GAAK8b,EAGtC,OAAOH,GAGf,OAAO,GAGX,YAAA7F,QAAA,WACI,YAAMA,QAAO,WAEb1X,KAAK6c,wBAAwBlF,SAErC,EAnbA,CAA+B,GAob/B,IAAW+B,gBAAgB,yBAA2B,ECvctD,kBA0lBI,WAAmBrS,EAAe+X,QAAA,IAAAA,MAAA,MAAlC,MACI,YAAM/X,IAAK,K,OADI,EAAAA,OAzlBX,EAAAgY,eAA8C,KAK9C,EAAAC,SAAU,EACV,EAAAC,SAAWC,EAAMC,aAEjB,EAAAC,YAAa,EAEb,EAAAC,YAAc,EACd,EAAAC,WAAa,EACb,EAAAC,aAAe,EACf,EAAAC,cAAgB,EAChB,EAAAC,oCAA8C,EAC9C,EAAAC,QAAkB,EAElB,EAAAC,WAAqB,EACrB,EAAAC,YAAsB,EACtB,EAAAC,SAAmB,EAEnB,EAAAC,mCAAoC,EAWrC,EAAAC,wBAA0B,IAAI,IAK9B,EAAAC,kCAAoC,IAAI,IAujB3C,EAAK9e,OAAS4d,E,EAkPtB,OA/0B2B,iBA2CvB,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOpf,KAAKsf,S,gCAMhB,sBAAW,+CAAgC,C,IAA3C,WACI,OAAOtf,KAAKogB,mC,IAGhB,SAA4C3gB,GACpCO,KAAKogB,oCAAsC3gB,IAI/CO,KAAKogB,kCAAoC3gB,EAErCO,KAAKogB,mCAAqCpgB,KAAKsf,SAC/Ctf,KAAKugB,wC,gCAQb,sBAAW,wCAAyB,C,IAApC,WACI,OAAOvgB,KAAKwgB,4B,IAGhB,SAAqC/gB,GAC7BO,KAAKwgB,6BAA+B/gB,IAIxCO,KAAKwgB,2BAA6B/gB,I,gCAMtC,sBAAW,wBAAS,C,IAApB,WACI,OAAOO,KAAKygB,Y,IAGhB,SAAqBhhB,GACbO,KAAKygB,aAAehhB,IAIxBO,KAAKygB,WAAahhB,EAElBO,KAAKoM,iB,gCAMT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK0gB,a,IAGhB,SAAsBjhB,GACdO,KAAK0gB,cAAgBjhB,IAIzBO,KAAK0gB,YAAcjhB,EAEnBO,KAAKoM,iB,gCAMT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOpM,KAAK2gB,W,IAGhB,SAAoBlhB,GACZO,KAAK2gB,YAAclhB,IAIvBO,KAAK2gB,UAAYlhB,EAEjBO,KAAKoM,iB,gCAMT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK4gB,c,IAGhB,SAAuBnhB,GACfO,KAAK4gB,eAAiBnhB,IAI1BO,KAAK4gB,aAAenhB,EAEpBO,KAAKoM,iB,gCAMT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK2f,a,IAGhB,SAAsBlgB,GACdO,KAAK2f,cAAgBlgB,IAIzBO,KAAK2f,YAAclgB,EAEnBO,KAAKoM,iB,gCAMT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK4f,Y,IAGhB,SAAqBngB,GACbO,KAAK4f,aAAengB,IAIxBO,KAAK4f,WAAangB,EAElBO,KAAKoM,iB,gCAMT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK6f,c,IAGhB,SAAuBpgB,GACfO,KAAK6f,eAAiBpgB,IAI1BO,KAAK6f,aAAepgB,EAEpBO,KAAKoM,iB,gCAMT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAK8f,e,IAGhB,SAAwBrgB,GAChBO,KAAK8f,gBAAkBrgB,IAI3BO,KAAK8f,cAAgBrgB,EAErBO,KAAKoM,iB,gCAIT,sBAAW,oBAAK,C,IAAhB,WACI,OAAOpM,KAAKggB,Q,gCAIhB,sBAAW,gDAAiC,C,IAA5C,WACI,OAAOhgB,KAAK+f,oC,gCAOhB,sBAAW,wBAAS,C,IAApB,WACI,OAAO/f,KAAK0f,Y,IAGhB,SAAqBjgB,GACbO,KAAK0f,aAAejgB,IAIxBO,KAAK0f,WAAajgB,EAEdA,GAASO,KAAKsf,SACdtf,KAAK6gB,+B,gCAKb,sBAAW,sBAAO,C,IAAlB,WACI,OAAO7gB,KAAKuf,U,IAGhB,SAAmB9f,GACXO,KAAKuf,WAAa9f,IAItBO,KAAKuf,SAAW9f,EAEhBO,KAAKoM,iB,gCAIF,YAAA0U,UAAP,SAAiBjC,EAAWkC,QAAA,IAAAA,OAAA,GACxB,IAAIC,EAAS3I,SAASC,cAAc,UAE9BrG,EAAU+O,EAAO7B,WAAW,MAC5B1e,EAAQT,KAAKihB,UAAUxgB,MACvBC,EAASV,KAAKihB,UAAUvgB,OAE9BsgB,EAAOvgB,MAAQC,EACfsgB,EAAOtgB,OAASD,EAEhBwR,EAAQG,UAAU4O,EAAOvgB,MAAQ,EAAGugB,EAAOtgB,OAAS,GACpDuR,EAAQI,OAAOwM,EAAI9b,KAAKwW,GAAK,GAE7BtH,EAAQiP,UAAUlhB,KAAKihB,UAAW,EAAG,EAAGxgB,EAAOC,GAASD,EAAQ,GAAIC,EAAS,EAAGD,EAAOC,GAEvF,IAAMygB,EAAkBH,EAAOI,UAAU,aACnCC,EAAe,IAAI7B,EAAMxf,KAAKqH,KAAO,UAAW8Z,GAYtD,OAVIJ,IACAM,EAAa9B,SAAWvf,KAAKuf,SAC7B8B,EAAa3B,WAAa1f,KAAK0f,WAC/B2B,EAAalB,QAAUngB,KAAKmgB,QAC5BkB,EAAapB,WAAapB,EAAI,EAAI7e,KAAKkgB,YAAclgB,KAAKigB,WAC1DoB,EAAanB,YAAcrB,EAAI,EAAI7e,KAAKigB,WAAajgB,KAAKkgB,aAG9DlgB,KAAKshB,2BAA2BthB,KAAMqhB,EAAcxC,GAE7CwC,GAGH,YAAAC,2BAAR,SAAmCC,EAAiBC,EAAiB3C,GAArE,WACS0C,EAASvB,SAIVuB,EAASxB,oCACT/f,KAAKyhB,0BAA0BF,EAAUC,EAAU3C,GACnD7e,KAAKoM,gBAELmV,EAASjB,kCAAkCoB,SAAQ,WAC/C,EAAKD,0BAA0BF,EAAUC,EAAU3C,GACnD,EAAKzS,oBAKT,YAAAqV,0BAAR,SAAkCF,EAAiBC,EAAiB3C,G,QAC5D8C,EAAUJ,EAASK,WACnBC,EAASN,EAASO,UAClBC,EAAWR,EAASS,SAASvhB,MAC7BwhB,EAAYV,EAASS,SAASthB,OAE9BwhB,EAAUP,EACVQ,EAASN,EACTO,EAAWb,EAASc,YACpBC,EAAYf,EAASgB,aAEzB,GAAS,GAAL1D,EAAQ,CACR,IAAI2D,EAAO3D,EAAI,GAAK,EAAI,EACxBA,GAAQ,EACR,IAAK,IAAIrb,EAAI,EAAGA,EAAIT,KAAKyN,IAAIqO,KAAMrb,EAC/B0e,IAAYL,EAASI,EAAY,GAAKO,EAAOP,EAAY,EACzDE,GAAUR,EAAUI,EAAW,GAAKS,EAAOT,EAAW,EACrDK,GAAD,SAAC,GAAUE,EAAA,KACPzD,EAAI,EACJsD,GAAUG,EAEVJ,GAAWE,EAEfT,EAAUO,EACVL,EAASM,EACRJ,GAAD,SAAC,GAAUE,EAAA,KAInBT,EAASI,WAAaM,EACtBV,EAASM,UAAYK,EACrBX,EAASa,YAAcD,EACvBZ,EAASe,aAAeD,GAM5B,sBAAW,uBAAQ,C,IAanB,WACI,OAAOtiB,KAAKihB,W,IAdhB,SAAoBxhB,GAApB,WACIO,KAAKihB,UAAYxhB,EACjBO,KAAKsf,SAAU,EAEXtf,KAAKihB,UAAUxgB,MACfT,KAAKyiB,iBAELziB,KAAKihB,UAAUyB,OAAS,WACpB,EAAKD,mB,gCAST,YAAAA,eAAR,WACIziB,KAAK2iB,YAAc3iB,KAAKihB,UAAUxgB,MAClCT,KAAK4iB,aAAe5iB,KAAKihB,UAAUvgB,OACnCV,KAAKsf,SAAU,EAEXtf,KAAKogB,mCACLpgB,KAAKugB,sCAGLvgB,KAAK0f,YACL1f,KAAK6gB,6BAGT7gB,KAAKqgB,wBAAwBhM,gBAAgBrU,MAE7CA,KAAKoM,gBAGD,YAAAmU,oCAAR,WACSvgB,KAAKqf,iBACNrf,KAAKqf,eAAiBhH,SAASC,cAAc,WAEjD,IAAM0I,EAAShhB,KAAKqf,eACdpN,EAAU+O,EAAO7B,WAAW,MAC5B1e,EAAQT,KAAKihB,UAAUxgB,MACvBC,EAASV,KAAKihB,UAAUvgB,OAE9BsgB,EAAOvgB,MAAQA,EACfugB,EAAOtgB,OAASA,EAEhBuR,EAAQiP,UAAUlhB,KAAKihB,UAAW,EAAG,EAAGxgB,EAAOC,GAC/C,IAAMmiB,EAAY5Q,EAAQqD,aAAa,EAAG,EAAG7U,EAAOC,GAGpDV,KAAKygB,YAAc,EACnBzgB,KAAK0gB,aAAe,EACpB,IAAK,IAAIhd,EAAI,EAAGA,EAAIjD,EAAOiD,IAAK,CAG5B,IAFM6P,EAAQsP,EAAUC,KAAS,EAAJpf,EAAQ,IAEzB,MAA4B,IAArB1D,KAAKygB,WACpBzgB,KAAKygB,WAAa/c,OAItB,GAAI6P,EAAQ,KAAOvT,KAAKygB,YAAc,EAAG,CACrCzgB,KAAK0gB,YAAchd,EACnB,OAKR1D,KAAK2gB,WAAa,EAClB3gB,KAAK4gB,cAAgB,EACrB,IAAK,IAAIjd,EAAI,EAAGA,EAAIjD,EAAQiD,IAAK,CAC7B,IAAM4P,EAEN,IAFMA,EAAQsP,EAAUC,KAAKnf,EAAIlD,EAAQ,EAAI,IAEjC,MAA2B,IAApBT,KAAK2gB,UACpB3gB,KAAK2gB,UAAYhd,OAIrB,GAAI4P,EAAQ,KAAOvT,KAAK2gB,WAAa,EAAG,CACpC3gB,KAAK4gB,aAAejd,EACpB,SAQZ,sBAAW,qBAAM,C,IAAjB,SAAkBlE,GAAlB,WACQO,KAAK+iB,UAAYtjB,IAIrBO,KAAKsf,SAAU,EACftf,KAAK+iB,QAAUtjB,EAEXA,IACAA,EAAQO,KAAKgjB,UAAUvjB,IAG3BO,KAAKihB,UAAY5I,SAASC,cAAc,OAExCtY,KAAKihB,UAAUyB,OAAS,WACpB,EAAKD,kBAELhjB,IACA,IAAMwjB,gBAAgBxjB,EAAOO,KAAKihB,WAClCjhB,KAAKihB,UAAUiC,IAAMzjB,K,gCAOrB,YAAAujB,UAAR,SAAkBvjB,GAAlB,WACI,GAAIsB,OAAOoiB,gBAA+C,IAA7B1jB,EAAM2jB,OAAO,YAAuB3jB,EAAMwQ,QAAQ,OAASxQ,EAAM4jB,YAAY,KAAO,CAC7GrjB,KAAKggB,QAAS,EACd,IAAIsD,EAAS7jB,EAAM2e,MAAM,KAAK,GAC1BmF,EAAS9jB,EAAM2e,MAAM,KAAK,GAE1BoF,EAA+BnL,SAASS,KAAK2K,cAAc,gBAAkBH,EAAS,MAC1F,GAAIE,EAAU,CACV,IAAIE,EAASF,EAASG,gBAEtB,GAAID,GAAUA,EAAOE,gBAAiB,CAClC,IAAIC,EAAKH,EAAOE,gBAAgBE,aAAa,WACzCC,EAAWzgB,OAAOogB,EAAOE,gBAAgBE,aAAa,UACtDE,EAAY1gB,OAAOogB,EAAOE,gBAAgBE,aAAa,WAE3D,GAD0CJ,EAAOO,eAAeV,IACpDM,GAAME,GAAYC,EAE1B,OADAhkB,KAAKkkB,eAAeV,EAAUD,GACvB9jB,EAKf+jB,EAASW,iBAAiB,QAAQ,WAC9B,EAAKD,eAAeV,EAAUD,UAE/B,CAEH,IAAIa,EAAW/L,SAASC,cAAc,UACtC8L,EAAStB,KAAOQ,EAChBc,EAAS1O,KAAO,gBAChB0O,EAAS3jB,MAAQ,KACjB2jB,EAAS1jB,OAAS,KAClB2X,SAASS,KAAKD,YAAYuL,GAE1BA,EAAS1B,OAAS,WACd,IAAI2B,EAA6BhM,SAASS,KAAK2K,cAAc,gBAAkBH,EAAS,MACpFe,GACA,EAAKH,eAAeG,EAAQd,IAIxC,OAAOD,EAEP,OAAO7jB,GAQP,YAAAykB,eAAR,SAAuBZ,EAA2BC,GAC9C,IAAIG,EAASJ,EAAOK,gBAEpB,GAAID,GAAUA,EAAOE,gBAAiB,CAClC,IAAIC,EAAKH,EAAOE,gBAAgBE,aAAa,WACzCC,EAAWzgB,OAAOogB,EAAOE,gBAAgBE,aAAa,UACtDE,EAAY1gB,OAAOogB,EAAOE,gBAAgBE,aAAa,WAEvDQ,EAAOZ,EAAOO,eAAeV,GACjC,GAAIM,GAAME,GAAYC,GAAaM,EAAM,CACrC,IAAIC,EAAWjhB,OAAOugB,EAAGzF,MAAM,KAAK,IAChCoG,EAAYlhB,OAAOugB,EAAGzF,MAAM,KAAK,IACjCqG,EAAYH,EAAKI,UACjBC,EAAgB,EAChBC,EAAgB,EAChBC,EAAgB,EAChBC,EAAgB,EAChBR,EAAKjhB,WAAaihB,EAAKjhB,UAAU0hB,QAAQC,gBACzCL,EAAgBL,EAAKjhB,UAAU0hB,QAAQC,cAAcC,OAAOriB,EAC5DgiB,EAAgBN,EAAKjhB,UAAU0hB,QAAQC,cAAcC,OAAOC,EAC5DL,EAAgBP,EAAKjhB,UAAU0hB,QAAQC,cAAcC,OAAOE,EAC5DL,EAAgBR,EAAKjhB,UAAU0hB,QAAQC,cAAcC,OAAOG,GAIhEplB,KAAK4hB,YAAe+C,EAAgBF,EAAU/gB,EAAImhB,GAAiBd,EAAYQ,EAC/EvkB,KAAK8hB,WAAc8C,EAAgBH,EAAU9gB,EAAImhB,GAAiBd,EAAaQ,EAC/ExkB,KAAKqiB,YAAeoC,EAAUhkB,MAAQkkB,GAAkBZ,EAAWQ,GACnEvkB,KAAKuiB,aAAgBkC,EAAU/jB,OAASkkB,GAAkBZ,EAAYQ,GACtExkB,KAAK+f,oCAAqC,EAC1C/f,KAAKsgB,kCAAkCjM,gBAAgBrU,SASnE,sBAAI,wBAAS,C,IAAb,WACI,OAAOA,KAAKigB,Y,IAEhB,SAAcxgB,GACNO,KAAKigB,aAAexgB,IAIxBO,KAAKigB,WAAaxgB,EAClBO,KAAKoM,iB,gCAOT,sBAAI,yBAAU,C,IAAd,WACI,OAAOpM,KAAKkgB,a,IAEhB,SAAezgB,GACPO,KAAKkgB,cAAgBzgB,IAIzBO,KAAKkgB,YAAczgB,EACnBO,KAAKoM,iB,gCAOT,sBAAI,qBAAM,C,IAAV,WACI,OAAOpM,KAAKmgB,S,IAEhB,SAAW1gB,GACHO,KAAKmgB,UAAY1gB,IAIrBO,KAAKmgB,QAAU1gB,EACfO,KAAKoM,iB,gCAoBF,YAAAmJ,SAAP,SAAgB7R,EAAWC,GACvB,IAAK,YAAM4R,SAAQ,UAAC7R,EAAGC,GACnB,OAAO,EAGX,IAAK3D,KAAKwgB,6BAA+BxgB,KAAKqf,eAC1C,OAAO,EAGX,IACMpN,EADSjS,KAAKqf,eACGF,WAAW,MAC5B1e,EAAqC,EAA7BT,KAAKyH,gBAAgBhH,MAC7BC,EAAuC,EAA9BV,KAAKyH,gBAAgB/G,OAQpC,OAPkBuR,EAAQqD,aAAa,EAAG,EAAG7U,EAAOC,GAAQoiB,KAKS,IAHrEpf,EAAKA,EAAI1D,KAAKyH,gBAAgBnF,KAAQ,IACtCqB,EAAKA,EAAI3D,KAAKyH,gBAAgBlF,IAAO,GAEEvC,KAAKyH,gBAAgBhH,OAAa,GAEpD,GAGf,YAAA4L,aAAV,WACI,MAAO,SAIJ,YAAAwU,2BAAP,WACS7gB,KAAKsf,UAIVtf,KAAKS,MAAQT,KAAKihB,UAAUxgB,MAAQ,KACpCT,KAAKU,OAASV,KAAKihB,UAAUvgB,OAAS,OAGhC,YAAAoT,iBAAV,SAA2BL,EAAwBxB,GAC/C,GAAIjS,KAAKsf,QACL,OAAQtf,KAAKuf,UACT,KAAKC,EAAM6F,aAEX,KAAK7F,EAAMC,aAEX,KAAKD,EAAM8F,gBAEX,KAAK9F,EAAM+F,mBACP,MACJ,KAAK/F,EAAMgG,eACHxlB,KAAK0f,YACL1f,KAAK6gB,6BAEL7gB,KAAKqN,QAAUrN,KAAKqN,OAAOA,SAC3BrN,KAAKqN,OAAO+N,sBAAuB,EACnCpb,KAAKqN,OAAOgO,uBAAwB,GAMpD,YAAMvH,iBAAgB,UAACL,EAAexB,IAGlC,YAAAwT,wCAAR,WACI,GAAKzlB,KAAKwgB,2BAAV,CAIKxgB,KAAKqf,iBACNrf,KAAKqf,eAAiBhH,SAASC,cAAc,WAEjD,IAAM0I,EAAShhB,KAAKqf,eACd5e,EAAQT,KAAKyH,gBAAgBhH,MAC7BC,EAASV,KAAKyH,gBAAgB/G,OAC9BuR,EAAU+O,EAAO7B,WAAW,MAElC6B,EAAOvgB,MAAQA,EACfugB,EAAOtgB,OAASA,EAEhBuR,EAAQyT,UAAU,EAAG,EAAGjlB,EAAOC,KAG3B,YAAAilB,WAAR,SAAmB1T,EAAmC2T,EAAYC,EAAYC,EAAYC,EAAYtf,EAAYC,EAAYsf,EAAYC,IACtIhU,EAAQiP,UAAUlhB,KAAKihB,UACnB2E,EAAIC,EAAIC,EAAIC,EACZtf,EAAIC,EAAIsf,EAAIC,GAEXjmB,KAAKwgB,8BAKVvO,EADejS,KAAKqf,eACHF,WAAW,OAEpB+B,UAAUlhB,KAAKihB,UACnB2E,EAAIC,EAAIC,EAAIC,EACZtf,EAAKzG,KAAKyH,gBAAgBnF,KAAMoE,EAAK1G,KAAKyH,gBAAgBlF,IAAKyjB,EAAIC,IAGpE,YAAA5Q,MAAP,SAAapD,GAUT,IAAIvO,EAAGC,EAAGlD,EAAOC,EACjB,GAVAuR,EAAQU,QAEJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,gBAIb,GAAhBnR,KAAKkmB,OACLxiB,EAAI1D,KAAK2f,YACThc,EAAI3D,KAAK4f,WAETnf,EAAQT,KAAK6f,aAAe7f,KAAK6f,aAAe7f,KAAK2iB,YACrDjiB,EAASV,KAAK8f,cAAgB9f,KAAK8f,cAAgB9f,KAAK4iB,iBAEvD,CACD,IAAIuD,EAAWnmB,KAAKihB,UAAUmF,aAAepmB,KAAKqmB,UAC9CC,EAAUtmB,KAAKkmB,OAASC,GAAa,EACrCI,EAAMvmB,KAAKkmB,OAASC,EAExBziB,EAAI1D,KAAKqmB,UAAYE,EACrB5iB,EAAI3D,KAAKwmB,WAAaF,EACtB7lB,EAAQT,KAAKqmB,UACb3lB,EAASV,KAAKwmB,WAMlB,GAHAxmB,KAAKylB,0CAELzlB,KAAKiT,aAAahB,GACdjS,KAAKsf,QACL,OAAQtf,KAAKuf,UACT,KAAKC,EAAM6F,aAIX,KAAK7F,EAAMC,aACPzf,KAAK2lB,WAAW1T,EAASvO,EAAGC,EAAGlD,EAAOC,EAClCV,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QAC1G,MACJ,KAAK8e,EAAM8F,gBACP,IAAImB,EAASzmB,KAAKyH,gBAAgBhH,MAAQA,EACtCimB,EAAS1mB,KAAKyH,gBAAgB/G,OAASA,EACvCimB,EAAQ5jB,KAAKC,IAAIyjB,EAAQC,GACzBE,GAAW5mB,KAAKyH,gBAAgBhH,MAAQA,EAAQkmB,GAAS,EACzDE,GAAW7mB,KAAKyH,gBAAgB/G,OAASA,EAASimB,GAAS,EAE/D3mB,KAAK2lB,WAAW1T,EAASvO,EAAGC,EAAGlD,EAAOC,EAClCV,KAAKyH,gBAAgBnF,KAAOskB,EAAS5mB,KAAKyH,gBAAgBlF,IAAMskB,EAASpmB,EAAQkmB,EAAOjmB,EAASimB,GACrG,MACJ,KAAKnH,EAAMgG,eACPxlB,KAAK2lB,WAAW1T,EAASvO,EAAGC,EAAGlD,EAAOC,EAClCV,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QAC1G,MACJ,KAAK8e,EAAM+F,mBACPvlB,KAAK8mB,iBAAiB7U,GAKlCA,EAAQc,WAGJ,YAAAgU,mBAAR,SAA2B9U,EAAmCvO,EAAWC,EAAWlD,EAAeC,EAAgBsmB,EAAiBC,GAChIjnB,KAAK2lB,WAAW1T,EAASvO,EAAGC,EAAGlD,EAAOC,EAAQV,KAAKyH,gBAAgBnF,KAAO0kB,EAAShnB,KAAKyH,gBAAgBlF,IAAM0kB,EAASxmB,EAAOC,IAG1H,YAAAomB,iBAAR,SAAyB7U,GACrB,IAAIvR,EAASV,KAAK4iB,aACdsE,EAAYlnB,KAAKygB,WACjB0G,EAAYnnB,KAAK2gB,UACjByG,EAAepnB,KAAK4iB,aAAe5iB,KAAK4gB,aACxCyG,EAAarnB,KAAK2iB,YAAc3iB,KAAK0gB,YACrCpe,EAAO,EACPC,EAAM,EAENvC,KAAKogB,oCACL9d,EAAO,EACPC,EAAM,EACN7B,GAAU,EACVwmB,GAAa,EACbC,GAAa,EACbC,GAAgB,EAChBC,GAAc,GAGlB,IAAMC,EAActnB,KAAK0gB,YAAc1gB,KAAKygB,WACtC8G,EAAoBvnB,KAAKyH,gBAAgBhH,MAAQ4mB,EAAarnB,KAAKwnB,UACnEC,EAAkBznB,KAAKyH,gBAAgB/G,OAASA,EAASV,KAAK4gB,aAGpE5gB,KAAK+mB,mBAAmB9U,EAAS3P,EAAMC,EAAK2kB,EAAWC,EAAW,EAAG,GACrEnnB,KAAK+mB,mBAAmB9U,EAAS3P,EAAMtC,KAAK4gB,aAAcsG,EAAWxmB,EAASV,KAAK4gB,aAAc,EAAG6G,GAEpGznB,KAAK+mB,mBAAmB9U,EAASjS,KAAK0gB,YAAane,EAAK8kB,EAAYF,EAAWnnB,KAAKyH,gBAAgBhH,MAAQ4mB,EAAY,GACxHrnB,KAAK+mB,mBAAmB9U,EAASjS,KAAK0gB,YAAa1gB,KAAK4gB,aAAcyG,EAAY3mB,EAASV,KAAK4gB,aAAc5gB,KAAKyH,gBAAgBhH,MAAQ4mB,EAAYI,GAGvJznB,KAAK2lB,WAAW1T,EAASjS,KAAKygB,WAAYzgB,KAAK2gB,UAAW2G,EAAatnB,KAAK4gB,aAAe5gB,KAAK2gB,UAC5F3gB,KAAKyH,gBAAgBnF,KAAO4kB,EAAWlnB,KAAKyH,gBAAgBlF,IAAM4kB,EAAWI,EAAmBE,EAAkBN,GAGtHnnB,KAAK2lB,WAAW1T,EAAS3P,EAAMtC,KAAK2gB,UAAWuG,EAAWlnB,KAAK4gB,aAAe5gB,KAAK2gB,UAC/E3gB,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAM4kB,EAAWD,EAAWO,EAAkBN,GAElGnnB,KAAK2lB,WAAW1T,EAASjS,KAAK0gB,YAAa1gB,KAAK2gB,UAAWuG,EAAWlnB,KAAK4gB,aAAe5gB,KAAK2gB,UAC3F3gB,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ4mB,EAAYrnB,KAAKyH,gBAAgBlF,IAAM4kB,EAAWD,EAAWO,EAAkBN,GAE5InnB,KAAK2lB,WAAW1T,EAASjS,KAAKygB,WAAYle,EAAK+kB,EAAaH,EACxDnnB,KAAKyH,gBAAgBnF,KAAO4kB,EAAWlnB,KAAKyH,gBAAgBlF,IAAKglB,EAAmBJ,GAExFnnB,KAAK2lB,WAAW1T,EAASjS,KAAKygB,WAAYzgB,KAAK4gB,aAAc0G,EAAaF,EACtEpnB,KAAKyH,gBAAgBnF,KAAO4kB,EAAWlnB,KAAKyH,gBAAgBlF,IAAMklB,EAAiBF,EAAmBH,IAGvG,YAAA1P,QAAP,WACI,YAAMA,QAAO,WACb1X,KAAKqgB,wBAAwB1I,QAC7B3X,KAAKsgB,kCAAkC3I,SAKpB,EAAA0N,aAAe,EAEf,EAAA5F,aAAe,EAEf,EAAA6F,gBAAkB,EAElB,EAAAE,eAAiB,EAEjB,EAAAD,mBAAqB,EAChD,EA/0BA,CAA2B,GAg1B3B,IAAW7L,gBAAgB,qBAAuB,EC/0BlD,kBA2CI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,KADI,EAAAA,OAtBZ,EAAAqgB,2BAA4B,EAyB/B,EAAKC,UAAY,EACjB,EAAK9c,kBAAmB,EAExB,IAAI+c,EAA+B,K,OAEnC,EAAKC,sBAAwB,WACzBD,EAAa,EAAKrU,MAClB,EAAKA,OAAS,IAGlB,EAAKuU,oBAAsB,WACJ,OAAfF,IACA,EAAKrU,MAAQqU,IAIrB,EAAKG,qBAAuB,WACxB,EAAKphB,QAAU,IACf,EAAKC,QAAU,KAGnB,EAAKohB,mBAAqB,WACtB,EAAKrhB,QAAU,IACf,EAAKC,QAAU,K,EAwL3B,OA7P4B,iBA2BxB,sBAAW,oBAAK,C,IAAhB,WACI,OAAO5G,KAAKioB,Q,gCAOhB,sBAAW,wBAAS,C,IAApB,WACI,OAAOjoB,KAAKkoB,Y,gCAqCN,YAAA7b,aAAV,WACI,MAAO,UAKJ,YAAAoJ,gBAAP,SAAuB/R,EAAWC,EAAW+R,EAAcC,EAAmB1R,EAAqB2R,EAAiBC,GAChH,IAAK7V,KAAKoK,aAAepK,KAAK4K,mBAAqB5K,KAAK2T,WAAa3T,KAAKqP,cACtE,OAAO,EAGX,IAAK,YAAMkG,SAAQ,UAAC7R,EAAGC,GACnB,OAAO,EAGX,GAAI3D,KAAK0nB,0BAA2B,CAEhC,IADA,IAAInS,GAAW,EACNxF,EAAQ/P,KAAK2Z,UAAU/X,OAAS,EAAGmO,GAAS,EAAGA,IAAS,CAC7D,IAAIqK,EAAQpa,KAAK2Z,UAAU5J,GAC3B,GAAIqK,EAAM+N,WAAa/N,EAAMxP,kBAAoBwP,EAAMzG,YAAcyG,EAAM/K,eAAiB+K,EAAM7E,SAAS7R,EAAGC,GAAI,CAC9G4R,GAAW,EACX,OAIR,IAAKA,EACD,OAAO,EAMf,OAFAvV,KAAK8V,oBAAoBJ,EAAMhS,EAAGC,EAAGgS,EAAW1R,EAAa2R,EAAQC,IAE9D,GAIJ,YAAAK,gBAAP,SAAuBF,GACnB,QAAK,YAAME,gBAAe,UAACF,KAIvBhW,KAAK6nB,uBACL7nB,KAAK6nB,yBAGF,IAIJ,YAAA1R,cAAP,SAAqBH,EAAiBxE,QAAA,IAAAA,OAAA,GAC9BxR,KAAK8nB,qBACL9nB,KAAK8nB,sBAGT,YAAM3R,cAAa,UAACH,EAAQxE,IAIzB,YAAA6E,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,QAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,KAItDjE,KAAK+nB,sBACL/nB,KAAK+nB,wBAGF,IAIJ,YAAAzR,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmB1R,EAAqBsS,GAC3FvW,KAAKgoB,oBACLhoB,KAAKgoB,qBAGT,YAAM1R,aAAY,UAACN,EAAQC,EAAaN,EAAW1R,EAAasS,IAWtD,EAAA6R,kBAAd,SAAgC/gB,EAAc+Q,EAAciQ,GACxD,IAAIvlB,EAAS,IAAIwlB,EAAOjhB,GAGpBkhB,EAAY,IAAI,EAAUlhB,EAAO,UAAW+Q,GAChDmQ,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B,EAAQrgB,4BAC5CmgB,EAAU/a,YAAc,MACxB1K,EAAO2X,WAAW8N,GAGlB,IAAIG,EAAY,IAAI,EAAMrhB,EAAO,QAASghB,GAU1C,OATAK,EAAUjoB,MAAQ,MAClBioB,EAAUC,QAAU,EAAMrD,gBAC1BoD,EAAUha,oBAAsB,EAAQC,0BACxC7L,EAAO2X,WAAWiO,GAGlB5lB,EAAOmlB,OAASS,EAChB5lB,EAAOolB,WAAaK,EAEbzlB,GASG,EAAA8lB,sBAAd,SAAoCvhB,EAAcghB,GAC9C,IAAIvlB,EAAS,IAAIwlB,EAAOjhB,GAGpBqhB,EAAY,IAAI,EAAMrhB,EAAO,QAASghB,GAQ1C,OAPAK,EAAUC,QAAU,EAAMlJ,aAC1BiJ,EAAUha,oBAAsB,EAAQC,0BACxC7L,EAAO2X,WAAWiO,GAGlB5lB,EAAOmlB,OAASS,EAET5lB,GASG,EAAA+lB,mBAAd,SAAiCxhB,EAAc+Q,GAC3C,IAAItV,EAAS,IAAIwlB,EAAOjhB,GAGpBkhB,EAAY,IAAI,EAAUlhB,EAAO,UAAW+Q,GAQhD,OAPAmQ,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B,EAAQrgB,4BAC5CtF,EAAO2X,WAAW8N,GAGlBzlB,EAAOolB,WAAaK,EAEbzlB,GAUG,EAAAgmB,gCAAd,SAA8CzhB,EAAc+Q,EAAciQ,GACtE,IAAIvlB,EAAS,IAAIwlB,EAAOjhB,GAGpBqhB,EAAY,IAAI,EAAMrhB,EAAO,QAASghB,GAC1CK,EAAUC,QAAU,EAAMlJ,aAC1B3c,EAAO2X,WAAWiO,GAGlB,IAAIH,EAAY,IAAI,EAAUlhB,EAAO,UAAW+Q,GAShD,OARAmQ,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B,EAAQrgB,4BAC5CtF,EAAO2X,WAAW8N,GAGlBzlB,EAAOmlB,OAASS,EAChB5lB,EAAOolB,WAAaK,EAEbzlB,GAEf,EA7PA,CAA4B,GA8P5B,IAAW4W,gBAAgB,sBAAwB,EChQnD,kBAyEI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAxEX,EAAA0hB,aAAc,EACd,EAAAC,cAAe,EACf,EAAAC,eAAgB,EAChB,EAAAC,0BAA2B,EAK5B,EAAAC,sBAAuB,E,EAgLlC,OAzLgC,iBAY5B,sBAAW,yBAAU,C,IAArB,WACI,OAAOnpB,KAAK+oB,a,IAGhB,SAAsBtpB,GACdO,KAAK+oB,cAAgBtpB,IAIzBO,KAAK+oB,YAActpB,EACnBO,KAAKoM,iB,gCAOT,sBAAW,oBAAK,C,IAchB,WACI,OAAOpM,KAAK8H,OAAO5G,SAASlB,KAAKuM,Q,IAfrC,SAAiB9M,GACRO,KAAKkpB,2BACNlpB,KAAKgpB,cAAe,GAGpBhpB,KAAK8H,OAAO5G,SAASlB,KAAKuM,SAAW9M,GAIrCO,KAAK8H,OAAOvG,WAAW9B,IACvBO,KAAKoM,gB,gCAYb,sBAAW,qBAAM,C,IAcjB,WACI,OAAOpM,KAAK+H,QAAQ7G,SAASlB,KAAKuM,Q,IAftC,SAAkB9M,GACTO,KAAKkpB,2BACNlpB,KAAKipB,eAAgB,GAGrBjpB,KAAK+H,QAAQ7G,SAASlB,KAAKuM,SAAW9M,GAItCO,KAAK+H,QAAQxG,WAAW9B,IACxBO,KAAKoM,gB,gCAgBH,YAAAC,aAAV,WACI,MAAO,cAID,YAAA2H,YAAV,SAAsBP,EAAwBxB,GAC1C,IAAkB,UAAAjS,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KACNpa,KAAK+oB,YACL3O,EAAMxL,kBAAoB,EAAQC,uBAElCuL,EAAM1L,oBAAsB,EAAQC,0BAI5C,YAAMqF,YAAW,UAACP,EAAexB,IAG3B,YAAAkC,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK4Z,oBAAoBpX,SAASiR,GAElCzT,KAAK4Z,oBAAoBtX,KAAOtC,KAAKyH,gBAAgBnF,KACrDtC,KAAK4Z,oBAAoBrX,IAAMvC,KAAKyH,gBAAgBlF,IAE/CvC,KAAKopB,aAAcppB,KAAKgpB,eACzBhpB,KAAK4Z,oBAAoBnZ,MAAQT,KAAKyH,gBAAgBhH,QAGtDT,KAAKopB,YAAcppB,KAAKipB,iBACxBjpB,KAAK4Z,oBAAoBlZ,OAASV,KAAKyH,gBAAgB/G,SAIrD,YAAA4a,aAAV,WAGI,IAFA,IAAI+N,EAAa,EACbC,EAAc,EACA,MAAAtpB,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KACLA,EAAMzG,YAAayG,EAAM/K,gBAI1BrP,KAAK+oB,aACD3O,EAAM7X,MAAQ+mB,EAAc,OAC5BlP,EAAM7X,IAAM+mB,EAAc,KAC1BtpB,KAAKuK,gBAAiB,EACtB6P,EAAMnR,KAAKlJ,uBAAwB,GAGnCqa,EAAMrS,QAAQkF,eAAiBmN,EAAM1P,eAChC1K,KAAKmpB,sBACN,IAAMI,KAAK,iBAAiBnP,EAAM/S,KAAI,cAAc+S,EAAMtI,SAAQ,qEAGtEwX,GAAelP,EAAM3S,gBAAgB/G,OAAS0Z,EAAMoD,mBAAqBpD,EAAMqD,wBAG/ErD,EAAM9X,OAAS+mB,EAAa,OAC5BjP,EAAM9X,KAAO+mB,EAAa,KAC1BrpB,KAAKuK,gBAAiB,EACtB6P,EAAMpR,MAAMjJ,uBAAwB,GAGpCqa,EAAMtS,OAAOmF,eAAiBmN,EAAM1P,eAC/B1K,KAAKmpB,sBACN,IAAMI,KAAK,iBAAiBnP,EAAM/S,KAAI,cAAc+S,EAAMtI,SAAQ,sEAGtEuX,GAAcjP,EAAM3S,gBAAgBhH,MAAQ2Z,EAAMgD,oBAAsBhD,EAAMiD,uBAK1Frd,KAAKkpB,0BAA2B,EAKhC,IAAIM,GAAoB,EACpBC,GAAqB,EAEzB,IAAKzpB,KAAKipB,eAAiBjpB,KAAK+oB,YAAa,CACzC,IAAIW,EAAiB1pB,KAAKU,OAC1BV,KAAKU,OAAS4oB,EAAc,KAC5BG,EAAqBC,IAAmB1pB,KAAKU,SAAWV,KAAK+H,QAAQhI,sBAEzE,IAAKC,KAAKgpB,eAAiBhpB,KAAK+oB,YAAa,CACzC,IAAIY,EAAgB3pB,KAAKS,MACzBT,KAAKS,MAAQ4oB,EAAa,KAC1BG,EAAoBG,IAAkB3pB,KAAKS,QAAUT,KAAK8H,OAAO/H,sBAGjE0pB,IACAzpB,KAAK+H,QAAQhI,uBAAwB,GAGrCypB,IACAxpB,KAAK8H,OAAO/H,uBAAwB,GAGxCC,KAAKkpB,0BAA2B,GAE5BM,GAAqBC,KACrBzpB,KAAKuK,gBAAiB,GAG1B,YAAM+Q,aAAY,YAE1B,EAzLA,CAAgC,GA0LhC,IAAW5B,gBAAgB,0BAA4B,ECvLvD,kBA2EI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OA1EX,EAAAuiB,YAAa,EACb,EAAA/P,YAAc,QACd,EAAAgQ,gBAAkB,GAClB,EAAAnO,WAAa,EAmBd,EAAAoO,6BAA+B,IAAI,IAsDtC,EAAKjf,kBAAmB,E,EAyFhC,OAtK8B,iBAO1B,sBAAW,wBAAS,C,IAApB,WACI,OAAO7K,KAAK0b,Y,IAGhB,SAAqBjc,GACbO,KAAK0b,aAAejc,IAIxBO,KAAK0b,WAAajc,EAClBO,KAAKoM,iB,gCAST,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK6pB,iB,IAGhB,SAA0BpqB,GACtBA,EAAQsD,KAAKG,IAAIH,KAAKC,IAAI,EAAGvD,GAAQ,GAEjCO,KAAK6pB,kBAAoBpqB,IAI7BO,KAAK6pB,gBAAkBpqB,EACvBO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK4pB,Y,IAGhB,SAAqBnqB,GACbO,KAAK4pB,aAAenqB,IAIxBO,KAAK4pB,WAAanqB,EAClBO,KAAKoM,eAELpM,KAAK8pB,6BAA6BzV,gBAAgB5U,K,gCAY5C,YAAA4M,aAAV,WACI,MAAO,YAIJ,YAAAgJ,MAAP,SAAapD,EAAmC2C,GAC5C3C,EAAQU,OAER3S,KAAKiT,aAAahB,GAClB,IAAI8X,EAAc/pB,KAAKyH,gBAAgBhH,MAAQT,KAAK0b,WAChDsO,EAAehqB,KAAKyH,gBAAgB/G,OAASV,KAAK0b,WAkBtD,IAhBI1b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjCc,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK6Z,YAAc7Z,KAAKqK,eAC9D4H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAOtC,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgBlF,IAAMvC,KAAK0b,WAAa,EAAGqO,EAAaC,IAE3HhqB,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAGxBnR,KAAK4pB,WAAY,CACjB3X,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK8b,MAAQ9b,KAAKsK,mBACxD,IAAI2f,EAAcF,EAAc/pB,KAAK6pB,gBACjCK,EAAcF,EAAehqB,KAAK6pB,gBAEtC5X,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAOtC,KAAK0b,WAAa,GAAKqO,EAAcE,GAAe,EAAGjqB,KAAKyH,gBAAgBlF,IAAMvC,KAAK0b,WAAa,GAAKsO,EAAeE,GAAe,EAAGD,EAAaC,GAGxMjY,EAAQW,YAAc5S,KAAK8b,MAC3B7J,EAAQY,UAAY7S,KAAK0b,WAEzBzJ,EAAQe,WAAWhT,KAAKyH,gBAAgBnF,KAAOtC,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgBlF,IAAMvC,KAAK0b,WAAa,EAAGqO,EAAaC,GAEjI/X,EAAQc,WAML,YAAAsD,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,QAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,KAI1DjE,KAAKmqB,WAAanqB,KAAKmqB,WAEhB,IASG,EAAAC,sBAAd,SAAoCC,EAAeC,GAC/C,IAAIC,EAAQ,IAAI,EAChBA,EAAMnB,YAAa,EACnBmB,EAAM7pB,OAAS,OAEf,IAAI8pB,EAAW,IAAIC,EACnBD,EAAS/pB,MAAQ,OACjB+pB,EAAS9pB,OAAS,OAClB8pB,EAASL,WAAY,EACrBK,EAAS1O,MAAQ,QACjB0O,EAASV,6BAA6B9c,IAAIsd,GAC1CC,EAAM9P,WAAW+P,GAEjB,IAAIE,EAAS,IAAI,EAQjB,OAPAA,EAAOtS,KAAOiS,EACdK,EAAOjqB,MAAQ,QACfiqB,EAAOld,YAAc,MACrBkd,EAAOjC,wBAA0B,EAAQ9Z,0BACzC+b,EAAO5O,MAAQ,QACfyO,EAAM9P,WAAWiQ,GAEVH,GAEf,EAtKA,CAA8B,GAuK9B,IAAW7Q,gBAAgB,wBAA0B,E,aCpKrD,cA0TI,WAAmBrS,EAAe+Q,QAAA,IAAAA,MAAA,IAAlC,MACI,YAAM/Q,IAAK,K,OADI,EAAAA,OAzTX,EAAA+U,MAAQ,GACR,EAAAuO,iBAAmB,GACnB,EAAA9Q,YAAc,UACd,EAAA+Q,mBAAqB,UACrB,EAAAC,cAAgB,QAChB,EAAAC,kBAAoB,OACpB,EAAApP,WAAa,EACb,EAAAqP,QAAU,IAAInrB,EAAa,GAAIA,EAAaC,gBAC5C,EAAAmrB,mBAAoB,EACpB,EAAAC,UAAY,IAAIrrB,EAAa,EAAGA,EAAaM,qBAAqB,GAClE,EAAAgrB,YAAa,EAEb,EAAAC,cAAe,EACf,EAAAC,cAAgB,EAIhB,EAAAC,UAAW,EACX,EAAAC,SAAU,EACV,EAAAC,YAAc,GACd,EAAAC,oBAAqB,EACrB,EAAAC,oBAAsB,UACtB,EAAAC,mBAAqB,GACrB,EAAAC,iBAAmB,GACnB,EAAAC,qBAAuB,EACvB,EAAAC,mBAAqB,EACrB,EAAAC,cAAgB,EAChB,EAAAC,mBAAoB,EACpB,EAAAC,gBAAiB,EAQlB,EAAAC,cAAgB,qBAEhB,EAAAC,qBAAsB,EAGtB,EAAArP,wBAA0B,IAAI,IAE9B,EAAAsP,yBAA2B,IAAI,IAE/B,EAAAC,kBAAoB,IAAI,IAExB,EAAAC,iBAAmB,IAAI,IAEvB,EAAAC,0BAA4B,IAAI,IAEhC,EAAAC,qBAAuB,IAAI,IAE3B,EAAAC,oBAAsB,IAAI,IAE1B,EAAAC,sBAAwB,IAAI,IAE5B,EAAAC,mCAAqC,IAAI,IAmQ5C,EAAKtU,KAAOA,EACZ,EAAKvN,kBAAmB,E,EAyrBhC,OAv/B+B,iBA6D3B,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO7K,KAAKirB,UAAU/pB,SAASlB,KAAKuM,Q,IAQxC,SAAoB9M,GACZO,KAAKirB,UAAU/pB,SAASlB,KAAKuM,SAAW9M,GAIxCO,KAAKirB,UAAU1pB,WAAW9B,IAC1BO,KAAKoM,gB,gCAVb,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOpM,KAAKirB,UAAU9qB,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,gCAchF,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOT,KAAK0rB,oB,IAGhB,SAA6BjsB,GACrBO,KAAK0rB,qBAAuBjsB,IAGhCO,KAAK0rB,mBAAqBjsB,EAC1BO,KAAKoM,iB,gCAGT,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOpM,KAAK+rB,mB,IAGhB,SAA4BtsB,GACpBO,KAAK+rB,oBAAsBtsB,IAI/BO,KAAK+rB,kBAAoBtsB,EACzBO,KAAKoM,iB,gCAIT,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOpM,KAAKyrB,qB,IAGhB,SAA8BhsB,GACtBO,KAAKyrB,sBAAwBhsB,IAGjCO,KAAKyrB,oBAAsBhsB,EAC3BO,KAAKoM,iB,gCAIT,sBAAW,qBAAM,C,IAAjB,WACI,OAAOpM,KAAK+qB,QAAQ7pB,SAASlB,KAAKuM,Q,IAQtC,SAAkB9M,GACVO,KAAK+qB,QAAQ7pB,SAASlB,KAAKuM,SAAW9M,GAItCO,KAAK+qB,QAAQxpB,WAAW9B,IACxBO,KAAKoM,gB,gCAVb,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK+qB,QAAQ5qB,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,gCAc9E,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOT,KAAKgrB,mB,IAGhB,SAA4BvrB,GACpBO,KAAKgrB,oBAAsBvrB,IAI/BO,KAAKgrB,kBAAoBvrB,EACzBO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK0b,Y,IAGhB,SAAqBjc,GACbO,KAAK0b,aAAejc,IAIxBO,KAAK0b,WAAajc,EAClBO,KAAKoM,iB,gCAIT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAK4qB,oB,IAGhB,SAA6BnrB,GACrBO,KAAK4qB,qBAAuBnrB,IAIhCO,KAAK4qB,mBAAqBnrB,EAC1BO,KAAKoM,iB,gCAIT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpM,KAAK6qB,e,IAGhB,SAAwBprB,GAChBO,KAAK6qB,gBAAkBprB,IAI3BO,KAAK6qB,cAAgBprB,EACrBO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOpM,KAAK8qB,mB,IAGhB,SAA4BrrB,GACpBO,KAAK8qB,oBAAsBrrB,IAI/BO,KAAK8qB,kBAAoBrrB,EACzBO,KAAKoM,iB,gCAIT,sBAAW,8BAAe,C,IAA1B,WACI,OAAOpM,KAAK2qB,kB,IAGhB,SAA2BlrB,GACnBO,KAAK2qB,mBAAqBlrB,IAG9BO,KAAK2qB,iBAAmBlrB,EACxBO,KAAKoM,iB,gCAIT,sBAAW,sBAAO,C,IAAlB,WACI,OAAOpM,KAAKqrB,U,IAGhB,SAAmBsB,GACf3sB,KAAKqrB,SAAWsB,G,gCAIpB,sBAAW,8BAAe,C,IAA1B,WACI,OAAO3sB,KAAK2rB,kB,IAEhB,SAA2BvT,GACnBpY,KAAK2rB,mBAAqBvT,IAG9BpY,KAAK2rB,iBAAmBvT,EACxBpY,KAAKoM,iB,gCAIT,sBAAW,qBAAM,C,IAAjB,WACI,OAAOpM,KAAKsrB,S,IAGhB,SAAkBqB,GACd3sB,KAAKsrB,QAAUqB,G,gCAInB,sBAAW,yBAAU,C,IAArB,WACI,OAAO3sB,KAAKurB,a,IAGhB,SAAsB7U,GAClB1W,KAAKurB,YAAc7U,G,gCAIvB,sBAAW,mBAAI,C,IAAf,WACI,OAAO1W,KAAKoc,O,IAGhB,SAAgB3c,GACZ,IAAImtB,EAAgBntB,EAAMyB,WAEtBlB,KAAKoc,QAAUwQ,IAGnB5sB,KAAKoc,MAAQwQ,EACb5sB,KAAKoM,eAELpM,KAAK6c,wBAAwBxI,gBAAgBrU,Q,gCAIjD,sBAAW,oBAAK,C,IAAhB,WACI,OAAOA,KAAK8H,OAAO5G,SAASlB,KAAKuM,Q,IAGrC,SAAiB9M,GACTO,KAAK8H,OAAO5G,SAASlB,KAAKuM,SAAW9M,IAIrCO,KAAK8H,OAAOvG,WAAW9B,IACvBO,KAAKoM,eAGTpM,KAAK6sB,kBAAmB,I,gCAgBrB,YAAAC,OAAP,WACI9sB,KAAKkrB,YAAa,EAClBlrB,KAAK+sB,YAAc,KACnB/sB,KAAKorB,cAAgB,EACrB4B,aAAahtB,KAAKitB,eAClBjtB,KAAKoM,eAELpM,KAAKqsB,iBAAiBhY,gBAAgBrU,MAEtCA,KAAKuM,MAAM2gB,4BACPltB,KAAKmtB,sBACLntB,KAAKuM,MAAM6gB,sBAAsBtgB,OAAO9M,KAAKmtB,sBAEjD,IAAI3e,EAAQxO,KAAKuM,MAAMwF,WACnB/R,KAAKqtB,0BAA4B7e,GACjCA,EAAM8e,oBAAoBxgB,OAAO9M,KAAKqtB,2BAKvC,YAAAE,QAAP,sBACI,GAAKvtB,KAAKoK,WAAV,CAWA,GARApK,KAAK+sB,YAAc,KACnB/sB,KAAKkrB,YAAa,EAClBlrB,KAAKmrB,cAAe,EACpBnrB,KAAKorB,cAAgB,EACrBprB,KAAKoM,eAELpM,KAAKosB,kBAAkB/X,gBAAgBrU,OAEQ,IAA3CwtB,UAAUC,UAAUxd,QAAQ,YAAqBjQ,KAAKksB,oBAAqB,CAC3E,IAAIzsB,EAAQiuB,OAAO1tB,KAAKisB,eAMxB,OAJc,OAAVxsB,IACAO,KAAKoY,KAAO3Y,QAEhBO,KAAKuM,MAAMohB,eAAiB,MAIhC3tB,KAAKuM,MAAMqhB,0BAEX5tB,KAAKmtB,qBAAuBntB,KAAKuM,MAAM6gB,sBAAsBpgB,KAAI,SAAC6gB,GAE9D,OAAQA,EAAcnY,MAClB,KAAK,IAAoBoY,KACrB,EAAKC,YAAYF,EAAcG,OAC/B,EAAKzB,qBAAqBlY,gBAAgB,GAC1C,MACJ,KAAK,IAAoB4Z,IACrB,EAAKC,WAAWL,EAAcG,OAC9B,EAAKxB,oBAAoBnY,gBAAgB,GACzC,MACJ,KAAK,IAAoB8Z,MACrB,EAAKC,aAAaP,EAAcG,OAChC,EAAKvB,sBAAsBpY,gBAAgB,GAC3C,MACJ,QAAS,WAIjB,IAAI7F,EAAQxO,KAAKuM,MAAMwF,WACnBvD,IAEAxO,KAAKqtB,yBAA2B7e,EAAM8e,oBAAoBtgB,KAAI,SAACqhB,GACtD,EAAKnD,YAGNmD,EAAY3Y,OAAS,IAAkB4Y,kBACvC,EAAKC,iBAAiBF,OAK9BruB,KAAK+rB,mBACL/rB,KAAKwuB,mBAKH,YAAAniB,aAAV,WACI,MAAO,aAOJ,YAAAoiB,eAAP,WACI,OAAKzuB,KAAK0uB,0BAGH,CAAC1uB,KAAK0uB,2BAFF,MAMR,YAAAC,WAAP,SAAkBC,EAAiBlY,EAAcmY,GAG7C,IAAIA,IAAQA,EAAIC,UAAWD,EAAIE,SAAyB,KAAZH,GAA8B,KAAZA,GAA8B,KAAZA,EAAhF,CAKA,GAAIC,IAAQA,EAAIC,SAAWD,EAAIE,UAAwB,KAAZH,EAGvC,OAFA5uB,KAAKwuB,sBACLK,EAAIG,iBAIR,OAAQJ,GACJ,KAAK,GACDlY,EAAM,IACN,MACJ,KAAK,IACGmY,GACAA,EAAIG,iBAER,MACJ,KAAK,EACD,GAAIhvB,KAAKoc,OAASpc,KAAKoc,MAAMxa,OAAS,EAAG,CAErC,GAAI5B,KAAKwrB,mBAQL,OAPAxrB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG3a,KAAK4rB,sBAAwB5rB,KAAKoc,MAAMzB,MAAM3a,KAAK6rB,oBACnF7rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,OAAS5B,KAAK4rB,qBAC7C5rB,KAAKmrB,cAAe,OAChB0D,GACAA,EAAIG,kBAKZ,GAA2B,IAAvBhvB,KAAKorB,cACLprB,KAAKoY,KAAOpY,KAAKoc,MAAM6S,OAAO,EAAGjvB,KAAKoc,MAAMxa,OAAS,QAEjDstB,EAAiBlvB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,eACzB,IACjBprB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAGuU,EAAiB,GAAKlvB,KAAKoc,MAAMzB,MAAMuU,IAOnF,YAHIL,GACAA,EAAIG,kBAGZ,KAAK,GACD,GAAIhvB,KAAKwrB,mBAAoB,CACzBxrB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG3a,KAAK4rB,sBAAwB5rB,KAAKoc,MAAMzB,MAAM3a,KAAK6rB,oBAEnF,IADA,IAAIsD,EAAenvB,KAAK6rB,mBAAqB7rB,KAAK4rB,qBAC3CuD,EAAc,GAAKnvB,KAAKorB,cAAgB,GAC3CprB,KAAKorB,gBAOT,OALAprB,KAAKwrB,oBAAqB,EAC1BxrB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,OAAS5B,KAAK4rB,0BACzCiD,GACAA,EAAIG,kBAIZ,GAAIhvB,KAAKoc,OAASpc,KAAKoc,MAAMxa,OAAS,GAAK5B,KAAKorB,cAAgB,EAAG,CAC/D,IAAI8D,EAAiBlvB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAC9CprB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAGuU,GAAkBlvB,KAAKoc,MAAMzB,MAAMuU,EAAiB,GACpFlvB,KAAKorB,gBAKT,YAHIyD,GACAA,EAAIG,kBAGZ,KAAK,GAGD,OAFAhvB,KAAKuM,MAAMohB,eAAiB,UAC5B3tB,KAAKwrB,oBAAqB,GAE9B,KAAK,GAKD,OAJAxrB,KAAKorB,cAAgB,EACrBprB,KAAKmrB,cAAe,EACpBnrB,KAAKwrB,oBAAqB,OAC1BxrB,KAAKoM,eAET,KAAK,GAKD,OAJApM,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,OAChC5B,KAAKmrB,cAAe,EACpBnrB,KAAKwrB,oBAAqB,OAC1BxrB,KAAKoM,eAET,KAAK,GAMD,GALApM,KAAKorB,gBACDprB,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,SAChC5B,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,QAGhCitB,GAAOA,EAAIO,SAAU,CAIrB,GAFApvB,KAAKmrB,cAAe,EAEhB0D,EAAIC,SAAWD,EAAIE,QAAS,CAC5B,IAAK/uB,KAAKwrB,mBAAoB,CAC1B,GAAIxrB,KAAKoc,MAAMxa,SAAW5B,KAAKorB,cAC3B,OAGAprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAAgB,EAQ3E,OALAprB,KAAK4rB,qBAAuB,EAC5B5rB,KAAK8rB,aAAe9rB,KAAKoc,MAAMxa,OAAS5B,KAAK6rB,mBAC7C7rB,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,OAChC5B,KAAKwrB,oBAAqB,OAC1BxrB,KAAKoM,eA0BT,OAtBKpM,KAAKwrB,oBAKsB,IAAvBxrB,KAAK8rB,eACV9rB,KAAK8rB,aAAe9rB,KAAKoc,MAAMxa,OAAS5B,KAAK6rB,mBAC7C7rB,KAAKorB,cAA+C,IAA9BprB,KAAK4rB,qBAA8B5rB,KAAKoc,MAAMxa,OAAS5B,KAAKoc,MAAMxa,OAAS5B,KAAK4rB,qBAAuB,IAN7H5rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAK8rB,aAAgB9rB,KAAKorB,eAAiBprB,KAAKoc,MAAMxa,OAAU5B,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAAgB,GAQzGprB,KAAK8rB,aAAe9rB,KAAKorB,eACzBprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,aACnD9rB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,eAEhDprB,KAAK8rB,aAAe9rB,KAAKorB,eAC9BprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cACnDprB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,cAGrD9rB,KAAKwrB,oBAAqB,OAE9BxrB,KAAKoM,eAeT,OAZIpM,KAAKwrB,qBACLxrB,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,OAAS5B,KAAK4rB,qBAC9C5rB,KAAKwrB,oBAAqB,GAE1BqD,IAAQA,EAAIC,SAAWD,EAAIE,WAC3B/uB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,OAC/BitB,EAAIG,kBAERhvB,KAAKmrB,cAAe,EACpBnrB,KAAKwrB,oBAAqB,EAC1BxrB,KAAK8rB,cAAgB,OACrB9rB,KAAKoM,eAET,KAAK,GAKD,GAJApM,KAAKorB,gBACDprB,KAAKorB,cAAgB,IACrBprB,KAAKorB,cAAgB,GAErByD,GAAOA,EAAIO,SAAU,CAIrB,GAFApvB,KAAKmrB,cAAe,EAEhB0D,EAAIC,SAAWD,EAAIE,QAAS,CAC5B,IAAK/uB,KAAKwrB,mBAAoB,CAC1B,GAA2B,IAAvBxrB,KAAKorB,cACL,OAGAprB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAAgB,EAQ7E,OALAprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OACrC5B,KAAKwrB,oBAAqB,EAC1BxrB,KAAK8rB,aAAe9rB,KAAKoc,MAAMxa,OAAS5B,KAAK4rB,qBAC7C5rB,KAAKorB,cAAgB,OACrBprB,KAAKoM,eA0BT,OAtBKpM,KAAKwrB,oBAKsB,IAAvBxrB,KAAK8rB,eACV9rB,KAAK8rB,aAAe9rB,KAAKoc,MAAMxa,OAAS5B,KAAK4rB,qBAC7C5rB,KAAKorB,cAAiBprB,KAAKoc,MAAMxa,SAAW5B,KAAK6rB,mBAAsB,EAAI7rB,KAAKoc,MAAMxa,OAAS5B,KAAK6rB,mBAAqB,IANzH7rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAK8rB,aAAgB9rB,KAAKorB,eAAiB,EAAK,EAAIprB,KAAKorB,cAAgB,GAQzEprB,KAAK8rB,aAAe9rB,KAAKorB,eACzBprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,aACnD9rB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,eAEhDprB,KAAK8rB,aAAe9rB,KAAKorB,eAC9BprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cACnDprB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,cAGrD9rB,KAAKwrB,oBAAqB,OAE9BxrB,KAAKoM,eAgBT,OAbIpM,KAAKwrB,qBACLxrB,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,OAAS5B,KAAK6rB,mBAC9C7rB,KAAKwrB,oBAAqB,GAG1BqD,IAAQA,EAAIC,SAAWD,EAAIE,WAC3B/uB,KAAKorB,cAAgB,EACrByD,EAAIG,kBAERhvB,KAAKmrB,cAAe,EACpBnrB,KAAKwrB,oBAAqB,EAC1BxrB,KAAK8rB,cAAgB,OACrB9rB,KAAKoM,eAET,KAAK,IACGyiB,GACAA,EAAIG,iBAERhvB,KAAK8rB,cAAgB,EACrB9rB,KAAKqvB,SAAU,EAIvB,GAAI3Y,KACe,IAAbkY,GACe,KAAZA,GACAA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,IAAMA,EAAU,OAC/B5uB,KAAKurB,YAAc7U,EACnB1W,KAAKmsB,yBAAyB9X,gBAAgBrU,MAC9C0W,EAAM1W,KAAKurB,YACPvrB,KAAKsrB,SACL,GAAItrB,KAAKwrB,mBACLxrB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG3a,KAAK4rB,sBAAwBlV,EAAM1W,KAAKoc,MAAMzB,MAAM3a,KAAK6rB,oBACzF7rB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,QAAU5B,KAAK4rB,qBAAuB,GACrE5rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAKmrB,cAAe,EACpBnrB,KAAKoM,oBAEJ,GAA2B,IAAvBpM,KAAKorB,cACVprB,KAAKoY,MAAQ1B,MACV,CACH,IAAI4Y,EAAiBtvB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAC9CprB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG2U,GAAkB5Y,EAAM1W,KAAKoc,MAAMzB,MAAM2U,MAOjF,YAAAC,4BAAR,SAAoC9iB,GAIhC,GAFAzM,KAAKmrB,cAAe,GAEO,IAAvBnrB,KAAK8rB,aACL9rB,KAAK8rB,aAAerf,OAEpB,GAAIzM,KAAK8rB,aAAe9rB,KAAKorB,cACzBprB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,aACnD9rB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,kBAEpD,MAAIprB,KAAK8rB,aAAe9rB,KAAKorB,eAO9B,OAFAprB,KAAKwrB,oBAAqB,OAC1BxrB,KAAKoM,eALLpM,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cACnDprB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAK8rB,aAQ7D9rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAKoM,gBAGD,YAAAmiB,iBAAR,SAAyBM,GAErB7uB,KAAK4rB,qBAAuB5rB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cACrDprB,KAAK6rB,mBAAqB7rB,KAAK4rB,qBAC/B,IAAoB4D,EAAUC,EAA1BC,EAAQ,OACZ,GACID,EAAYzvB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,SAAkE,IAAvD5B,KAAKoc,MAAMpc,KAAK6rB,oBAAoBzI,OAAOsM,KAAmB1vB,KAAK6rB,mBAAqB,EACpJ2D,EAAWxvB,KAAK4rB,qBAAuB,IAAmE,IAA7D5rB,KAAKoc,MAAMpc,KAAK4rB,qBAAuB,GAAGxI,OAAOsM,KAAmB1vB,KAAK4rB,qBAAuB,QACxI4D,GAAYC,GAErBzvB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,OAAS5B,KAAK4rB,qBAC7C5rB,KAAKssB,0BAA0BjY,gBAAgBrU,MAE/CA,KAAKwrB,oBAAqB,EAC1BxrB,KAAK2vB,mBAAqB,KAC1B3vB,KAAKmrB,cAAe,EACpBnrB,KAAK8rB,cAAgB,EACrB9rB,KAAKoM,gBAGD,YAAAoiB,eAAR,WACIxuB,KAAKmrB,cAAe,EACpBnrB,KAAKwrB,oBAAqB,EAE1BxrB,KAAK4rB,qBAAuB,EAC5B5rB,KAAK6rB,mBAAqB7rB,KAAKoc,MAAMxa,OACrC5B,KAAKorB,cAAgBprB,KAAKoc,MAAMxa,OAChC5B,KAAK8rB,cAAgB,EACrB9rB,KAAKoM,gBAOF,YAAAwjB,gBAAP,SAAuBf,GAEnB7uB,KAAK2uB,WAAWE,EAAID,QAASC,EAAInY,IAAKmY,GAEtC7uB,KAAK0sB,mCAAmCrY,gBAAgBwa,IAIpD,YAAAd,YAAR,SAAoB8B,GAChB7vB,KAAKwrB,oBAAqB,EAE1B,IACIqE,EAAGC,eAAiBD,EAAGC,cAAcC,QAAQ,aAAc/vB,KAAK2rB,kBAEpE,UACA3rB,KAAKuM,MAAMujB,cAAgB9vB,KAAK2rB,kBAG5B,YAAAuC,WAAR,SAAmB2B,GACf,GAAK7vB,KAAK2rB,iBAAV,CAGA3rB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG3a,KAAK4rB,sBAAwB5rB,KAAKoc,MAAMzB,MAAM3a,KAAK6rB,oBACnF7rB,KAAKwrB,oBAAqB,EAC1BxrB,KAAKorB,cAAgBprB,KAAKoY,KAAKxW,OAAS5B,KAAK4rB,qBAE7C,IACIiE,EAAGC,eAAiBD,EAAGC,cAAcC,QAAQ,aAAc/vB,KAAK2rB,kBAEpE,UAEA3rB,KAAKuM,MAAMujB,cAAgB9vB,KAAK2rB,iBAChC3rB,KAAK2rB,iBAAmB,KAGpB,YAAAyC,aAAR,SAAqByB,GACjB,IAAI/M,EAAe,GAEfA,EADA+M,EAAGC,gBAAmE,IAAlDD,EAAGC,cAAcE,MAAM/f,QAAQ,cAC5C4f,EAAGC,cAAcG,QAAQ,cAIzBjwB,KAAKuM,MAAMujB,cAEtB,IAAIR,EAAiBtvB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,cAC9CprB,KAAKoY,KAAOpY,KAAKoc,MAAMzB,MAAM,EAAG2U,GAAkBxM,EAAO9iB,KAAKoc,MAAMzB,MAAM2U,IAGvE,YAAAja,MAAP,SAAapD,EAAmC2C,GAAhD,WACI3C,EAAQU,OAER3S,KAAKiT,aAAahB,IACdjS,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAI7BnR,KAAKkrB,WACDlrB,KAAK4qB,qBACL3Y,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK4qB,mBAAqB5qB,KAAKqK,eAErE4H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,SAEpHV,KAAK6Z,cACZ5H,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK6Z,YAAc7Z,KAAKqK,eAE9D4H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,UAGvHV,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAGvBnR,KAAKwM,cACNxM,KAAKwM,YAAc,EAAQiL,eAAexF,EAAQkB,OAItD,IAAI+c,EAAelwB,KAAKyH,gBAAgBnF,KAAOtC,KAAK+qB,QAAQ5qB,gBAAgBH,KAAKuM,MAAOvM,KAAKyI,mBAAmBhI,OAC5GT,KAAK8b,QACL7J,EAAQmB,UAAYpT,KAAK8b,OAG7B,IAAI1D,EAAOpY,KAAKmwB,kBAAkBnwB,KAAKoc,OAElCpc,KAAKkrB,YAAelrB,KAAKoc,QAASpc,KAAK2qB,mBACxCvS,EAAOpY,KAAK2qB,iBAER3qB,KAAK8qB,oBACL7Y,EAAQmB,UAAYpT,KAAK8qB,oBAIjC9qB,KAAKowB,WAAane,EAAQ0M,YAAYvG,GAAM3X,MAC5C,IAAI4vB,EAAwF,EAA1ErwB,KAAK+qB,QAAQ5qB,gBAAgBH,KAAKuM,MAAOvM,KAAKyI,mBAAmBhI,OAC/ET,KAAKgrB,oBACLhrB,KAAKS,MAAQsC,KAAKC,IAAIhD,KAAKirB,UAAU9qB,gBAAgBH,KAAKuM,MAAOvM,KAAKyI,mBAAmBhI,OAAQT,KAAKowB,WAAaC,GAAe,MAGtI,IAAIrR,EAAQhf,KAAKwM,YAAY2M,QAAUnZ,KAAKyH,gBAAgB/G,OAASV,KAAKwM,YAAY9L,QAAU,EAC5F4vB,EAAiBtwB,KAAK8H,OAAO3H,gBAAgBH,KAAKuM,MAAOvM,KAAKyI,mBAAmBhI,OAAS4vB,EAO9F,GALApe,EAAQU,OACRV,EAAQ4C,YACR5C,EAAQpB,KAAKqf,EAAclwB,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,OAASV,KAAKwM,YAAY9L,QAAU,EAAG4vB,EAAiB,EAAGtwB,KAAKyH,gBAAgB/G,QAC5JuR,EAAQ+C,OAEJhV,KAAKkrB,YAAclrB,KAAKowB,WAAaE,EAAgB,CACrD,IAAIC,EAAWL,EAAelwB,KAAKowB,WAAaE,EAC3CtwB,KAAK+sB,cACN/sB,KAAK+sB,YAAcwD,QAGvBvwB,KAAK+sB,YAAcmD,EAMvB,GAHAje,EAAQ8L,SAAS3F,EAAMpY,KAAK+sB,YAAa/sB,KAAKyH,gBAAgBlF,IAAMyc,GAGhEhf,KAAKkrB,WAAY,CAGjB,GAAIlrB,KAAK2vB,mBAAoB,CACzB,IACIa,EADgBxwB,KAAK+sB,YAAc/sB,KAAKowB,WACCpwB,KAAK2vB,mBAC9Cc,EAAc,EAClBzwB,KAAKorB,cAAgB,EACrB,IAAIsF,EAAe,EACnB,GACQ1wB,KAAKorB,gBACLsF,EAAe3tB,KAAKyN,IAAIggB,EAAyBC,IAErDzwB,KAAKorB,gBACLqF,EAAcxe,EAAQ0M,YAAYvG,EAAK6W,OAAO7W,EAAKxW,OAAS5B,KAAKorB,cAAeprB,KAAKorB,gBAAgB3qB,YAEhGgwB,EAAcD,GAA2BpY,EAAKxW,QAAU5B,KAAKorB,eAGlEroB,KAAKyN,IAAIggB,EAAyBC,GAAeC,GACjD1wB,KAAKorB,gBAGTprB,KAAKmrB,cAAe,EACpBnrB,KAAK2vB,mBAAqB,KAI9B,IAAK3vB,KAAKmrB,aAAc,CACpB,IAAIwF,EAAmB3wB,KAAKoY,KAAK6W,OAAOjvB,KAAKoc,MAAMxa,OAAS5B,KAAKorB,eAC7DwF,EAAoB3e,EAAQ0M,YAAYgS,GAAkBlwB,MAC1DowB,EAAa7wB,KAAK+sB,YAAc/sB,KAAKowB,WAAaQ,EAElDC,EAAaX,GACblwB,KAAK+sB,aAAgBmD,EAAeW,EACpCA,EAAaX,EACblwB,KAAKoM,gBACEykB,EAAaX,EAAeI,IACnCtwB,KAAK+sB,aAAgBmD,EAAeI,EAAiBO,EACrDA,EAAaX,EAAeI,EAC5BtwB,KAAKoM,gBAEJpM,KAAKwrB,oBACNvZ,EAAQ+I,SAAS6V,EAAY7wB,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,OAASV,KAAKwM,YAAY9L,QAAU,EAAG,EAAGV,KAAKwM,YAAY9L,QAWjJ,GAPAssB,aAAahtB,KAAKitB,eAClBjtB,KAAKitB,cAAqB6D,YAAW,WACjC,EAAK3F,cAAgB,EAAKA,aAC1B,EAAK/e,iBACN,KAGCpM,KAAKwrB,mBAAoB,CACzBwB,aAAahtB,KAAKitB,eAClB,IAAI8D,EAA6B9e,EAAQ0M,YAAY3e,KAAKoY,KAAK4Y,UAAUhxB,KAAK4rB,uBAAuBnrB,MACjGwwB,EAAsBjxB,KAAK+sB,YAAc/sB,KAAKowB,WAAaW,EAC/D/wB,KAAK2rB,iBAAmB3rB,KAAKoY,KAAK4Y,UAAUhxB,KAAK4rB,qBAAsB5rB,KAAK6rB,oBAC5E,IAAIprB,EAAQwR,EAAQ0M,YAAY3e,KAAKoY,KAAK4Y,UAAUhxB,KAAK4rB,qBAAsB5rB,KAAK6rB,qBAAqBprB,MACrGwwB,EAAsBf,KACtBzvB,GAAiByvB,EAAee,KAI5BxwB,EAAQwR,EAAQ0M,YAAY3e,KAAKoY,KAAK8Y,OAAOlxB,KAAKoY,KAAKxW,OAAS5B,KAAKorB,gBAAgB3qB,OAEzFwwB,EAAsBf,GAG1Bje,EAAQqB,YAActT,KAAK0rB,mBAC3BzZ,EAAQmB,UAAYpT,KAAKyrB,oBACzBxZ,EAAQ+I,SAASiW,EAAqBjxB,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,OAASV,KAAKwM,YAAY9L,QAAU,EAAGD,EAAOT,KAAKwM,YAAY9L,QACtJuR,EAAQqB,YAAc,GAG9BrB,EAAQc,UAGJ/S,KAAK0b,aACD1b,KAAKkrB,WACDlrB,KAAKmxB,eACLlf,EAAQW,YAAc5S,KAAKmxB,cAG3BnxB,KAAK8b,QACL7J,EAAQW,YAAc5S,KAAK8b,OAInC7J,EAAQY,UAAY7S,KAAK0b,WAEzBzJ,EAAQe,WAAWhT,KAAKyH,gBAAgBnF,KAAOtC,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgBlF,IAAMvC,KAAK0b,WAAa,EAC7G1b,KAAKyH,gBAAgBhH,MAAQT,KAAK0b,WAAY1b,KAAKyH,gBAAgB/G,OAASV,KAAK0b,aAGzFzJ,EAAQc,WAGL,YAAAsD,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,QAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,KAI1DjE,KAAK2vB,mBAAqB1Z,EAAYvS,EACtC1D,KAAKwrB,oBAAqB,EAC1BxrB,KAAK2rB,iBAAmB,GACxB3rB,KAAK8rB,cAAgB,EACrB9rB,KAAKgsB,gBAAiB,EACtBhsB,KAAKuM,MAAM6kB,kBAAkBzb,GAAa3V,KACtCA,KAAKuM,MAAMohB,iBAAmB3tB,MAE9BgtB,aAAahtB,KAAKitB,eAClBjtB,KAAKoM,gBACE,KAENpM,KAAKoK,aAGVpK,KAAKuM,MAAMohB,eAAiB3tB,MAErB,KAEJ,YAAA+V,eAAP,SAAsBC,EAAiBC,EAAsBN,GACrD3V,KAAKuM,MAAMohB,iBAAmB3tB,MAAQA,KAAKgsB,iBAC3ChsB,KAAK2vB,mBAAqB1Z,EAAYvS,EACtC1D,KAAKoM,eACLpM,KAAKuvB,4BAA4BvvB,KAAKorB,gBAE1C,YAAMrV,eAAc,UAACC,EAAQC,EAAaN,IAGvC,YAAAW,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmB1R,EAAqBsS,GAE/FvW,KAAKgsB,gBAAiB,SACfhsB,KAAKuM,MAAM6kB,kBAAkBzb,GACpC,YAAMW,aAAY,UAACN,EAAQC,EAAaN,EAAW1R,EAAasS,IAG1D,YAAA4Z,kBAAV,SAA4B/X,GACxB,OAAOA,GAGJ,YAAAV,QAAP,WACI,YAAMA,QAAO,WAEb1X,KAAKqsB,iBAAiB1U,QACtB3X,KAAKosB,kBAAkBzU,QACvB3X,KAAK6c,wBAAwBlF,QAC7B3X,KAAKusB,qBAAqB5U,QAC1B3X,KAAKwsB,oBAAoB7U,QACzB3X,KAAKysB,sBAAsB9U,QAC3B3X,KAAKssB,0BAA0B3U,QAC/B3X,KAAK0sB,mCAAmC/U,SAEhD,EAv/BA,CAA+B,GAw/B/B,IAAW+B,gBAAgB,yBAA2B,EC5/BtD,kBAwUI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAvUX,EAAAgqB,gBAAkB,IAAIzhB,MACtB,EAAA0hB,mBAAqB,IAAI1hB,MACzB,EAAA2hB,OAAuC,GACvC,EAAAC,eAAiB,IAAI5hB,M,EA2djC,OA/d0B,iBAStB,sBAAW,0BAAW,C,IAAtB,WACI,OAAO5P,KAAKsxB,mBAAmB1vB,Q,gCAMnC,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO5B,KAAKqxB,gBAAgBzvB,Q,gCAIhC,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO5B,KAAKwxB,gB,gCAIhB,sBAAW,oBAAK,C,IAAhB,WACI,OAAOxxB,KAAKuxB,Q,gCAQT,YAAAE,iBAAP,SAAwB1hB,GACpB,OAAIA,EAAQ,GAAKA,GAAS/P,KAAKqxB,gBAAgBzvB,OACpC,KAGJ5B,KAAKqxB,gBAAgBthB,IAQzB,YAAA2hB,oBAAP,SAA2B3hB,GACvB,OAAIA,EAAQ,GAAKA,GAAS/P,KAAKsxB,mBAAmB1vB,OACvC,KAGJ5B,KAAKsxB,mBAAmBvhB,IAS5B,YAAA4hB,iBAAP,SAAwBjxB,EAAgBJ,GAKpC,YALoC,IAAAA,OAAA,GACpCN,KAAKqxB,gBAAgBlhB,KAAK,IAAIvQ,EAAac,EAAQJ,EAAUV,EAAaC,eAAiBD,EAAaM,sBAExGF,KAAKoM,eAEEpM,MASJ,YAAA4xB,oBAAP,SAA2BnxB,EAAeH,GAKtC,YALsC,IAAAA,OAAA,GACtCN,KAAKsxB,mBAAmBnhB,KAAK,IAAIvQ,EAAaa,EAAOH,EAAUV,EAAaC,eAAiBD,EAAaM,sBAE1GF,KAAKoM,eAEEpM,MAUJ,YAAA6xB,iBAAP,SAAwB9hB,EAAerP,EAAgBJ,GACnD,QADmD,IAAAA,OAAA,GAC/CyP,EAAQ,GAAKA,GAAS/P,KAAKqxB,gBAAgBzvB,OAC3C,OAAO5B,KAGX,IAAI8xB,EAAU9xB,KAAKqxB,gBAAgBthB,GACnC,OAAI+hB,GAAWA,EAAQxxB,UAAYA,GAAWwxB,EAAQxU,gBAAkB5c,IAIxEV,KAAKqxB,gBAAgBthB,GAAS,IAAInQ,EAAac,EAAQJ,EAAUV,EAAaC,eAAiBD,EAAaM,qBAE5GF,KAAKoM,gBALMpM,MAiBR,YAAA+xB,oBAAP,SAA2BhiB,EAAetP,EAAeH,GACrD,QADqD,IAAAA,OAAA,GACjDyP,EAAQ,GAAKA,GAAS/P,KAAKsxB,mBAAmB1vB,OAC9C,OAAO5B,KAGX,IAAI8xB,EAAU9xB,KAAKsxB,mBAAmBvhB,GACtC,OAAI+hB,GAAWA,EAAQxxB,UAAYA,GAAWwxB,EAAQxU,gBAAkB7c,IAIxET,KAAKsxB,mBAAmBvhB,GAAS,IAAInQ,EAAaa,EAAOH,EAAUV,EAAaC,eAAiBD,EAAaM,qBAE9GF,KAAKoM,gBALMpM,MAgBR,YAAAgyB,cAAP,SAAqBzL,EAAaD,GAC9B,IAAM2L,EAAOjyB,KAAKuxB,OAAUhL,EAAG,IAAID,GAEnC,OAAK2L,EAIEA,EAAK/X,SAHD,MAWR,YAAAgY,iBAAP,SAAwB9X,GACpB,OAAOA,EAAM+X,MAGT,YAAAC,YAAR,SAAoBH,EAAiBvb,GACjC,GAAKub,EAAL,CAIA,YAAMra,cAAa,UAACqa,GAEpB,IAAoB,UAAAA,EAAK/X,SAAL,eAAe,CAA9B,IAAIM,EAAO,KACR6X,EAAaryB,KAAKwxB,eAAevhB,QAAQuK,IAEzB,IAAhB6X,GACAryB,KAAKwxB,eAAethB,OAAOmiB,EAAY,UAIxCryB,KAAKuxB,OAAO7a,KAGf,YAAA4b,YAAR,SAAoBC,EAAqB7b,GACrC,GAAK1W,KAAKuxB,OAAO7a,GAAjB,CAIA1W,KAAKuxB,OAAOgB,GAAevyB,KAAKuxB,OAAO7a,GAEvC,IAAoB,UAAA1W,KAAKuxB,OAAOgB,GAAarY,SAAzB,eAAmC,CAAvC,KACJiY,KAAOI,SAGZvyB,KAAKuxB,OAAO7a,KAQhB,YAAA8b,uBAAP,SAA8BziB,GAC1B,GAAIA,EAAQ,GAAKA,GAAS/P,KAAKsxB,mBAAmB1vB,OAC9C,OAAO5B,KAGX,IAAK,IAAI0D,EAAI,EAAGA,EAAI1D,KAAKqxB,gBAAgBzvB,OAAQ8B,IAAK,CAClD,IAAIgT,EAAShT,EAAC,IAAIqM,EACdkiB,EAAOjyB,KAAKuxB,OAAO7a,GAEvB1W,KAAKoyB,YAAYH,EAAMvb,GAG3B,IAAShT,EAAI,EAAGA,EAAI1D,KAAKqxB,gBAAgBzvB,OAAQ8B,IAC7C,IAAK,IAAIC,EAAIoM,EAAQ,EAAGpM,EAAI3D,KAAKsxB,mBAAmB1vB,OAAQ+B,IAAK,CAC7D,IAAI4uB,EAAiB7uB,EAAC,KAAIC,EAAI,GAC1B+S,EAAShT,EAAC,IAAIC,EAElB3D,KAAKsyB,YAAYC,EAAa7b,GAQtC,OAJA1W,KAAKsxB,mBAAmBphB,OAAOH,EAAO,GAEtC/P,KAAKoM,eAEEpM,MAQJ,YAAAyyB,oBAAP,SAA2B1iB,GACvB,GAAIA,EAAQ,GAAKA,GAAS/P,KAAKqxB,gBAAgBzvB,OAC3C,OAAO5B,KAGX,IAAK,IAAI2D,EAAI,EAAGA,EAAI3D,KAAKsxB,mBAAmB1vB,OAAQ+B,IAAK,CACrD,IAAI+S,EAAS3G,EAAK,IAAIpM,EAClBsuB,EAAOjyB,KAAKuxB,OAAO7a,GAEvB1W,KAAKoyB,YAAYH,EAAMvb,GAG3B,IAAS/S,EAAI,EAAGA,EAAI3D,KAAKsxB,mBAAmB1vB,OAAQ+B,IAChD,IAAK,IAAID,EAAIqM,EAAQ,EAAGrM,EAAI1D,KAAKqxB,gBAAgBzvB,OAAQ8B,IAAK,CAC1D,IAAI6uB,EAAiB7uB,EAAI,EAAC,IAAIC,EAC1B+S,EAAShT,EAAC,IAAIC,EAElB3D,KAAKsyB,YAAYC,EAAa7b,GAQtC,OAJA1W,KAAKqxB,gBAAgBnhB,OAAOH,EAAO,GAEnC/P,KAAKoM,eAEEpM,MAUJ,YAAAya,WAAP,SAAkBD,EAAkB+L,EAAiBD,GAWjD,QAXgC,IAAAC,MAAA,QAAiB,IAAAD,MAAA,GACb,IAAhCtmB,KAAKqxB,gBAAgBzvB,QAErB5B,KAAK2xB,iBAAiB,GAAG,GAGU,IAAnC3xB,KAAKsxB,mBAAmB1vB,QAExB5B,KAAK4xB,oBAAoB,GAAG,IAGc,IAA1C5xB,KAAKwxB,eAAevhB,QAAQuK,GAE5B,OADA,IAAM+O,KAAK,iBAAiB/O,EAAQnT,KAAI,cAAcmT,EAAQ1I,SAAQ,oFAC/D9R,KAGX,IAEI0W,EAFI3T,KAAKC,IAAIujB,EAAKvmB,KAAKqxB,gBAAgBzvB,OAAS,GAEtC,IADNmB,KAAKC,IAAIsjB,EAAQtmB,KAAKsxB,mBAAmB1vB,OAAS,GAEtD8wB,EAAgB1yB,KAAKuxB,OAAO7a,GAiBhC,OAfKgc,IACDA,EAAgB,IAAI,EAAUhc,GAC9B1W,KAAKuxB,OAAO7a,GAAOgc,EACnBA,EAAchkB,oBAAsB,EAAQC,0BAC5C+jB,EAAc9jB,kBAAoB,EAAQC,uBAC1C,YAAM4L,WAAU,UAACiY,IAGrBA,EAAcjY,WAAWD,GACzBxa,KAAKwxB,eAAerhB,KAAKqK,GACzBA,EAAQ2X,KAAOzb,EACf8D,EAAQnN,OAASrN,KAEjBA,KAAKoM,eAEEpM,MAQJ,YAAA4X,cAAP,SAAqB4C,GACjB,IAAIzK,EAAQ/P,KAAKwxB,eAAevhB,QAAQuK,IAEzB,IAAXzK,GACA/P,KAAKwxB,eAAethB,OAAOH,EAAO,GAGtC,IAAIkiB,EAAOjyB,KAAKuxB,OAAO/W,EAAQ2X,MAQ/B,OANIF,IACAA,EAAKra,cAAc4C,GACnBA,EAAQ2X,KAAO,MAGnBnyB,KAAKoM,eACEpM,MAWD,YAAAqM,aAAV,WACI,MAAO,QAGD,YAAAsmB,oBAAV,SAA8BC,GAa1B,IAZA,IAAIC,EAAS,GACTC,EAAU,GACVC,EAAQ,GACRC,EAAO,GAEP1C,EAAiBtwB,KAAKyH,gBAAgBhH,MACtCwyB,EAAwB,EACxBC,EAAkBlzB,KAAKyH,gBAAgB/G,OACvCyyB,EAAyB,EAGzBpjB,EAAQ,EACM,MAAA/P,KAAKqxB,gBAAL,eAAsB,CACpC,IADK5xB,EAAK,MACAa,QAEN4yB,GADIxyB,EAASjB,EAAMc,SAASP,KAAKuM,OAEjCumB,EAAQ/iB,GAASrP,OAEjByyB,GAA0B1zB,EAAM6d,cAEpCvN,IAGJ,IAAIxN,EAAM,EACVwN,EAAQ,EACR,IAAkB,UAAA/P,KAAKqxB,gBAAL,eAAsB,CAAnC,IAIO3wB,EAJHjB,EAAK,KAGV,GAFAuzB,EAAK7iB,KAAK5N,GAEL9C,EAAMa,QAKPiC,GAAO9C,EAAMc,SAASP,KAAKuM,YAH3BhK,GADI7B,EAAUjB,EAAM6d,cAAgB6V,EAA0BD,EAE9DJ,EAAQ/iB,GAASrP,EAIrBqP,IAIJA,EAAQ,EACR,IAAkB,UAAA/P,KAAKsxB,mBAAL,eAAyB,CACvC,IADK7xB,EAAK,MACAa,QAENgwB,GADI7vB,EAAQhB,EAAMc,SAASP,KAAKuM,OAEhCsmB,EAAO9iB,GAAStP,OAEhBwyB,GAAyBxzB,EAAM6d,cAEnCvN,IAGJ,IAAIzN,EAAO,EACXyN,EAAQ,EACR,IAAkB,UAAA/P,KAAKsxB,mBAAL,eAAyB,CAAtC,IAGO7wB,EAHHhB,EAAK,KAEV,GADAszB,EAAM5iB,KAAK7N,GACN7C,EAAMa,QAKPgC,GAAQ7C,EAAMc,SAASP,KAAKuM,YAH5BjK,GADI7B,EAAShB,EAAM6d,cAAgB2V,EAAyB3C,EAE5DuC,EAAO9iB,GAAStP,EAIpBsP,IAGJ6iB,EAAmBG,EAAOC,EAAMH,EAAQC,IAGlC,YAAA3e,sBAAV,SAAgCV,EAAwBxB,GAAxD,WACIjS,KAAK2yB,qBAAoB,SAACI,EAAiBC,EAAgBH,EAAkBC,GAEzE,IAAK,IAAIpc,KAAO,EAAK6a,OACjB,GAAK,EAAKA,OAAO6B,eAAe1c,GAAhC,CAGA,IAAI0H,EAAQ1H,EAAI0H,MAAM,KAClB1a,EAAI2vB,SAASjV,EAAM,IACnBza,EAAI0vB,SAASjV,EAAM,IACnB6T,EAAO,EAAKV,OAAO7a,GAEvBub,EAAK3vB,KAAOywB,EAAMpvB,GAAK,KACvBsuB,EAAK1vB,IAAMywB,EAAKtvB,GAAK,KACrBuuB,EAAKxxB,MAAQoyB,EAAOlvB,GAAK,KACzBsuB,EAAKvxB,OAASoyB,EAAQpvB,GAAK,KAC3BuuB,EAAKjpB,MAAMjJ,uBAAwB,EACnCkyB,EAAKhpB,KAAKlJ,uBAAwB,EAClCkyB,EAAKnqB,OAAO/H,uBAAwB,EACpCkyB,EAAKlqB,QAAQhI,uBAAwB,MAI7C,YAAMoU,sBAAqB,UAACV,EAAexB,IAGxC,YAAAtB,8BAAP,WACI,IAAK,IAAI+F,KAAO1W,KAAKuxB,OAAQ,CACzB,GAAKvxB,KAAKuxB,OAAO6B,eAAe1c,GAIpB1W,KAAKuxB,OAAO7a,GAClBhK,uBAIP,YAAAoG,yBAAP,SAAgCb,GAAhC,WACI,YAAMa,yBAAwB,UAACb,GAE/BjS,KAAK2yB,qBAAoB,SAACI,EAAiBC,EAAgBH,EAAkBC,GAGzE,IAAK,IAAI/iB,EAAQ,EAAGA,EAAQgjB,EAAMnxB,OAAQmO,IAAS,CAC/C,IAAMzN,EAAO,EAAKmF,gBAAgBnF,KAAOywB,EAAMhjB,GAAS8iB,EAAO9iB,GAC/DkC,EAAQ4C,YACR5C,EAAQgK,OAAO3Z,EAAM,EAAKmF,gBAAgBlF,KAC1C0P,EAAQiK,OAAO5Z,EAAM,EAAKmF,gBAAgBlF,IAAM,EAAKkF,gBAAgB/G,QACrEuR,EAAQ8J,SAIZ,IAAShM,EAAQ,EAAGA,EAAQijB,EAAKpxB,OAAQmO,IAAS,CAC9C,IAAM,EAAM,EAAKtI,gBAAgBlF,IAAMywB,EAAKjjB,GAAS+iB,EAAQ/iB,GAC7DkC,EAAQ4C,YACR5C,EAAQgK,OAAO,EAAKxU,gBAAgBnF,KAAM,GAC1C2P,EAAQiK,OAAO,EAAKzU,gBAAgBnF,KAAO,EAAKmF,gBAAgBhH,MAAO,GACvEwR,EAAQ8J,aAIhB9J,EAAQc,WAIL,YAAA2E,QAAP,WACI,YAAMA,QAAO,WAEb,IAAoB,UAAA1X,KAAKwxB,eAAL,eAAqB,CAAzB,KACJ9Z,UAGZ1X,KAAKwxB,eAAiB,IAE9B,EA/dA,CAA0B,GAge1B,IAAW9X,gBAAgB,oBAAsB,E,WC7djD,cA4HI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAxHX,EAAAvH,OAAiB,IAAOwzB,MACxB,EAAAC,UAAY,IAAI,IAEhB,EAAAC,yBAA0B,EAC1B,EAAAC,wBAAyB,EAEzB,EAAAC,YAAc,EACd,EAAAC,WAAa,EACb,EAAAC,YAAc,EAEd,EAAAC,GAAK,IACL,EAAAC,GAAK,EACL,EAAAC,GAAK,EAEL,EAAAC,oBAAsB,EAKvB,EAAAC,yBAA2B,IAAI,IA6R9B,EAAAC,gBAAiB,EAtLrB,EAAKz0B,MAAQ,IAAI,IAAO,IAAK,GAAI,IACjC,EAAK00B,KAAO,QACZ,EAAKtpB,kBAAmB,E,EA61ChC,OA79CiC,iBA0B7B,sBAAW,oBAAK,C,IAAhB,WACI,OAAO7K,KAAKF,Q,IAGhB,SAAiBL,GACTO,KAAKF,OAAOs0B,OAAO30B,KAIvBO,KAAKF,OAAO0C,SAAS/C,GAErBO,KAAKF,OAAOu0B,WAAWr0B,KAAKuzB,WAE5BvzB,KAAK6zB,GAAK7zB,KAAKuzB,UAAUe,EACzBt0B,KAAK8zB,GAAK/wB,KAAKG,IAAIlD,KAAKuzB,UAAUgB,EAAG,MACrCv0B,KAAK+zB,GAAKhxB,KAAKG,IAAIlD,KAAKuzB,UAAU1wB,EAAG,MAErC7C,KAAKoM,eAEDpM,KAAKF,OAAOw0B,GAAKE,EAAYC,WAC7Bz0B,KAAKF,OAAOw0B,EAAI,GAGhBt0B,KAAKF,OAAOy0B,GAAKC,EAAYC,WAC7Bz0B,KAAKF,OAAOy0B,EAAI,GAGhBv0B,KAAKF,OAAO+C,GAAK2xB,EAAYC,WAC7Bz0B,KAAKF,OAAO+C,EAAI,GAGhB7C,KAAKF,OAAOw0B,GAAK,EAAME,EAAYC,WACnCz0B,KAAKF,OAAOw0B,EAAI,GAGhBt0B,KAAKF,OAAOy0B,GAAK,EAAMC,EAAYC,WACnCz0B,KAAKF,OAAOy0B,EAAI,GAGhBv0B,KAAKF,OAAO+C,GAAK,EAAM2xB,EAAYC,WACnCz0B,KAAKF,OAAO+C,EAAI,GAGpB7C,KAAKi0B,yBAAyB5f,gBAAgBrU,KAAKF,U,gCAOvD,sBAAW,oBAAK,C,IAAhB,WACI,OAAOE,KAAK8H,OAAO5G,SAASlB,KAAKuM,Q,IAGrC,SAAiB9M,GACTO,KAAK8H,OAAO5G,SAASlB,KAAKuM,SAAW9M,GAIrCO,KAAK8H,OAAOvG,WAAW9B,KACvBO,KAAK+H,QAAQxG,WAAW9B,GACxBO,KAAKoM,iB,gCAQb,sBAAW,qBAAM,C,IAAjB,WACI,OAAOpM,KAAK+H,QAAQ7G,SAASlB,KAAKuM,Q,IAItC,SAAkB9M,GACVO,KAAK+H,QAAQ7G,SAASlB,KAAKuM,SAAW9M,GAItCO,KAAK+H,QAAQxG,WAAW9B,KACxBO,KAAK8H,OAAOvG,WAAW9B,GACvBO,KAAKoM,iB,gCAKb,sBAAW,mBAAI,C,IAAf,WACI,OAAOpM,KAAKS,O,IAGhB,SAAgBhB,GACZO,KAAKS,MAAQhB,G,gCAcP,YAAA4M,aAAV,WACI,MAAO,eAID,YAAA2H,YAAV,SAAsBP,EAAwBxB,GAEtCwB,EAAchT,MAAQgT,EAAc/S,OACpCV,KAAKyH,gBAAgB/G,OAAS+S,EAAchT,MAE5CT,KAAKyH,gBAAgBhH,MAAQgT,EAAc/S,QAI3C,YAAAg0B,mBAAR,WACI,IAAI1Y,EAA6E,GAApEjZ,KAAKC,IAAIhD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QAGnEi0B,EAD4C,GAA3B3Y,EADS,GAATA,GAEajZ,KAAK6xB,KAAK,GACxCnoB,EAASuP,EAAsB,GAAb2Y,EAEtB30B,KAAK0zB,YAAc1zB,KAAKyH,gBAAgBnF,KAAOmK,EAC/CzM,KAAK2zB,WAAa3zB,KAAKyH,gBAAgBlF,IAAMkK,EAC7CzM,KAAK4zB,YAAce,GAGf,YAAAE,oBAAR,SAA4BC,EAAkBxyB,EAAcC,EAAa9B,EAAeC,EAAgBuR,GACpG,IAAI8iB,EAAM9iB,EAAQ+iB,qBAAqB1yB,EAAMC,EAAK9B,EAAQ6B,EAAMC,GAChEwyB,EAAIE,aAAa,EAAG,QACpBF,EAAIE,aAAa,EAAG,OAASH,EAAW,gBAExC7iB,EAAQmB,UAAY2hB,EACpB9iB,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,GAEnC,IAAIw0B,EAAMjjB,EAAQ+iB,qBAAqB1yB,EAAMC,EAAKD,EAAM5B,EAAS6B,GACjE2yB,EAAID,aAAa,EAAG,iBACpBC,EAAID,aAAa,EAAG,QAEpBhjB,EAAQmB,UAAY8hB,EACpBjjB,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,IAG/B,YAAAy0B,YAAR,SAAoBvO,EAAiBC,EAAiB7K,EAAgB/J,GAClEA,EAAQ4C,YACR5C,EAAQqH,IAAIsN,EAASC,EAAS7K,EAAS,EAAG,EAAG,EAAIjZ,KAAKwW,IAAI,GAC1DtH,EAAQY,UAAY,EACpBZ,EAAQW,YAAc,UACtBX,EAAQ8J,SACR9J,EAAQ4C,YACR5C,EAAQqH,IAAIsN,EAASC,EAAS7K,EAAQ,EAAG,EAAIjZ,KAAKwW,IAAI,GACtDtH,EAAQY,UAAY,EACpBZ,EAAQW,YAAc,UACtBX,EAAQ8J,UAGJ,YAAAqZ,wBAAR,SAAgCpZ,EAAgB2L,GAC5C,IAAI3G,EAAS3I,SAASC,cAAc,UACpC0I,EAAOvgB,MAAiB,EAATub,EACfgF,EAAOtgB,OAAkB,EAATsb,EAUhB,IATA,IAAI/J,EAAoC+O,EAAO7B,WAAW,MACtDkW,EAAQpjB,EAAQqD,aAAa,EAAG,EAAY,EAAT0G,EAAqB,EAATA,GAC/C8G,EAAOuS,EAAMvS,KAEbhH,EAAQ9b,KAAKuzB,UACb+B,EAAYtZ,EAASA,EACrBuZ,EAAcvZ,EAAS2L,EACvB6N,EAAYD,EAAcA,EAErB7xB,GAAKsY,EAAQtY,EAAIsY,EAAQtY,IAC9B,IAAK,IAAIC,GAAKqY,EAAQrY,EAAIqY,EAAQrY,IAAK,CAEnC,IAAI8xB,EAAS/xB,EAAIA,EAAIC,EAAIA,EAEzB,KAAI8xB,EAASH,GAAaG,EAASD,GAAnC,CAIA,IAAIE,EAAO3yB,KAAK6xB,KAAKa,GACjBE,EAAM5yB,KAAK6yB,MAAMjyB,EAAGD,GAExB,IAAOmyB,cAAoB,IAANF,EAAY5yB,KAAKwW,GAAK,IAAKmc,EAAO1Z,EAAQ,EAAGF,GAElE,IAAI/L,EAAuD,GAA7CrM,EAAIsY,EAA0B,GAAdrY,EAAIqY,GAAcA,GAEhD8G,EAAK/S,GAAmB,IAAV+L,EAAMwY,EACpBxR,EAAK/S,EAAQ,GAAe,IAAV+L,EAAMyY,EACxBzR,EAAK/S,EAAQ,GAAe,IAAV+L,EAAMjZ,EACxB,IAGIizB,EAAc,GAOdA,EADA9Z,EAHc,GAFH,GAOJA,EAJO,IAFH,KASG,KAAyBA,EARzB,IAQA,IAVH,GAaf,IAAI+Z,GAAcL,EAAOH,IAAgBvZ,EAASuZ,GAG9CzS,EAAK/S,EAAQ,GADbgmB,EAAaD,EACYC,EAAaD,EAApB,IACXC,EAAa,EAAID,EACN,KAAO,GAAQC,GAAc,EAAID,IAAgBA,GAEjD,KAQ9B,OAFA7jB,EAAQmD,aAAaigB,EAAO,EAAG,GAExBrU,GAIJ,YAAA3L,MAAP,SAAapD,GACTA,EAAQU,OAER3S,KAAKiT,aAAahB,GAElB,IAAI+J,EAA6E,GAApEjZ,KAAKC,IAAIhD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QACnEs1B,EAA0B,GAATha,EACjB1Z,EAAOtC,KAAKyH,gBAAgBnF,KAC5BC,EAAMvC,KAAKyH,gBAAgBlF,IAE1BvC,KAAKi2B,mBAAqBj2B,KAAKi2B,kBAAkBx1B,OAAkB,EAATub,IAC3Dhc,KAAKi2B,kBAAoBj2B,KAAKo1B,wBAAwBpZ,EAAQga,IAGlEh2B,KAAK00B,sBAED10B,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,cAE7Bc,EAAQ+I,SAAShb,KAAK0zB,YAAa1zB,KAAK2zB,WAAY3zB,KAAK4zB,YAAa5zB,KAAK4zB,cAG/E3hB,EAAQiP,UAAUlhB,KAAKi2B,kBAAmB3zB,EAAMC,IAE5CvC,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAG5BnR,KAAK60B,oBAAoB70B,KAAK6zB,GAC1B7zB,KAAK0zB,YACL1zB,KAAK2zB,WACL3zB,KAAK4zB,YACL5zB,KAAK4zB,YACL3hB,GAEJ,IAAIikB,EAAKl2B,KAAK0zB,YAAc1zB,KAAK4zB,YAAc5zB,KAAK8zB,GAChDqC,EAAKn2B,KAAK2zB,WAAa3zB,KAAK4zB,aAAe,EAAI5zB,KAAK+zB,IAExD/zB,KAAKm1B,YAAYe,EAAIC,EAAa,IAATna,EAAc/J,GAEvC,IAAIyjB,EAAO1Z,EAA0B,GAAjBga,EACpBE,EAAK5zB,EAAO0Z,EAASjZ,KAAKwD,KAAKvG,KAAK6zB,GAAK,KAAO9wB,KAAKwW,GAAK,KAAOmc,EACjES,EAAK5zB,EAAMyZ,EAASjZ,KAAKsD,KAAKrG,KAAK6zB,GAAK,KAAO9wB,KAAKwW,GAAK,KAAOmc,EAChE11B,KAAKm1B,YAAYe,EAAIC,EAAqB,IAAjBH,EAAsB/jB,GAE/CA,EAAQc,WAMJ,YAAAqjB,wBAAR,SAAgC1yB,EAAWC,GACvC,GAAI3D,KAAKyzB,uBAAwB,CAC7B,IAAIzX,EAA6E,GAApEjZ,KAAKC,IAAIhD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QACnEkmB,EAAU5K,EAAShc,KAAKyH,gBAAgBnF,KACxCukB,EAAU7K,EAAShc,KAAKyH,gBAAgBlF,IAC5CvC,KAAK6zB,GAA4C,IAAvC9wB,KAAK6yB,MAAMjyB,EAAIkjB,EAASnjB,EAAIkjB,GAAiB7jB,KAAKwW,GAAK,SAE5DvZ,KAAKwzB,0BACVxzB,KAAK00B,qBACL10B,KAAK8zB,IAAMpwB,EAAI1D,KAAK0zB,aAAe1zB,KAAK4zB,YACxC5zB,KAAK+zB,GAAK,GAAKpwB,EAAI3D,KAAK2zB,YAAc3zB,KAAK4zB,YAC3C5zB,KAAK8zB,GAAK/wB,KAAKC,IAAIhD,KAAK8zB,GAAI,GAC5B9zB,KAAK8zB,GAAK/wB,KAAKG,IAAIlD,KAAK8zB,GAAIU,EAAYC,UACxCz0B,KAAK+zB,GAAKhxB,KAAKC,IAAIhD,KAAK+zB,GAAI,GAC5B/zB,KAAK+zB,GAAKhxB,KAAKG,IAAIlD,KAAK+zB,GAAIS,EAAYC,WAG5C,IAAOoB,cAAc71B,KAAK6zB,GAAI7zB,KAAK8zB,GAAI9zB,KAAK+zB,GAAI/zB,KAAKuzB,WAErDvzB,KAAKP,MAAQO,KAAKuzB,WAGd,YAAA8C,iBAAR,SAAyB3yB,EAAWC,GAChC3D,KAAK00B,qBAEL,IAAIpyB,EAAOtC,KAAK0zB,YACZnxB,EAAMvC,KAAK2zB,WACXQ,EAAOn0B,KAAK4zB,YAEhB,OAAIlwB,GAAKpB,GAAQoB,GAAKpB,EAAO6xB,GACzBxwB,GAAKpB,GAAOoB,GAAKpB,EAAM4xB,GAOvB,YAAAmC,gBAAR,SAAwB5yB,EAAWC,GAC/B,IAAIqY,EAA6E,GAApEjZ,KAAKC,IAAIhD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QAInE60B,EAAcvZ,EADY,GAATA,EAKjBua,EAAK7yB,GAPKsY,EAAShc,KAAKyH,gBAAgBnF,MAQxCk0B,EAAK7yB,GAPKqY,EAAShc,KAAKyH,gBAAgBlF,KASxCkzB,EAASc,EAAKA,EAAKC,EAAKA,EAE5B,OAAIf,GARWzZ,EAASA,GAQEyZ,GAPNF,EAAcA,GAc/B,YAAAlf,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,IAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,GACtD,OAAO,EAGXjE,KAAKk0B,gBAAiB,EAEtBl0B,KAAKwzB,yBAA0B,EAC/BxzB,KAAKyzB,wBAAyB,EAG9BzzB,KAAKwJ,uBAAuB/F,qBAAqBwS,EAAYvS,EAAGuS,EAAYtS,EAAG3D,KAAKyJ,sBAEpF,IAAI/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,EAWlC,OATI3D,KAAKq2B,iBAAiB3yB,EAAGC,GACzB3D,KAAKwzB,yBAA0B,EACxBxzB,KAAKs2B,gBAAgB5yB,EAAGC,KAC/B3D,KAAKyzB,wBAAyB,GAGlCzzB,KAAKo2B,wBAAwB1yB,EAAGC,GAChC3D,KAAKuM,MAAM6kB,kBAAkBzb,GAAa3V,KAC1CA,KAAKg0B,mBAAqBre,GACnB,GAGJ,YAAAI,eAAP,SAAsBC,EAAiBC,EAAsBN,GAEzD,GAAIA,GAAa3V,KAAKg0B,mBAAtB,CAIAh0B,KAAKwJ,uBAAuB/F,qBAAqBwS,EAAYvS,EAAGuS,EAAYtS,EAAG3D,KAAKyJ,sBAEpF,IAAI/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,EAE9B3D,KAAKk0B,gBACLl0B,KAAKo2B,wBAAwB1yB,EAAGC,GAGpC,YAAMoS,eAAc,UAACC,EAAQC,EAAaN,KAGvC,YAAAW,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmB1R,EAAqBsS,GAC/FvW,KAAKk0B,gBAAiB,SAEfl0B,KAAKuM,MAAM6kB,kBAAkBzb,GACpC,YAAMW,aAAY,UAACN,EAAQC,EAAaN,EAAW1R,EAAasS,IAWtD,EAAAkgB,sBAAd,SAAoCC,EAChCC,GAcA,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzBH,EAAQI,YAAcJ,EAAQI,aAAe,QAC7CJ,EAAQK,aAAeL,EAAQK,cAAgB,QAC/CL,EAAQM,aAAeN,EAAQM,cAAgB,OAC/CN,EAAQO,UAAYP,EAAQO,WAAa,UACzCP,EAAQQ,YAAcR,EAAQQ,aAAe,GAC7CR,EAAQS,mBAAqBT,EAAQS,oBAAsB,GAG3D,IAoBIC,EAGAC,EACAC,EACAC,EACAC,EAQAC,EAGAC,EAGAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAtDAC,EAAwB7B,EAAQQ,YAAcR,EAAQS,mBACtDqB,EAAwB32B,WAAmB60B,EAAQI,aAAeJ,EAAQS,mBAC1EsB,EAAqB31B,KAAKa,MAAsB,IAAhB60B,GAChCE,EAAqBD,GAAc/B,EAAQS,mBAAqB,GAChEwB,EAAqB71B,KAAKa,OAAO9B,WAAmB60B,EAAQI,aAAe4B,GAAchC,EAAQS,oBACjGyB,EAAyBD,EAAaJ,EAAkBE,GAAcF,EAAgB,GACtFM,GAAyBzF,SAASsD,EAAQK,cAAgB6B,EAAgB91B,KAAKa,MAAmB,IAAbg1B,IAAoB13B,WAAa,KAUtH63B,EAA8B,IAAOC,cAAc,WACnDC,EAAyBF,EAAoBzE,EAAIyE,EAAoBxE,EAAIwE,EAAoBl2B,EAY7Fq2B,EAA6B,CAAC,IAAK,IAAK,KAYxCC,GAA0B,EAoB9B,SAASC,EAAa35B,EAAe45B,GACjCd,EAAcc,EACd,IAAIC,EAAsB75B,EAAM85B,cAoBhC,GAnBAlB,EAAUmB,WAAaF,EACnBxB,EAAQzwB,MAAQkxB,IAChBT,EAAQ1f,KAAOrV,KAAKa,MAAgB,IAAVnE,EAAM60B,GAASpzB,YAEzC62B,EAAQ1wB,MAAQkxB,IAChBR,EAAQ3f,KAAOrV,KAAKa,MAAgB,IAAVnE,EAAM80B,GAASrzB,YAEzC82B,EAAQ3wB,MAAQkxB,IAChBP,EAAQ5f,KAAOrV,KAAKa,MAAgB,IAAVnE,EAAMoD,GAAS3B,YAEzC+2B,EAAQ5wB,MAAQkxB,IAChBN,EAAQ7f,KAAO3Y,EAAM60B,EAAEpzB,YAEvBg3B,EAAQ7wB,MAAQkxB,IAChBL,EAAQ9f,KAAO3Y,EAAM80B,EAAErzB,YAEvBi3B,EAAQ9wB,MAAQkxB,IAChBJ,EAAQ/f,KAAO3Y,EAAMoD,EAAE3B,YAEvBk3B,EAAO/wB,MAAQkxB,EAAa,CAC5B,IAAIkB,EAAuBH,EAAYlb,MAAM,KAC7Cga,EAAOhgB,KAAOqhB,EAAW,GAEzB5B,EAAOxwB,MAAQkxB,IACfV,EAAOp4B,MAAQA,GAKvB,SAASi6B,EAAUC,EAAkBC,GACjC,IAAIC,EAAmBF,EAAMvhB,KAE7B,GADwB,UAAU0hB,KAAKD,GAEnCF,EAAMvhB,KAAOkgB,OAmBjB,GAfoB,IAAZuB,IACI92B,KAAKa,MAAMyvB,SAASwG,IAAa,EACjCA,EAAW,IAEN92B,KAAKa,MAAMyvB,SAASwG,IAAa,IACtCA,EAAW,MAENltB,MAAM0mB,SAASwG,MACpBA,EAAW,MAGftB,GAAeoB,EAAMtyB,OACrBixB,EAAUuB,GAGF,IAAZA,EAAgB,CAChBA,EAAWxG,SAASwG,GAAU34B,WAC9By4B,EAAMvhB,KAAOyhB,EACb,IAAIE,EAAuB,IAAOf,cAAcX,EAAUmB,YACtDjB,GAAeoB,EAAMtyB,MAEjB+xB,EADW,KAAXQ,EACa,IAAI,IAAQvG,SAASwG,GAAa,IAAKE,EAAaxF,EAAGwF,EAAal3B,GAEjE,KAAX+2B,EACQ,IAAI,IAAOG,EAAazF,EAAIjB,SAASwG,GAAa,IAAKE,EAAal3B,GAGpE,IAAI,IAAOk3B,EAAazF,EAAGyF,EAAaxF,EAAIlB,SAASwG,GAAa,KANMF,EAAMtyB,OAa3G,SAAS2yB,EAAYL,EAAkBC,GACnC,IAAIC,EAAmBF,EAAMvhB,KAE7B,GADwB,YAAY0hB,KAAKD,GAErCF,EAAMvhB,KAAOkgB,MADjB,CAKoB,IAAZuB,GAA8B,KAAZA,GAA2C,GAAxB/3B,WAAW+3B,KAC5C/3B,WAAW+3B,GAAY,EACvBA,EAAW,MAEN/3B,WAAW+3B,GAAY,EAC5BA,EAAW,MAENltB,MAAM7K,WAAW+3B,MACtBA,EAAW,QAGftB,GAAeoB,EAAMtyB,OACrBixB,EAAUuB,GAGF,IAAZA,GAA8B,KAAZA,GAA2C,GAAxB/3B,WAAW+3B,IAChDA,EAAW/3B,WAAW+3B,GAAU34B,WAChCy4B,EAAMvhB,KAAOyhB,GAGbA,EAAW,MAEf,IAAIE,EAAe,IAAOf,cAAcX,EAAUmB,YAC9CjB,GAAeoB,EAAMtyB,MAEjB+xB,EADW,KAAXQ,EACa,IAAI,IAAO93B,WAAW+3B,GAAWE,EAAaxF,EAAGwF,EAAal3B,GAE3D,KAAX+2B,EACQ,IAAI,IAAOG,EAAazF,EAAGxyB,WAAW+3B,GAAWE,EAAal3B,GAG9D,IAAI,IAAOk3B,EAAazF,EAAGyF,EAAaxF,EAAGzyB,WAAW+3B,IANYF,EAAMtyB,OAwBjG,SAAS4yB,IACL,GAAItD,EAAQuD,aAAevD,EAAQuD,YAAYvC,GAAe,CAC1D,GAAIwB,EACA,IAAIgB,EAAe,SAGfA,EAAe,GAEvB,IAAIC,EAAiB,EAAOvR,mBAAmB,UAAY8O,EAAcwC,GACzEC,EAAO5iB,WAAa,kBACpB,IAAI6iB,EAAsB,IAAOrB,cAAcrC,EAAQuD,YAAYvC,IAC/D2C,EAA0BD,EAAY/F,EAAI+F,EAAY9F,EAAI8F,EAAYx3B,EAItEu3B,EAAOte,MADPwe,EAAkBrB,EA5LF,UACC,UAiMrBmB,EAAOjtB,SAAWpK,KAAKa,MAAmB,GAAbg1B,GAC7BwB,EAAO7R,UAAW3Z,kBAAoB,EAAQtG,0BAC9C8xB,EAAO15B,OAAS05B,EAAO35B,MAASm4B,EAAY13B,WAAa,KACzDk5B,EAAOZ,WAAa7C,EAAQuD,YAAYvC,GACxCyC,EAAOzS,UAAY,EACnB,IAAI,EAAWgQ,EAwBf,OAvBAyC,EAAOrS,qBAAuB,WAC1BqS,EAAOzS,UAAY,GAEvByS,EAAOpS,mBAAqB,WACxBoS,EAAOzS,UAAY,GAEvByS,EAAOvS,sBAAwB,WAC3BuS,EAAOzS,UAAY,GAEvByS,EAAOtS,oBAAsB,WACzBsS,EAAOzS,UAAY,GAEvByS,EAAOtuB,yBAAyBkB,KAAI,WAjD5C,IAAsB+C,EAkDLopB,GAlDKppB,EAwDO,EAvDrB4mB,EAAQuD,aACRvD,EAAQuD,YAAYhqB,OAAOH,EAAO,GAElC4mB,EAAQuD,aAA6C,GAA9BvD,EAAQuD,YAAYt4B,SAC3C24B,GAAwB,GACxBpB,GAAiB,GAmDTqB,EAAe,GAAIC,KANf9D,EAAQuD,aACRd,EAAa,IAAOJ,cAAcrC,EAAQuD,YAAY,IAAYE,EAAO/yB,SAQ9E+yB,EAGP,OAAO,KAKf,SAASM,EAAaC,GAIlB,QAHaC,IAATD,IACAxB,EAAiBwB,GAEjBxB,EAAgB,CAChB,IAAK,IAAI31B,EAAI,EAAGA,EAAIo0B,EAAa1d,SAAStY,OAAQ4B,IAAK,CAC1Bo0B,EAAa1d,SAAS1W,GACpC+kB,UAAWnQ,KAAO,SAEjBwiB,IAAZrD,IACAA,EAAQhP,UAAWnQ,KAAO,YAG7B,CACD,IAAS5U,EAAI,EAAGA,EAAIo0B,EAAa1d,SAAStY,OAAQ4B,IAAK,CAC1Bo0B,EAAa1d,SAAS1W,GACpC+kB,UAAWnQ,KAAO,QAEjBwiB,IAAZrD,IACAA,EAAQhP,UAAWnQ,KAAO,SAWtC,SAASoiB,EAAe1e,EAAe+e,GACnC,GAAIlE,EAAQuD,YAAa,CAER,IAATpe,GACA6a,EAAQuD,YAAY/pB,KAAK2L,GAE7B6b,EAAe,EACfC,EAAald,gBACb,IAAIyL,EAAmBpjB,KAAKc,KAAK8yB,EAAQuD,YAAYt4B,OAAS+0B,EAAQS,oBACtE,GAAgB,GAAZjR,EACA,IAAI2U,EAAsB,OAGtBA,EAAsB3U,EAAW,EAEzC,GAAIyR,EAAazR,UAAYA,EAAW2U,EAAa,CAEjD,IADA,IAAIC,EAAsBnD,EAAazR,SAC9B3iB,EAAI,EAAGA,EAAIu3B,EAAav3B,IAC7Bo0B,EAAanF,oBAAoB,GAErC,IAASjvB,EAAI,EAAGA,EAAI2iB,EAAW2U,EAAat3B,IACpCA,EAAI,EACJo0B,EAAajG,iBAAiBiH,GAAY,GAG1ChB,EAAajG,iBAAiB+G,GAAY,GAItDd,EAAal3B,QAAWk4B,EAAazS,EAAa2U,EAAcpC,GAAax3B,WAAa,KAE1F,IAAK,IAAIyC,EAAI,EAAGq3B,EAAU,EAAGr3B,EAAIwiB,EAAW2U,EAAan3B,GAAK,EAAGq3B,IAAW,CAGxE,GAAIrE,EAAQuD,YAAYt4B,OAASo5B,EAAUrE,EAAQS,mBAC/C,IAAI6D,EAAsBtE,EAAQS,wBAG9B6D,EAAsBtE,EAAQuD,YAAYt4B,QAAWo5B,EAAU,GAAKrE,EAAQS,mBAGpF,IADA,IAAI8D,EAA4Bn4B,KAAKC,IAAID,KAAKG,IAAI+3B,EAAqB,GAAItE,EAAQS,oBAC1E1zB,EAAI,EAAGy3B,EAAI,EAAGz3B,EAAIw3B,EAAkBx3B,IACzC,KAAIA,EAAIizB,EAAQS,oBAAhB,CAGA,IAAIgD,EAAwBH,IACd,MAAVG,IACAxC,EAAand,WAAW2f,EAAQz2B,EAAGw3B,GACnCA,GAAK,EACLxD,MAORhB,EAAQuD,YAAYt4B,QAAU+0B,EAAQQ,YACtCiE,EAAcP,GAAQ,GAGtBO,EAAcP,GAAQ,IAMlC,SAASN,EAAwBc,GACzBA,IACA9D,EAAU,EAAO1O,mBAAmB,UAAW,SACvCpoB,MAAQ+2B,EAChBD,EAAQ72B,OAAS+2B,EACjBF,EAAQj1B,KAAQS,KAAKa,MAA8B,GAAxByvB,SAASmE,IAAqBt2B,WAAa,KACtEq2B,EAAQh1B,MAAmC,EAA5BT,WAAWy1B,EAAQj1B,OAAYpB,WAAa,KAC3Dq2B,EAAQ3oB,kBAAoB,EAAQ6F,0BACpC8iB,EAAQ7oB,oBAAsB,EAAQC,0BACtC4oB,EAAQ5P,UAAY,EACpB4P,EAAQzb,MA1VU,UA2VlByb,EAAQpqB,SAAWmqB,EACnBC,EAAQiC,WA3VoB,UA4V5BjC,EAAQxrB,yBAAyBiB,KAAI,WACjCuqB,EAAQiC,WA5VqB,aA8VjCjC,EAAQ5rB,uBAAuBqB,KAAI,WAC/BuqB,EAAQiC,WAhWgB,aAkW5BjC,EAAQxP,qBAAuB,WAC3BwP,EAAQiC,WAjWqB,UAmWjCjC,EAAQvP,mBAAqB,WACzBuP,EAAQiC,WArWqB,WAuWjCjC,EAAQzrB,yBAAyBkB,KAAI,WAE7BmsB,GADAA,EAMJuB,OAEJY,GAAW7gB,WAAW8c,EAAS,EAAG,IAGlC+D,GAAW1jB,cAAc2f,GAKjC,SAAS6D,EAAcP,EAAgBU,GAC/BA,GACAV,EAAO/e,MAxXmB,UAyX1B+e,EAAOrB,WAxX6B,YA2XpCqB,EAAO/e,MAhYW,UAiYlB+e,EAAOrB,WAhYqB,WAqYpC,SAASgC,EAAY1f,GACb6a,EAAQuD,aAAevD,EAAQuD,YAAYt4B,OAAS,EACpDi1B,EAAQ,CACJqD,YAAavD,EAAQuD,YACrBZ,YAAaxd,IAIjB+a,EAAQ,CACJyC,YAAaxd,IAGrB4a,EAAgB9e,cAAc6jB,GAIlC,IAAIA,EAAwB,IAAI,EAGhC,GAFAA,EAAgBp0B,KAAO,mBACvBo0B,EAAgBh7B,MAAQk2B,EAAQI,YAC5BJ,EAAQuD,YAAa,CACrBuB,EAAgB/6B,OAASo4B,EACzB,IAAI4C,EAAiBrI,SAASsD,EAAQK,cAAgB3D,SAASyF,GAC/D2C,EAAgB9J,iBAAiB+J,GAAQ,GACzCD,EAAgB9J,iBAAiB,EAAM+J,GAAQ,QAG/CD,EAAgB/6B,OAASi2B,EAAQK,aACjCyE,EAAgB9J,iBAAiB,GAAK,GAK1C,GAHA+E,EAAgBjc,WAAWghB,GAGvB9E,EAAQuD,YAAa,EACrBtC,EAAe,IAAI,GACNvwB,KAAO,gBACpBuwB,EAAahpB,kBAAoB,EAAQC,uBACzC+oB,EAAa4B,WAzamB,UA0ahC5B,EAAan3B,MAAQk2B,EAAQI,YAC7B,IAAI4E,EAAsBhF,EAAQuD,YAAYt4B,OAAS+0B,EAAQS,mBAC/D,GAAmB,GAAfuE,EACA,IAAIb,GAAsB,OAGtBA,GAAsBa,EAAc,EAE5C/D,EAAal3B,QAAWk4B,EAAa+C,EAAgBb,GAAcpC,GAAax3B,WAAa,KAC7F02B,EAAar1B,IAAMQ,KAAKa,MAAmB,IAAbg1B,GAAmB13B,WAAa,KAC9D,IAAK,IAAIsC,GAAI,EAAGA,GAA0E,EAArET,KAAKc,KAAK8yB,EAAQuD,YAAYt4B,OAAS+0B,EAAQS,oBAA2B,EAAG5zB,KAC1FA,GAAI,GAAK,EACTo0B,EAAajG,iBAAiBiH,GAAY,GAG1ChB,EAAajG,iBAAiB+G,GAAY,GAGlD,IAASl1B,GAAI,EAAGA,GAAkC,EAA9BmzB,EAAQS,mBAA0B,EAAG5zB,KACjDA,GAAI,GAAK,EACTo0B,EAAahG,oBAAoBgH,GAAY,GAG7ChB,EAAahG,oBAAoB8G,GAAY,GAGrD+C,EAAgBhhB,WAAWmd,EAAc,EAAG,GAIhD,IAAIgE,GAAoB,IAAI,EAC5BA,GAAYv0B,KAAO,eACnBu0B,GAAYl7B,OAASi2B,EAAQK,aAC7B,IAAI6E,GAAoBxI,SAASsD,EAAQM,cAAgB5D,SAASsD,EAAQK,cACtE8E,GAA4B,CAACD,GAAW,EAAMA,IAClDD,GAAYjK,iBAAiBmK,GAAgB,IAAI,GACjDF,GAAYjK,iBAAiBmK,GAAgB,IAAI,GACjDL,EAAgBhhB,WAAWmhB,GAAa,EAAG,GAG3C,IAAIlR,GAAoB,IAAI,EAC5BA,GAAOrjB,KAAO,sBACdqjB,GAAO8O,WAAa,UACpB9O,GAAO/C,UAAY,EACnBiU,GAAYnhB,WAAWiQ,GAAQ,EAAG,GAGlC,IAAIqR,GAAsB,EAAOlT,mBAAmB,cAAe,KACnEkT,GAAYvkB,WAAa,kBACzB,IAAIwkB,GAAuB,IAAOhD,cAActO,GAAO8O,YACvDnC,EAAiB,IAAI,IAAO,EAAM2E,GAAa1H,EAAG,EAAM0H,GAAazH,EAAG,EAAMyH,GAAan5B,GAC3Fk5B,GAAYjgB,MAAQub,EAAekC,cACnCwC,GAAY5uB,SAAWpK,KAAKa,MAAwC,GAAlCyvB,SAASsD,EAAQM,eACnD8E,GAAYxT,UAAW0T,sBAAwB,EAAQ3zB,0BACvDyzB,GAAYrtB,oBAAsB,EAAQ8F,2BAC1CunB,GAAYr7B,OAASq7B,GAAYt7B,MAAQk2B,EAAQM,aACjD8E,GAAYvC,WAAa9O,GAAO8O,WAChCuC,GAAYpU,UAAY,EACxBoU,GAAYhU,qBAAuB,aAEnCgU,GAAY/T,mBAAqB,WAC7B+T,GAAYvC,WAAa9O,GAAO8O,YAEpCuC,GAAYlU,sBAAwB,WAChCkU,GAAYjgB,MAAQ4O,GAAO8O,WAC3BuC,GAAYvC,WAAa,OAE7BuC,GAAYjU,oBAAsB,WAC9BiU,GAAYjgB,MAAQub,EAAekC,cACnCwC,GAAYvC,WAAa9O,GAAO8O,YAEpCuC,GAAYjwB,yBAAyBkB,KAAI,WACrCwuB,EAAYU,GAAc1C,eAE9BoC,GAAYnhB,WAAWshB,GAAa,EAAG,GAGvC,IAAII,GAAmB,IAAI,EAC3BA,GAAW90B,KAAO,gBAClB80B,GAAW3C,WAzfyB,UA0fpC,IAAI4C,GAA2B,CAAC,MAAQ,OACxCD,GAAWxK,iBAAiB,GAAK,GACjCwK,GAAWvK,oBAAoBwK,GAAe,IAAI,GAClDD,GAAWvK,oBAAoBwK,GAAe,IAAI,GAClDR,GAAYnhB,WAAW0hB,GAAY,EAAG,GAGtC,IAAIb,GAAmB,IAAI,EAC3BA,GAAWj0B,KAAO,cAClBi0B,GAAW3J,iBAAiB,KAAM,GAClC2J,GAAW3J,iBAAiB,KAAM,GAClCwK,GAAW1hB,WAAW6gB,GAAY,EAAG,IAGrCzD,EAAS,IAAIrD,GACNntB,KAAO,mBACVsvB,EAAQK,aAAeL,EAAQI,YAC/Bc,EAAOp3B,MAAQ,IAGfo3B,EAAOn3B,OAAS,IAEpBm3B,EAAOp4B,MAAQ,IAAOu5B,cAAcrC,EAAQO,WAC5CW,EAAOnpB,oBAAsB,EAAQtG,4BACrCyvB,EAAOjpB,kBAAoB,EAAQtG,0BACnCuvB,EAAOjsB,wBAAwBoB,KAAI,WAC/BurB,EAAcV,EAAOxwB,KACrBixB,EAAU,GACVoC,GAAa,MAEjB7C,EAAO5D,yBAAyBjnB,KAAI,SAASvN,GACrC84B,GAAeV,EAAOxwB,MACtB+xB,EAAa35B,EAAOo4B,EAAOxwB,SAGnCi0B,GAAW7gB,WAAWod,EAAQ,EAAG,GAGjC,IAAIwE,GAAwB,IAAI,EAChCA,GAAgBh1B,KAAO,sBACvBg1B,GAAgB3tB,oBAAsB,EAAQC,0BAC9C,IAAI2tB,GAAgC,CAAC,KAAO,MAC5CD,GAAgB1K,iBAAiB2K,GAAoB,IAAI,GACzDD,GAAgB1K,iBAAiB2K,GAAoB,IAAI,GACzDH,GAAW1hB,WAAW4hB,GAAiB,EAAG,GAG1C,IAAIE,GAA8B,IAAI,EACtCA,GAAsBl1B,KAAO,uBAC7B,IAAIm1B,GAA6B,CAAC,KAAO,MACzCD,GAAsB5K,iBAAiB,GAAK,GAC5C4K,GAAsB3K,oBAAoB4K,GAAiB,IAAI,GAC/DD,GAAsB3K,oBAAoB4K,GAAiB,IAAI,GAC/DH,GAAgB5hB,WAAW8hB,GAAuB,EAAG,GAGrD,IAAIE,GAAuB,IAAI,EAC/BA,GAAep1B,KAAO,2BACtB,IAAIq1B,GAA8B,CAAC,IAAM,IAAM,IAAM,KACrDD,GAAe9K,iBAAiB+K,GAAkB,IAAI,GACtDD,GAAe9K,iBAAiB+K,GAAkB,IAAI,GACtDD,GAAe9K,iBAAiB+K,GAAkB,IAAI,GACtDD,GAAe9K,iBAAiB+K,GAAkB,IAAI,GACtDH,GAAsB9hB,WAAWgiB,GAAgB,EAAG,GAGpD,IAAIE,GAAuB,IAAI,EAC/BA,GAAet1B,KAAO,kBACtBs1B,GAAel8B,MAAQ,IACvBk8B,GAAehL,iBAAiB,IAAK,GACrCgL,GAAehL,iBAAiB,IAAK,GACrC8K,GAAehiB,WAAWkiB,GAAgB,EAAG,GAE7C,IAAIC,GAAsB75B,KAAKa,MAAMyvB,SAASsD,EAAQI,aAAeqF,GAAe,GAAKI,GAAiB,GAAK,KAC3GK,GAAuB95B,KAAKa,MAAMyvB,SAASsD,EAAQK,cAAgB8E,GAAgB,GAAKQ,GAAoB,GAAKI,GAAkB,GAAK,IAE5I,GAAI/F,EAAQI,YAAcJ,EAAQK,aAC9B,IAAI8F,GAAwBD,QAGxBC,GAAwBF,GAGhC,IAAIG,GAAqB,IAAI,EAC7BA,GAAQ3kB,KAAO,MACf2kB,GAAQ11B,KAAO,kBACf01B,GAAQjhB,MAjlBkB,UAklB1BihB,GAAQ5vB,SAAW2vB,GACnBL,GAAehiB,WAAWsiB,GAAS,EAAG,IAEtC1E,EAAY,IAAI,GACNhxB,KAAO,mBACjBgxB,EAAUmB,WAAa7C,EAAQO,UAC/BmB,EAAU1Q,UAAY,EACtBgV,GAAeliB,WAAW4d,EAAW,EAAG,GAExC,IAAI6D,GAAwB,EAAOrT,mBAAmB,gBAAiB,IACvEqT,GAAc1C,WAAa7C,EAAQO,UACnCgF,GAAcvU,UAAY,EAC1BuU,GAAcpwB,yBAAyBkB,KAAI,WAEvCosB,EADkB,IAAOJ,cAAckD,GAAc1C,YAC3B0C,GAAc70B,MACxCqzB,GAAa,MAEjBwB,GAAcnU,qBAAuB,aACrCmU,GAAclU,mBAAqB,aACnCkU,GAAcrU,sBAAwB,aACtCqU,GAAcpU,oBAAsB,aACpC6U,GAAeliB,WAAWyhB,GAAe,EAAG,GAE5C,IAAIc,GAA2B,IAAI,EACnCA,GAAc31B,KAAO,iBACrB21B,GAAcv8B,MAAQ,IACtBu8B,GAAcrV,UAAY,EAC1BqV,GAAclhB,MAvmB4B,UAwmB1CkhB,GAAcpyB,kBAAmB,EACjC6xB,GAAehiB,WAAWuiB,GAAe,EAAG,GAE5C,IAAIC,GAAyB,IAAI,EACjCA,GAAY51B,KAAO,sBACnB41B,GAAY7kB,KAAO,UACnB6kB,GAAYnhB,MApnBc,UAqnB1BmhB,GAAY9vB,SAAW2vB,GACvBL,GAAehiB,WAAWwiB,GAAa,EAAG,GAG1C,IAAIC,GAAmB,IAAI,EAC3BA,GAAW71B,KAAO,cAClB61B,GAAWx8B,OAAS,GAEpBw8B,GAAWvL,iBADkB,EAAI,GACW,GAC5CuL,GAAWvL,iBAFkB,EAAI,GAEW,GAC5CuL,GAAWvL,iBAHkB,EAAI,GAGW,GAC5C4K,GAAsB9hB,WAAWyiB,GAAY,EAAG,GAGhD1F,EAAez0B,KAAKa,MAAMyvB,SAASsD,EAAQI,aAAeqF,GAAe,GAAKI,GAAiB,GAAK,KAAOt7B,WAAa,KACxHu2B,EAAgB10B,KAAKa,MAAMyvB,SAASsD,EAAQK,cAAgB8E,GAAgB,GAAKQ,GAAoB,IAAMx6B,WAAWo7B,GAAWx8B,OAAOQ,YAAc,MARzH,EAAI,GAQ6I,IAAMA,WAAa,KAI7Lo2B,EADAx1B,WAAW01B,GAAe11B,WAAW21B,GACpB10B,KAAKa,MAAiC,IAA3B9B,WAAW21B,IAGtB10B,KAAKa,MAAgC,IAA1B9B,WAAW01B,IAI3C,IAAI2F,GAAgB,EAAOtU,mBAAmB,QAAS,MACvDsU,GAAM18B,MAAQ+2B,EACd2F,GAAMz8B,OAAS+2B,EACf0F,GAAMvuB,kBAAoB,EAAQtG,0BAClC60B,GAAMxV,UAAY,EAClBwV,GAAMrhB,MAppBoB,UAqpB1BqhB,GAAMhwB,SAAWmqB,EACjB6F,GAAM3D,WArpB8B,UAspBpC2D,GAAMpxB,yBAAyBiB,KAAI,WAAQmwB,GAAM3D,WArpBR,aAspBzC2D,GAAMxxB,uBAAuBqB,KAAI,WAAQmwB,GAAM3D,WAvpBX,aAwpBpC2D,GAAMpV,qBAAuB,WACzBoV,GAAM3D,WAvpB+B,UAypBzC2D,GAAMnV,mBAAqB,WACvBmV,GAAM3D,WA3pB+B,WA6pBzC2D,GAAMrxB,yBAAyBkB,KAAI,WAC/B0tB,GAAa,GACbc,EAAYnD,EAAUmB,eAE1B0D,GAAWziB,WAAW0iB,GAAO,EAAG,GAEhC,IAAIC,GAAoB,EAAOvU,mBAAmB,YAAa,UAsB/D,GArBAuU,GAAU38B,MAAQ+2B,EAClB4F,GAAU18B,OAAS+2B,EACnB2F,GAAUxuB,kBAAoB,EAAQtG,0BACtC80B,GAAUzV,UAAY,EACtByV,GAAUthB,MA1qBgB,UA2qB1BshB,GAAUjwB,SAAWmqB,EACrB8F,GAAU5D,WA3qB0B,UA4qBpC4D,GAAUrxB,yBAAyBiB,KAAI,WAAQowB,GAAU5D,WA3qBhB,aA4qBzC4D,GAAUzxB,uBAAuBqB,KAAI,WAAQowB,GAAU5D,WA7qBnB,aA8qBpC4D,GAAUrV,qBAAuB,WAC7BqV,GAAU5D,WA7qB2B,UA+qBzC4D,GAAUpV,mBAAqB,WAC3BoV,GAAU5D,WAjrB2B,WAmrBzC4D,GAAUtxB,yBAAyBkB,KAAI,WACnC0tB,GAAa,GACbc,EAAYU,GAAc1C,eAE9B0D,GAAWziB,WAAW2iB,GAAW,EAAG,GAEhCzG,EAAQuD,YAAa,CACrB,IAAIO,GAAkB,EAAO5R,mBAAmB,UAAW,QAC3D4R,GAAQh6B,MAAQ+2B,EAChBiD,GAAQ/5B,OAAS+2B,EACjBgD,GAAQ7rB,kBAAoB,EAAQtG,0BACpCmyB,GAAQ9S,UAAY,EACpB8S,GAAQttB,SAAWmqB,EACfX,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,aACrCsD,GAAQ3e,MAnsBU,UAosBlB2e,GAAQjB,WAnsBoB,WAssB5B4B,EAAcX,IAAS,GAE3BA,GAAQ1uB,yBAAyBiB,KAAI,WAC7B2pB,EAAQuD,aACJvD,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,cACrCsD,GAAQjB,WA1sBiB,cA8sBrCiB,GAAQ9uB,uBAAuBqB,KAAI,WAC3B2pB,EAAQuD,aACJvD,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,cACrCsD,GAAQjB,WAltBY,cAstBhCiB,GAAQ1S,qBAAuB,WACvB4O,EAAQuD,aACJvD,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,cACrCsD,GAAQjB,WAvtBiB,WA2tBrCiB,GAAQzS,mBAAqB,WACrB2O,EAAQuD,aACJvD,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,cACrCsD,GAAQjB,WA/tBiB,YAmuBrCiB,GAAQ3uB,yBAAyBkB,KAAI,WAC7B2pB,EAAQuD,cAC0B,GAA9BvD,EAAQuD,YAAYt4B,QACpB24B,GAAwB,GAExB5D,EAAQuD,YAAYt4B,OAAS+0B,EAAQQ,aACrCqD,EAAenC,EAAUmB,WAAYiB,IAEzCC,GAAa,OAGjB/D,EAAQuD,YAAYt4B,OAAS,GAC7B24B,GAAwB,GAE5B2C,GAAWziB,WAAWggB,GAAS,EAAG,GAItC,IAAI4C,GAA0B,IAAI,EAClCA,GAAkBh2B,KAAO,qBACzBg2B,GAAkB1L,iBAAiB,KAAM,GACzC0L,GAAkB1L,iBAAiB,KAAM,GACzC0L,GAAkB1L,iBAAiB,KAAM,GACzC0L,GAAkB1L,iBAAiB,KAAM,GACzC0K,GAAgB5hB,WAAW4iB,GAAmB,EAAG,GAGjD3F,EAAe,IAAOsB,cAAcrC,EAAQO,WAC5C,IAAIoG,GAA0B,IAAI,EAClCA,GAAkBj2B,KAAO,aACzBi2B,GAAkB78B,MAAQ,IAC1B68B,GAAkB1uB,kBAAoB,EAAQtG,0BAC9Cg1B,GAAkB3L,iBAAiB,EAAI,GAAG,GAC1C2L,GAAkB3L,iBAAiB,EAAI,GAAG,GAC1C2L,GAAkB3L,iBAAiB,EAAI,GAAG,GAC1C2L,GAAkB1L,oBAAoB,IAAK,GAC3C0L,GAAkB1L,oBAAoB,IAAK,GAC3C0L,GAAkB1L,oBAAoB,IAAK,GAC3CyL,GAAkB5iB,WAAW6iB,GAAmB,EAAG,GAEnD,IAAS95B,GAAI,EAAGA,GAAI01B,EAAiBt3B,OAAQ4B,KAAK,EAC1C+5B,GAAuB,IAAI,GACrBnlB,KAAO8gB,EAAiB11B,IAClC+5B,GAAUzhB,MAhxBY,UAixBtByhB,GAAUpwB,SAAWmqB,EACrBgG,GAAkB7iB,WAAW8iB,GAAW/5B,GAAG,IAI/Cs0B,EAAU,IAAI,GACNr3B,MAAQ,IAChBq3B,EAAQp3B,OAAS,IACjBo3B,EAAQzwB,KAAO,YACfywB,EAAQ3qB,SAAWmqB,EACnBQ,EAAQ1f,MAAyB,IAAjBsf,EAAapD,GAASpzB,WACtC42B,EAAQhc,MAtwBqB,UAuwB7Bgc,EAAQ0B,WAxwB+B,UAywBvC1B,EAAQ1L,kBAAkBpf,KAAI,WAC1BurB,EAAcT,EAAQzwB,KACtBixB,EAAUR,EAAQ1f,KAClBsiB,GAAa,MAEjB5C,EAAQzL,iBAAiBrf,KAAI,WACL,IAAhB8qB,EAAQ1f,OACR0f,EAAQ1f,KAAO,KAEnBshB,EAAU5B,EAAS,KACfS,GAAeT,EAAQzwB,OACvBkxB,EAAc,OAGtBT,EAAQjb,wBAAwB7P,KAAI,WAC5BurB,GAAeT,EAAQzwB,MACvBqyB,EAAU5B,EAAS,QAG3BwF,GAAkB7iB,WAAWqd,EAAS,EAAG,IAEzCC,EAAU,IAAI,GACNt3B,MAAQ,IAChBs3B,EAAQr3B,OAAS,IACjBq3B,EAAQ1wB,KAAO,YACf0wB,EAAQ5qB,SAAWmqB,EACnBS,EAAQ3f,MAAyB,IAAjBsf,EAAanD,GAASrzB,WACtC62B,EAAQjc,MAnyBqB,UAoyB7Bic,EAAQyB,WAryB+B,UAsyBvCzB,EAAQ3L,kBAAkBpf,KAAI,WAC1BurB,EAAcR,EAAQ1wB,KACtBixB,EAAUP,EAAQ3f,KAClBsiB,GAAa,MAEjB3C,EAAQ1L,iBAAiBrf,KAAI,WACL,IAAhB+qB,EAAQ3f,OACR2f,EAAQ3f,KAAO,KAEnBshB,EAAU3B,EAAS,KACfQ,GAAeR,EAAQ1wB,OACvBkxB,EAAc,OAGtBR,EAAQlb,wBAAwB7P,KAAI,WAC5BurB,GAAeR,EAAQ1wB,MACvBqyB,EAAU3B,EAAS,QAG3BuF,GAAkB7iB,WAAWsd,EAAS,EAAG,IAEzCC,EAAU,IAAI,GACNv3B,MAAQ,IAChBu3B,EAAQt3B,OAAS,IACjBs3B,EAAQ3wB,KAAO,YACf2wB,EAAQ7qB,SAAWmqB,EACnBU,EAAQ5f,MAAyB,IAAjBsf,EAAa70B,GAAS3B,WACtC82B,EAAQlc,MAh0BqB,UAi0B7Bkc,EAAQwB,WAl0B+B,UAm0BvCxB,EAAQ5L,kBAAkBpf,KAAI,WAC1BurB,EAAcP,EAAQ3wB,KACtBixB,EAAUN,EAAQ5f,KAClBsiB,GAAa,MAEjB1C,EAAQ3L,iBAAiBrf,KAAI,WACL,IAAhBgrB,EAAQ5f,OACR4f,EAAQ5f,KAAO,KAEnBshB,EAAU1B,EAAS,KACfO,GAAeP,EAAQ3wB,OACvBkxB,EAAc,OAGtBP,EAAQnb,wBAAwB7P,KAAI,WAC5BurB,GAAeP,EAAQ3wB,MACvBqyB,EAAU1B,EAAS,QAG3BsF,GAAkB7iB,WAAWud,EAAS,EAAG,IAEzCC,EAAU,IAAI,GACNx3B,MAAQ,IAChBw3B,EAAQv3B,OAAS,IACjBu3B,EAAQ5wB,KAAO,YACf4wB,EAAQ9qB,SAAWmqB,EACnBW,EAAQ7f,KAAOsf,EAAapD,EAAEpzB,WAC9B+2B,EAAQnc,MA71BqB,UA81B7Bmc,EAAQuB,WA/1B+B,UAg2BvCvB,EAAQ7L,kBAAkBpf,KAAI,WAC1BurB,EAAcN,EAAQ5wB,KACtBixB,EAAUL,EAAQ7f,KAClBsiB,GAAa,MAEjBzC,EAAQ5L,iBAAiBrf,KAAI,WACO,GAA5BlL,WAAWm2B,EAAQ7f,OAA8B,IAAhB6f,EAAQ7f,OACzC6f,EAAQ7f,KAAO,IACf4hB,EAAY/B,EAAS,MAErBM,GAAeN,EAAQ5wB,OACvBkxB,EAAc,OAGtBN,EAAQpb,wBAAwB7P,KAAI,WAC5BurB,GAAeN,EAAQ5wB,MACvB2yB,EAAY/B,EAAS,QAG7BqF,GAAkB7iB,WAAWwd,EAAS,EAAG,IAEzCC,EAAU,IAAI,GACNz3B,MAAQ,IAChBy3B,EAAQx3B,OAAS,IACjBw3B,EAAQ7wB,KAAO,YACf6wB,EAAQ/qB,SAAWmqB,EACnBY,EAAQ9f,KAAOsf,EAAanD,EAAErzB,WAC9Bg3B,EAAQpc,MA13BqB,UA23B7Boc,EAAQsB,WA53B+B,UA63BvCtB,EAAQ9L,kBAAkBpf,KAAI,WAC1BurB,EAAcL,EAAQ7wB,KACtBixB,EAAUJ,EAAQ9f,KAClBsiB,GAAa,MAEjBxC,EAAQ7L,iBAAiBrf,KAAI,WACO,GAA5BlL,WAAWo2B,EAAQ9f,OAA8B,IAAhB8f,EAAQ9f,OACzC8f,EAAQ9f,KAAO,IACf4hB,EAAY9B,EAAS,MAErBK,GAAeL,EAAQ7wB,OACvBkxB,EAAc,OAGtBL,EAAQrb,wBAAwB7P,KAAI,WAC5BurB,GAAeL,EAAQ7wB,MACvB2yB,EAAY9B,EAAS,QAG7BoF,GAAkB7iB,WAAWyd,EAAS,EAAG,IAEzCC,EAAU,IAAI,GACN13B,MAAQ,IAChB03B,EAAQz3B,OAAS,IACjBy3B,EAAQ9wB,KAAO,YACf8wB,EAAQhrB,SAAWmqB,EACnBa,EAAQ/f,KAAOsf,EAAa70B,EAAE3B,WAC9Bi3B,EAAQrc,MAv5BqB,UAw5B7Bqc,EAAQqB,WAz5B+B,UA05BvCrB,EAAQ/L,kBAAkBpf,KAAI,WAC1BurB,EAAcJ,EAAQ9wB,KACtBixB,EAAUH,EAAQ/f,KAClBsiB,GAAa,MAEjBvC,EAAQ9L,iBAAiBrf,KAAI,WACO,GAA5BlL,WAAWq2B,EAAQ/f,OAA8B,IAAhB+f,EAAQ/f,OACzC+f,EAAQ/f,KAAO,IACf4hB,EAAY7B,EAAS,MAErBI,GAAeJ,EAAQ9wB,OACvBkxB,EAAc,OAGtBJ,EAAQtb,wBAAwB7P,KAAI,WAC5BurB,GAAeJ,EAAQ9wB,MACvB2yB,EAAY7B,EAAS,QAG7BmF,GAAkB7iB,WAAW0d,EAAS,EAAG,GAGzC,IAQIoF,GARAC,GAAyB,IAAI,EACjCA,GAAiBn2B,KAAO,YACxBm2B,GAAiB/8B,MAAQ,IACzB+8B,GAAiB7L,iBAAiB,GAAK,GACvC6L,GAAiB5L,oBAAoB,IAAK,GAC1C4L,GAAiB5L,oBAAoB,IAAK,GAC1CyL,GAAkB5iB,WAAW+iB,GAAkB,EAAG,IAE9CD,GAAuB,IAAI,GACrBnlB,KAAO,IACjBmlB,GAAUzhB,MA/8BgB,UAg9B1ByhB,GAAUpwB,SAAWmqB,EACrBkG,GAAiB/iB,WAAW8iB,GAAW,EAAG,IAE1CnF,EAAS,IAAI,GACN33B,MAAQ,IACf23B,EAAO13B,OAAS,IAChB03B,EAAO/wB,KAAO,WACd+wB,EAAO1pB,oBAAsB,EAAQtG,4BACrCgwB,EAAOjrB,SAAWmqB,EAClB,IAAImC,GAAa9C,EAAQO,UAAU9Y,MAAM,KACzCga,EAAOhgB,KAAOqhB,GAAW,GACzBrB,EAAOtc,MAr8BsB,UAs8B7Bsc,EAAOoB,WAv8BgC,UAw8BvCpB,EAAOhM,kBAAkBpf,KAAI,WACzBurB,EAAcH,EAAO/wB,KACrBixB,EAAUF,EAAOhgB,KACjBsiB,GAAa,MAEjBtC,EAAO/L,iBAAiBrf,KAAI,WACxB,GAA0B,GAAtBorB,EAAOhgB,KAAKxW,OAAa,CACzB,IAAI67B,EAAMrF,EAAOhgB,KAAKgG,MAAM,IAC5Bga,EAAOhgB,KAAOqlB,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAEhD,IAAfrF,EAAOhgB,OACPggB,EAAOhgB,KAAO,SACdghB,EAAa,IAAOJ,cAAcZ,EAAOhgB,MAAO,MAEhDmgB,GAAeH,EAAO/wB,OACtBkxB,EAAc,OAGtBH,EAAOvb,wBAAwB7P,KAAI,WAC/B,IAAI0wB,EAAsBtF,EAAOhgB,KAC7BulB,EAAoB,aAAa7D,KAAK4D,GAC1C,IAAKtF,EAAOhgB,KAAKxW,OAAS,GAAK+7B,IAAapF,GAAeH,EAAO/wB,KAC9D+wB,EAAOhgB,KAAOkgB,MAEb,CACD,GAAIF,EAAOhgB,KAAKxW,OAAS,EAErB,IADA,IAAIg8B,EAAsB,EAAIxF,EAAOhgB,KAAKxW,OACjC4B,EAAI,EAAGA,EAAIo6B,EAAap6B,IAC7Bk6B,EAAc,IAAMA,EAG5B,GAA0B,GAAtBtF,EAAOhgB,KAAKxW,OAAa,CACzB,IAAI67B,EAAgBrF,EAAOhgB,KAAKgG,MAAM,IACtCsf,EAAcD,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAEnEC,EAAc,IAAMA,EAChBnF,GAAeH,EAAO/wB,OACtBixB,EAAUF,EAAOhgB,KACjBghB,EAAa,IAAOJ,cAAc0E,GAActF,EAAO/wB,WAInEm2B,GAAiB/iB,WAAW2d,EAAQ,EAAG,GAEnCzB,EAAQuD,aAAevD,EAAQuD,YAAYt4B,OAAS,GACpD44B,EAAe,GAAIC,QAx9ChB,EAAAhG,SAAW,KA49C9B,EA79CA,CAAiC,GA89CjC,IAAW/a,gBAAgB,2BAA6B,ECv+CxD,kBAqBI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OApBX,EAAAqU,WAAa,E,EAgFzB,OAjF6B,iBAIzB,sBAAW,wBAAS,C,IAApB,WACI,OAAO1b,KAAK0b,Y,IAGhB,SAAqBjc,GACbO,KAAK0b,aAAejc,IAIxBO,KAAK0b,WAAajc,EAClBO,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,WAGD,YAAAyO,WAAV,SAAqB7I,GACjBA,EAAQU,QAEJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjC,EAAQkI,YAAYrZ,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,EAAGT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,EACrIV,KAAKyH,gBAAgBhH,MAAQ,EAAIT,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgB/G,OAAS,EAAIV,KAAK0b,WAAa,EAAGzJ,GAE7GjS,KAAK6Z,cACL5H,EAAQmB,UAAYpT,KAAK6Z,YAEzB5H,EAAQ4J,SAGR7b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAGxBnR,KAAK0b,aACD1b,KAAK8b,QACL7J,EAAQW,YAAc5S,KAAK8b,OAE/B7J,EAAQY,UAAY7S,KAAK0b,WAEzBzJ,EAAQ8J,UAGZ9J,EAAQc,WAGF,YAAAoB,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK4Z,oBAAoBnZ,OAAS,EAAIT,KAAK0b,WAC3C1b,KAAK4Z,oBAAoBlZ,QAAU,EAAIV,KAAK0b,WAC5C1b,KAAK4Z,oBAAoBtX,MAAQtC,KAAK0b,WACtC1b,KAAK4Z,oBAAoBrX,KAAOvC,KAAK0b,YAG/B,YAAAhH,iBAAV,SAA2BzC,GAEvB,EAAQoH,YAAYrZ,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,EAAGT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,EAAGV,KAAKyH,gBAAgBhH,MAAQ,EAAGT,KAAKyH,gBAAgB/G,OAAS,EAAGuR,GAE7MA,EAAQ+C,QAEhB,EAjFA,CAA6B,GAkF7B,IAAW0E,gBAAgB,uBAAyB,EClFpD,+B,+CAQA,OARmC,iBACrB,YAAAyW,kBAAV,SAA4B/X,GAExB,IADA,IAAIylB,EAAM,GACDr6B,EAAI,EAAGA,EAAI4U,EAAKxW,OAAQ4B,IAC7Bq6B,GAAO,SAEX,OAAOA,GAEf,EARA,CAAmC,GASnC,IAAWnkB,gBAAgB,6BAA+B,ECH1D,kBA+II,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OA9IX,EAAAy2B,WAAa,EACb,EAAAC,IAAM,IAAIn+B,EAAa,GACvB,EAAAo+B,IAAM,IAAIp+B,EAAa,GACvB,EAAAq+B,IAAM,IAAIr+B,EAAa,GACvB,EAAAs+B,IAAM,IAAIt+B,EAAa,GACvB,EAAAu+B,MAAQ,IAAIvuB,MA4IhB,EAAKlF,gBAAiB,EAEtB,EAAKE,kBAAmB,EACxB,EAAK1C,qBAAuB,EAAQyG,0BACpC,EAAKtG,mBAAqB,EAAQwG,uB,EAuF1C,OA7O0B,iBAWtB,sBAAW,mBAAI,C,IAAf,WACI,OAAO7O,KAAKm+B,O,IAGhB,SAAgB1+B,GACRO,KAAKm+B,QAAU1+B,IAInBO,KAAKm+B,MAAQ1+B,EACbO,KAAKoM,iB,gCAIT,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOpM,KAAKo+B,mB,IAGhB,SAA4B3+B,GAA5B,WACQO,KAAKo+B,oBAAsB3+B,IAI3BO,KAAKq+B,gCAAkCr+B,KAAKo+B,oBAC5Cp+B,KAAKo+B,kBAAkBpyB,kBAAkBc,OAAO9M,KAAKq+B,gCACrDr+B,KAAKq+B,+BAAiC,MAGtC5+B,IACAO,KAAKq+B,+BAAiC5+B,EAAMuM,kBAAkBgB,KAAI,WAAM,4BAG5EhN,KAAKo+B,kBAAoB3+B,EACzBO,KAAKoM,iB,gCAIT,sBAAW,iBAAE,C,IAAb,WACI,OAAOpM,KAAK+9B,IAAI78B,SAASlB,KAAKuM,Q,IAGlC,SAAc9M,GACNO,KAAK+9B,IAAI78B,SAASlB,KAAKuM,SAAW9M,GAIlCO,KAAK+9B,IAAIx8B,WAAW9B,IACpBO,KAAKoM,gB,gCAKb,sBAAW,iBAAE,C,IAAb,WACI,OAAOpM,KAAKg+B,IAAI98B,SAASlB,KAAKuM,Q,IAGlC,SAAc9M,GACNO,KAAKg+B,IAAI98B,SAASlB,KAAKuM,SAAW9M,GAIlCO,KAAKg+B,IAAIz8B,WAAW9B,IACpBO,KAAKoM,gB,gCAKb,sBAAW,iBAAE,C,IAAb,WACI,OAAOpM,KAAKi+B,IAAI/8B,SAASlB,KAAKuM,Q,IAGlC,SAAc9M,GACNO,KAAKi+B,IAAI/8B,SAASlB,KAAKuM,SAAW9M,GAIlCO,KAAKi+B,IAAI18B,WAAW9B,IACpBO,KAAKoM,gB,gCAKb,sBAAW,iBAAE,C,IAAb,WACI,OAAOpM,KAAKk+B,IAAIh9B,SAASlB,KAAKuM,Q,IAGlC,SAAc9M,GACNO,KAAKk+B,IAAIh9B,SAASlB,KAAKuM,SAAW9M,GAIlCO,KAAKk+B,IAAI38B,WAAW9B,IACpBO,KAAKoM,gB,gCAKb,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK89B,Y,IAGhB,SAAqBr+B,GACbO,KAAK89B,aAAer+B,IAIxBO,KAAK89B,WAAar+B,EAClBO,KAAKoM,iB,gCAIT,sBAAW,kCAAmB,C,IAA9B,SAA+B3M,K,gCAK/B,sBAAW,gCAAiB,C,IAA5B,SAA6BA,K,gCAI7B,sBAAY,2BAAY,C,IAAxB,WACI,OAAQO,KAAKo+B,kBAAoBp+B,KAAKo+B,kBAAkBxX,QAAU,GAAK5mB,KAAKi+B,IAAI19B,SAASP,KAAKuM,Q,gCAGlG,sBAAY,2BAAY,C,IAAxB,WACI,OAAQvM,KAAKo+B,kBAAoBp+B,KAAKo+B,kBAAkBvX,QAAU,GAAK7mB,KAAKk+B,IAAI39B,SAASP,KAAKuM,Q,gCAiBxF,YAAAF,aAAV,WACI,MAAO,QAGJ,YAAAgJ,MAAP,SAAapD,GACTA,EAAQU,QAEJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjCnR,KAAKiT,aAAahB,GAClBA,EAAQW,YAAc5S,KAAK8b,MAC3B7J,EAAQY,UAAY7S,KAAK89B,WACzB7rB,EAAQqsB,YAAYt+B,KAAKm+B,OAEzBlsB,EAAQ4C,YACR5C,EAAQgK,OAAOjc,KAAK2I,qBAAqBrG,KAAOtC,KAAK+9B,IAAIx9B,SAASP,KAAKuM,OAAQvM,KAAK2I,qBAAqBpG,IAAMvC,KAAKg+B,IAAIz9B,SAASP,KAAKuM,QAEtI0F,EAAQiK,OAAOlc,KAAK2I,qBAAqBrG,KAAOtC,KAAKu+B,aAAcv+B,KAAK2I,qBAAqBpG,IAAMvC,KAAKw+B,cACxGvsB,EAAQ8J,SAER9J,EAAQc,WAGL,YAAAkB,SAAP,WAEIjU,KAAKyH,gBAAgBhH,MAAQsC,KAAKyN,IAAIxQ,KAAK+9B,IAAIx9B,SAASP,KAAKuM,OAASvM,KAAKu+B,cAAgBv+B,KAAK89B,WAChG99B,KAAKyH,gBAAgB/G,OAASqC,KAAKyN,IAAIxQ,KAAKg+B,IAAIz9B,SAASP,KAAKuM,OAASvM,KAAKw+B,cAAgBx+B,KAAK89B,YAG3F,YAAA5pB,kBAAV,SAA4BT,EAAwBxB,GAChDjS,KAAKyH,gBAAgBnF,KAAOmR,EAAcnR,KAAOS,KAAKC,IAAIhD,KAAK+9B,IAAIx9B,SAASP,KAAKuM,OAAQvM,KAAKu+B,cAAgBv+B,KAAK89B,WAAa,EAChI99B,KAAKyH,gBAAgBlF,IAAMkR,EAAclR,IAAMQ,KAAKC,IAAIhD,KAAKg+B,IAAIz9B,SAASP,KAAKuM,OAAQvM,KAAKw+B,cAAgBx+B,KAAK89B,WAAa,GAS3H,YAAAxvB,cAAP,SAAqBC,EAAmBC,EAAciwB,GAClD,QADkD,IAAAA,OAAA,GAC7Cz+B,KAAKuM,OAASvM,KAAKqN,SAAWrN,KAAKuM,MAAMkC,eAA9C,CAKA,IAAIK,EAAiB9O,KAAKuM,MAAMwC,mBAAmBP,GAC/CQ,EAAoB,IAAQC,QAAQV,EAAU,IAAOzI,WAAY0I,EAAMU,qBAAsBJ,GAEjG9O,KAAKmP,yBAAyBH,EAAmByvB,GAE7CzvB,EAAkBI,EAAI,GAAKJ,EAAkBI,EAAI,EACjDpP,KAAKqP,eAAgB,EAGzBrP,KAAKqP,eAAgB,OAbjB,IAAMC,MAAM,2EAqBb,YAAAH,yBAAP,SAAgCH,EAA4ByvB,QAAA,IAAAA,OAAA,GACxD,IAAI/6B,EAAasL,EAAkBtL,EAAI1D,KAAKuL,aAAahL,SAASP,KAAKuM,OAAU,KAC7E5I,EAAaqL,EAAkBrL,EAAI3D,KAAKwL,aAAajL,SAASP,KAAKuM,OAAU,KAE7EkyB,GACAz+B,KAAK0+B,GAAKh7B,EACV1D,KAAK2+B,GAAKh7B,EACV3D,KAAKi+B,IAAIl+B,uBAAwB,EACjCC,KAAKk+B,IAAIn+B,uBAAwB,IAEjCC,KAAK4+B,GAAKl7B,EACV1D,KAAK6+B,GAAKl7B,EACV3D,KAAK+9B,IAAIh+B,uBAAwB,EACjCC,KAAKg+B,IAAIj+B,uBAAwB,IAG7C,EA7OA,CAA0B,GA8O1B,IAAW2Z,gBAAgB,oBAAsB,E,YC5OjD,aAmBI,WAAYolB,GACR9+B,KAAK++B,WAAaD,EAElB9+B,KAAKg/B,GAAK,IAAIp/B,EAAa,GAC3BI,KAAKi/B,GAAK,IAAIr/B,EAAa,GAE3BI,KAAKk/B,OAAS,IAAI,IAAQ,EAAG,GAuHrC,OAnHI,sBAAW,gBAAC,C,IAAZ,WACI,OAAOl/B,KAAKg/B,GAAG99B,SAASlB,KAAK++B,WAAWxyB,Q,IAG5C,SAAa9M,GACLO,KAAKg/B,GAAG99B,SAASlB,KAAK++B,WAAWxyB,SAAW9M,GAI5CO,KAAKg/B,GAAGz9B,WAAW9B,IACnBO,KAAK++B,WAAW3yB,gB,gCAKxB,sBAAW,gBAAC,C,IAAZ,WACI,OAAOpM,KAAKi/B,GAAG/9B,SAASlB,KAAK++B,WAAWxyB,Q,IAG5C,SAAa9M,GACLO,KAAKi/B,GAAG/9B,SAASlB,KAAK++B,WAAWxyB,SAAW9M,GAI5CO,KAAKi/B,GAAG19B,WAAW9B,IACnBO,KAAK++B,WAAW3yB,gB,gCAKxB,sBAAW,sBAAO,C,IAAlB,WACI,OAAOpM,KAAKm/B,U,IAGhB,SAAmB1/B,GACXO,KAAKm/B,WAAa1/B,IAIlBO,KAAKm/B,UAAYn/B,KAAKo/B,mBACtBp/B,KAAKm/B,SAASnzB,kBAAkBc,OAAO9M,KAAKo/B,kBAE5Cp/B,KAAKo/B,iBAAmB,MAG5Bp/B,KAAKm/B,SAAW1/B,EAEZO,KAAKm/B,WACLn/B,KAAKo/B,iBAAmBp/B,KAAKm/B,SAASnzB,kBAAkBgB,IAAIhN,KAAK++B,WAAWM,gBAGhFr/B,KAAK++B,WAAW3yB,iB,gCAIpB,sBAAW,mBAAI,C,IAAf,WACI,OAAOpM,KAAKs/B,O,IAGhB,SAAgB7/B,GACRO,KAAKs/B,QAAU7/B,IAIfO,KAAKs/B,OAASt/B,KAAKu/B,eACnBv/B,KAAKs/B,MAAMvtB,WAAWytB,8BAA8B1yB,OAAO9M,KAAKu/B,eAGpEv/B,KAAKs/B,MAAQ7/B,EAETO,KAAKs/B,QACLt/B,KAAKu/B,cAAgBv/B,KAAKs/B,MAAMvtB,WAAWytB,8BAA8BxyB,IAAIhN,KAAK++B,WAAWM,gBAGjGr/B,KAAK++B,WAAW3yB,iB,gCAIb,YAAAqzB,WAAP,WACIz/B,KAAKwa,QAAU,KACfxa,KAAK8P,KAAO,MAOT,YAAAsC,UAAP,WAGI,OAFApS,KAAKk/B,OAASl/B,KAAK0/B,kBAEZ1/B,KAAKk/B,QAGR,YAAAQ,gBAAR,WACI,GAAkB,MAAd1/B,KAAKs/B,MACL,OAAOt/B,KAAK++B,WAAWxyB,MAAMozB,qBAAqB3/B,KAAKs/B,MAAMM,kBAAkBC,eAAeC,OAAQ9/B,KAAKs/B,MAAMS,kBAEhH,GAAqB,MAAjB//B,KAAKm/B,SACV,OAAO,IAAI,IAAQn/B,KAAKm/B,SAASvY,QAAS5mB,KAAKm/B,SAAStY,SAGxD,IAAIzmB,EAAYJ,KAAK++B,WAAWxyB,MAE5ByzB,EAAiBhgC,KAAKg/B,GAAG7+B,gBAAgBC,EAAMkD,OAAOlD,EAAK6/B,QAAQx/B,QACnEy/B,EAAiBlgC,KAAKi/B,GAAG9+B,gBAAgBC,EAAMkD,OAAOlD,EAAK6/B,QAAQv/B,SAEvE,OAAO,IAAI,IAAQs/B,EAAQE,IAK5B,YAAAxoB,QAAP,WACI1X,KAAKy/B,cAGb,EAhJA,GCHA,cAeI,WAAmBp4B,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAbX,EAAAy2B,WAAqB,EAqDtB,EAAAuB,cAAgB,WACnB,EAAKjzB,gBAtCL,EAAK1B,gBAAiB,EACtB,EAAKE,kBAAmB,EACxB,EAAK1C,qBAAuB,EAAQyG,0BACpC,EAAKtG,mBAAqB,EAAQwG,uBAElC,EAAKsvB,MAAQ,GACb,EAAKgC,QAAU,G,EAqOvB,OA7P+B,iBA4B3B,sBAAW,mBAAI,C,IAAf,WACI,OAAOngC,KAAKm+B,O,IAGhB,SAAgB1+B,GACRO,KAAKm+B,QAAU1+B,IAInBO,KAAKm+B,MAAQ1+B,EACbO,KAAKoM,iB,gCAQF,YAAAg0B,MAAP,SAAarwB,GAKT,OAJK/P,KAAKmgC,QAAQpwB,KACd/P,KAAKmgC,QAAQpwB,GAAS,IAAI,EAAe/P,OAGtCA,KAAKmgC,QAAQpwB,IAajB,YAAA/C,IAAP,W,IAAA,WAAW,kDACP,OAAOqzB,EAAMC,KAAI,SAAC/kB,GAAS,SAAKpL,KAAL,OAQxB,YAAAA,KAAP,SAAYoL,GACR,IAAIglB,EAAwBvgC,KAAKogC,MAAMpgC,KAAKmgC,QAAQv+B,QAEpD,OAAY,MAAR2Z,IAEAA,aAAgB,IAChBglB,EAAMzwB,KAAOyL,EAERA,aAAgB,EACrBglB,EAAM/lB,QAAUe,EAED,MAAVA,EAAK7X,GAAuB,MAAV6X,EAAK5X,IAC5B48B,EAAM78B,EAAI6X,EAAK7X,EACf68B,EAAM58B,EAAI4X,EAAK5X,IAVQ48B,GAoBxB,YAAAzzB,OAAP,SAAcrN,GACV,IAAIsQ,EAEJ,GAAItQ,aAAiB,GAGjB,IAAe,KAFfsQ,EAAQ/P,KAAKmgC,QAAQlwB,QAAQxQ,IAGzB,YAIJsQ,EAAQtQ,EAGZ,IAAI8gC,EAAkCvgC,KAAKmgC,QAAQpwB,GAE9CwwB,IAILA,EAAM7oB,UAEN1X,KAAKmgC,QAAQjwB,OAAOH,EAAO,KAMxB,YAAAywB,MAAP,WACI,KAAOxgC,KAAKmgC,QAAQv+B,OAAS,GACzB5B,KAAK8M,OAAO9M,KAAKmgC,QAAQv+B,OAAS,IAOnC,YAAA69B,WAAP,WACIz/B,KAAKmgC,QAAQM,SAAQ,SAACF,GACL,MAATA,GAAiBA,EAAMd,iBAKnC,sBAAW,wBAAS,C,IAApB,WACI,OAAOz/B,KAAK89B,Y,IAGhB,SAAqBr+B,GACbO,KAAK89B,aAAer+B,IAIxBO,KAAK89B,WAAar+B,EAClBO,KAAKoM,iB,gCAGT,sBAAW,kCAAmB,C,IAA9B,SAA+B3M,K,gCAI/B,sBAAW,gCAAiB,C,IAA5B,SAA6BA,K,gCAInB,YAAA4M,aAAV,WACI,MAAO,aAGJ,YAAAgJ,MAAP,SAAapD,EAAmC2C,GAC5C3C,EAAQU,QAEJ3S,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjCnR,KAAKiT,aAAahB,GAElBA,EAAQW,YAAc5S,KAAK8b,MAC3B7J,EAAQY,UAAY7S,KAAK89B,WACzB7rB,EAAQqsB,YAAYt+B,KAAKm+B,OAEzBlsB,EAAQ4C,YAER,IAAI6rB,GAAiB,EAErB1gC,KAAKmgC,QAAQM,SAAQ,SAACF,GACbA,IAIDG,GACAzuB,EAAQgK,OAAOskB,EAAMrB,OAAOx7B,EAAG68B,EAAMrB,OAAOv7B,GAE5C+8B,GAAQ,GAGRzuB,EAAQiK,OAAOqkB,EAAMrB,OAAOx7B,EAAG68B,EAAMrB,OAAOv7B,OAIpDsO,EAAQ8J,SAER9J,EAAQc,WAGF,YAAAoB,sBAAV,SAAgCV,EAAwBxB,GAAxD,WACIjS,KAAK2gC,MAAQ,KACb3gC,KAAK4gC,MAAQ,KACb5gC,KAAK6gC,MAAQ,KACb7gC,KAAK8gC,MAAQ,KAEb9gC,KAAKmgC,QAAQM,SAAQ,SAACF,EAAOxwB,GACpBwwB,IAILA,EAAMnuB,aAEY,MAAd,EAAKuuB,OAAiBJ,EAAMrB,OAAOx7B,EAAI,EAAKi9B,SAAS,EAAKA,MAAQJ,EAAMrB,OAAOx7B,IACjE,MAAd,EAAKk9B,OAAiBL,EAAMrB,OAAOv7B,EAAI,EAAKi9B,SAAS,EAAKA,MAAQL,EAAMrB,OAAOv7B,IACjE,MAAd,EAAKk9B,OAAiBN,EAAMrB,OAAOx7B,EAAI,EAAKm9B,SAAS,EAAKA,MAAQN,EAAMrB,OAAOx7B,IACjE,MAAd,EAAKo9B,OAAiBP,EAAMrB,OAAOv7B,EAAI,EAAKm9B,SAAS,EAAKA,MAAQP,EAAMrB,OAAOv7B,OAGrE,MAAd3D,KAAK2gC,QAAiB3gC,KAAK2gC,MAAQ,GACrB,MAAd3gC,KAAK4gC,QAAiB5gC,KAAK4gC,MAAQ,GACrB,MAAd5gC,KAAK6gC,QAAiB7gC,KAAK6gC,MAAQ,GACrB,MAAd7gC,KAAK8gC,QAAiB9gC,KAAK8gC,MAAQ,IAGpC,YAAA7sB,SAAP,WACsB,MAAdjU,KAAK2gC,OAA+B,MAAd3gC,KAAK6gC,OAA+B,MAAd7gC,KAAK4gC,OAA+B,MAAd5gC,KAAK8gC,QAI3E9gC,KAAKyH,gBAAgBhH,MAAQsC,KAAKyN,IAAIxQ,KAAK6gC,MAAQ7gC,KAAK2gC,OAAS3gC,KAAK89B,WACtE99B,KAAKyH,gBAAgB/G,OAASqC,KAAKyN,IAAIxQ,KAAK8gC,MAAQ9gC,KAAK4gC,OAAS5gC,KAAK89B,aAGjE,YAAA5pB,kBAAV,SAA4BT,EAAwBxB,GAC9B,MAAdjS,KAAK2gC,OAA+B,MAAd3gC,KAAK4gC,QAI/B5gC,KAAKyH,gBAAgBnF,KAAOtC,KAAK2gC,MAAQ3gC,KAAK89B,WAAa,EAC3D99B,KAAKyH,gBAAgBlF,IAAMvC,KAAK4gC,MAAQ5gC,KAAK89B,WAAa,IAGvD,YAAApmB,QAAP,WACI1X,KAAKwgC,QAEL,YAAM9oB,QAAO,YAErB,EA7PA,CAA+B,GA8P/B,IAAWgC,gBAAgB,yBAA2B,EC9PtD,kBA6FI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OA5FX,EAAAuiB,YAAa,EACb,EAAA/P,YAAc,QACd,EAAAgQ,gBAAkB,GAClB,EAAAnO,WAAa,EAiBd,EAAAqlB,MAAQ,GAGR,EAAAjX,6BAA+B,IAAI,IAwEtC,EAAKjf,kBAAmB,E,EAkGhC,OAlMiC,iBAO7B,sBAAW,wBAAS,C,IAApB,WACI,OAAO7K,KAAK0b,Y,IAGhB,SAAqBjc,GACbO,KAAK0b,aAAejc,IAIxBO,KAAK0b,WAAajc,EAClBO,KAAKoM,iB,gCAUT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK6pB,iB,IAGhB,SAA0BpqB,GACtBA,EAAQsD,KAAKG,IAAIH,KAAKC,IAAI,EAAGvD,GAAQ,GAEjCO,KAAK6pB,kBAAoBpqB,IAI7BO,KAAK6pB,gBAAkBpqB,EACvBO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAK4pB,Y,IAGhB,SAAqBnqB,GAArB,WACQO,KAAK4pB,aAAenqB,IAIxBO,KAAK4pB,WAAanqB,EAClBO,KAAKoM,eAELpM,KAAK8pB,6BAA6BzV,gBAAgB5U,GAE9CO,KAAK4pB,YAAc5pB,KAAKuM,OAExBvM,KAAKuM,MAAMy0B,sBAAqB,SAACxmB,GAC7B,GAAIA,IAAY,QAIaogB,IAAnBpgB,EAASumB,MAAnB,CAGA,IAAIE,EAA2BzmB,EAC3BymB,EAAWF,QAAU,EAAKA,QAC1BE,EAAW9W,WAAY,S,gCAgB7B,YAAA9d,aAAV,WACI,MAAO,eAGJ,YAAAgJ,MAAP,SAAapD,GACTA,EAAQU,OAER3S,KAAKiT,aAAahB,GAClB,IAAI8X,EAAc/pB,KAAKyH,gBAAgBhH,MAAQT,KAAK0b,WAChDsO,EAAehqB,KAAKyH,gBAAgB/G,OAASV,KAAK0b,WA4BtD,IA1BI1b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAIjC,EAAQkI,YAAYrZ,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,EAAGT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,EACrIV,KAAKyH,gBAAgBhH,MAAQ,EAAIT,KAAK0b,WAAa,EAAG1b,KAAKyH,gBAAgB/G,OAAS,EAAIV,KAAK0b,WAAa,EAAGzJ,GAEjHA,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK6Z,YAAc7Z,KAAKqK,eAC9D4H,EAAQ4J,QAEJ7b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAG5Bc,EAAQW,YAAc5S,KAAK8b,MAC3B7J,EAAQY,UAAY7S,KAAK0b,WAEzBzJ,EAAQ8J,SAGJ/b,KAAK4pB,WAAY,CACjB3X,EAAQmB,UAAYpT,KAAKoK,WAAapK,KAAK8b,MAAQ9b,KAAKqK,eACxD,IAAI4f,EAAcF,EAAc/pB,KAAK6pB,gBACjCK,EAAcF,EAAehqB,KAAK6pB,gBAEtC,EAAQxQ,YAAYrZ,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,EAAGT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,EACrIupB,EAAc,EAAIjqB,KAAK0b,WAAa,EAAGwO,EAAc,EAAIlqB,KAAK0b,WAAa,EAAGzJ,GAElFA,EAAQ4J,OAEZ5J,EAAQc,WAIL,YAAAsD,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,QAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,KAIrDjE,KAAKmqB,YACNnqB,KAAKmqB,WAAY,IAGd,IAWG,EAAA+W,yBAAd,SAAuC7W,EAAe0W,EAAe5W,EAAoBG,GACrF,IAAIC,EAAQ,IAAI,EAChBA,EAAMnB,YAAa,EACnBmB,EAAM7pB,OAAS,OAEf,IAAIygC,EAAQ,IAAIC,EAChBD,EAAM1gC,MAAQ,OACd0gC,EAAMzgC,OAAS,OACfygC,EAAMhX,UAAYA,EAClBgX,EAAMrlB,MAAQ,QACdqlB,EAAMJ,MAAQA,EACdI,EAAMrX,6BAA6B9c,KAAI,SAACvN,GAAU,OAAA6qB,EAAe6W,EAAf,MAClD5W,EAAM9P,WAAW0mB,GAEjB,IAAIzW,EAAS,IAAI,EAQjB,OAPAA,EAAOtS,KAAOiS,EACdK,EAAOjqB,MAAQ,QACfiqB,EAAOld,YAAc,MACrBkd,EAAOjC,wBAA0B,EAAQ9Z,0BACzC+b,EAAO5O,MAAQ,QACfyO,EAAM9P,WAAWiQ,GAEVH,GAEf,EAlMA,CAAiC,GAmMjC,IAAW7Q,gBAAgB,2BAA6B,ECrMxD,kBA+KI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OA9KT,EAAAg6B,YAAc,IAAIzhC,EAAa,GAAIA,EAAaC,gBAAgB,GAClE,EAAAyhC,SAAW,EACX,EAAAC,SAAW,IACX,EAAAzhC,OAAS,GACT,EAAAipB,aAAc,EACZ,EAAAyY,WAAa,IAAI5hC,EAAa,EAAGA,EAAaC,gBAAgB,GAChE,EAAA4hC,iBAAkB,EAChB,EAAAC,eAAgB,EAClB,EAAAC,MAAQ,EAER,EAAA3N,oBAAsB,EAGpB,EAAA4N,oBAAsB,EAUzB,EAAA3N,yBAA2B,IAAI,IAiP9B,EAAAC,gBAAiB,EAvFrB,EAAKrpB,kBAAmB,E,EA6IhC,OA/TgC,iBA2B5B,sBAAW,2BAAY,C,IAAvB,WACI,OAAO7K,KAAK0hC,e,IAGhB,SAAwBjiC,GAChBO,KAAK0hC,gBAAkBjiC,IAI3BO,KAAK0hC,cAAgBjiC,EACrBO,KAAKoM,iB,gCAIT,sBAAW,mBAAI,C,IAAf,WACI,OAAOpM,KAAK2hC,O,IAGhB,SAAgBliC,GACRO,KAAK2hC,QAAUliC,IAInBO,KAAK2hC,MAAQliC,EACbO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAKwhC,WAAWtgC,SAASlB,KAAKuM,Q,IAQzC,SAAqB9M,GACbO,KAAKwhC,WAAWtgC,SAASlB,KAAKuM,SAAW9M,GAIzCO,KAAKwhC,WAAWjgC,WAAW9B,IAC3BO,KAAKoM,gB,gCAVb,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAKwhC,WAAWrhC,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,gCAcjF,sBAAW,yBAAU,C,IAArB,WACI,OAAOT,KAAKqhC,YAAYngC,SAASlB,KAAKuM,Q,IAQ1C,SAAsB9M,GACdO,KAAKqhC,YAAYngC,SAASlB,KAAKuM,SAAW9M,GAI1CO,KAAKqhC,YAAY9/B,WAAW9B,IAC5BO,KAAKoM,gB,gCAVb,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOpM,KAAKqhC,YAAYlhC,gBAAgBH,KAAKuM,MAAOvM,KAAK2I,qBAAqBlI,Q,gCAclF,sBAAW,sBAAO,C,IAAlB,WACI,OAAOT,KAAKshC,U,IAGhB,SAAmB7hC,GACXO,KAAKshC,WAAa7hC,IAItBO,KAAKshC,SAAW7hC,EAChBO,KAAKoM,eAELpM,KAAKP,MAAQsD,KAAKG,IAAIH,KAAKC,IAAIhD,KAAKP,MAAOO,KAAKuhC,UAAWvhC,KAAKshC,Y,gCAIpE,sBAAW,sBAAO,C,IAAlB,WACI,OAAOthC,KAAKuhC,U,IAGhB,SAAmB9hC,GACXO,KAAKuhC,WAAa9hC,IAItBO,KAAKuhC,SAAW9hC,EAChBO,KAAKoM,eAELpM,KAAKP,MAAQsD,KAAKG,IAAIH,KAAKC,IAAIhD,KAAKP,MAAOO,KAAKuhC,UAAWvhC,KAAKshC,Y,gCAIpE,sBAAW,oBAAK,C,IAAhB,WACI,OAAOthC,KAAKF,Q,IAGhB,SAAiBL,GACbA,EAAQsD,KAAKG,IAAIH,KAAKC,IAAIvD,EAAOO,KAAKuhC,UAAWvhC,KAAKshC,UAElDthC,KAAKF,SAAWL,IAIpBO,KAAKF,OAASL,EACdO,KAAKoM,eACLpM,KAAKi0B,yBAAyB5f,gBAAgBrU,KAAKF,U,gCAIvD,sBAAW,yBAAU,C,IAArB,WACI,OAAOE,KAAK+oB,a,IAGhB,SAAsBtpB,GACdO,KAAK+oB,cAAgBtpB,IAIzBO,KAAK+oB,YAActpB,EACnBO,KAAKoM,iB,gCAIT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAKyhC,iB,IAGhB,SAA0BhiC,GAClBO,KAAKyhC,kBAAoBhiC,IAI7BO,KAAKyhC,gBAAkBhiC,EACvBO,KAAKoM,iB,gCAaC,YAAAC,aAAV,WACI,MAAO,cAGD,YAAAw1B,kBAAV,WACI,OAAI7hC,KAAKopB,YACIppB,KAAK8hC,QAAU9hC,KAAKP,QAAUO,KAAK8hC,QAAU9hC,KAAK+hC,SAAY/hC,KAAKgiC,sBAGvEhiC,KAAKP,MAAQO,KAAK+hC,UAAY/hC,KAAK8hC,QAAU9hC,KAAK+hC,SAAY/hC,KAAKgiC,sBAGtE,YAAAC,mBAAV,SAA6BvsB,GACzB,IAAIwsB,EAAiB,EACrB,OAAQxsB,GACJ,IAAK,SAEGwsB,EADAliC,KAAKqhC,YAAY/gC,QACAyC,KAAKG,IAAIlD,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAAQvM,KAAKmiC,yBAGrDniC,KAAKmiC,wBAA0BniC,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAEnF,MACJ,IAAK,YAEG21B,EADAliC,KAAKqhC,YAAY/gC,QACAyC,KAAKC,IAAIhD,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAAQvM,KAAKmiC,yBAGrDniC,KAAKmiC,wBAA0BniC,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAG3F,OAAO21B,GAGD,YAAAE,sBAAV,SAAgC1sB,GAE5B1V,KAAK4hC,oBAAsB,EAC3B5hC,KAAKqiC,YAAcriC,KAAKyH,gBAAgBnF,KACxCtC,KAAKsiC,WAAatiC,KAAKyH,gBAAgBlF,IACvCvC,KAAKuiC,aAAeviC,KAAKyH,gBAAgBhH,MACzCT,KAAKwiC,cAAgBxiC,KAAKyH,gBAAgB/G,OAE1CV,KAAKgiC,qBAAuBj/B,KAAKG,IAAIlD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QACtFV,KAAKmiC,wBAA0Bp/B,KAAKC,IAAIhD,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QACzFV,KAAKyiC,yBAA2BziC,KAAKiiC,mBAAmBvsB,GAEpD1V,KAAK0iC,eACL1iC,KAAKgiC,sBAAwBhiC,KAAKyiC,0BAGjCziC,KAAKopB,YAAcppB,KAAKyH,gBAAgB/G,OAASV,KAAKyH,gBAAgBhH,MACvEkiC,QAAQC,MAAM,wCAGd5iC,KAAKwhC,WAAWlhC,QAChBN,KAAK4hC,oBAAsB7+B,KAAKC,IAAIhD,KAAKwhC,WAAWjhC,SAASP,KAAKuM,OAAQvM,KAAKmiC,yBAG/EniC,KAAK4hC,oBAAsB5hC,KAAKmiC,wBAA0BniC,KAAKwhC,WAAWjhC,SAASP,KAAKuM,OAG5FvM,KAAKmiC,yBAAuD,EAA3BniC,KAAK4hC,oBAElC5hC,KAAKopB,YACLppB,KAAKqiC,aAAeriC,KAAK4hC,qBACpB5hC,KAAK6iC,gBAAkB7iC,KAAK0iC,eAC7B1iC,KAAKsiC,YAAetiC,KAAKyiC,yBAA2B,GAGxDziC,KAAKwiC,cAAgBxiC,KAAKgiC,qBAC1BhiC,KAAKuiC,aAAeviC,KAAKmiC,0BAIzBniC,KAAKsiC,YAActiC,KAAK4hC,qBACnB5hC,KAAK6iC,gBAAkB7iC,KAAK0iC,eAC7B1iC,KAAKqiC,aAAgBriC,KAAKyiC,yBAA2B,GAEzDziC,KAAKwiC,cAAgBxiC,KAAKmiC,wBAC1BniC,KAAKuiC,aAAeviC,KAAKgiC,wBAQvB,YAAA5L,wBAAV,SAAkC1yB,EAAWC,GAOzC,IAAIlE,EANiB,GAAjBO,KAAK8iC,WACL9iC,KAAKwJ,uBAAuB/F,qBAAqBC,EAAGC,EAAG3D,KAAKyJ,sBAC5D/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,GAK9BlE,EADAO,KAAK+oB,YACG/oB,KAAKshC,UAAY,GAAM39B,EAAI3D,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,SAAYV,KAAKuhC,SAAWvhC,KAAKshC,UAG7GthC,KAAKshC,UAAa59B,EAAI1D,KAAKyH,gBAAgBnF,MAAQtC,KAAKyH,gBAAgBhH,OAAUT,KAAKuhC,SAAWvhC,KAAKshC,UAGnH,IAAM9e,EAAQ,EAAIxiB,KAAK2hC,MAAS,EAChC3hC,KAAKP,MAAQO,KAAK2hC,OAAUliC,EAAQ+iB,EAAQ,GAAKA,EAAO/iB,GAGrD,YAAA4W,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAC5E,QAAK,YAAMoS,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,KAI1DjE,KAAKk0B,gBAAiB,EAEtBl0B,KAAKo2B,wBAAwBngB,EAAYvS,EAAGuS,EAAYtS,GACxD3D,KAAKuM,MAAM6kB,kBAAkBzb,GAAa3V,KAC1CA,KAAKg0B,mBAAqBre,GACnB,IAGJ,YAAAI,eAAP,SAAsBC,EAAiBC,EAAsBN,GAErDA,GAAa3V,KAAKg0B,qBAIlBh0B,KAAKk0B,gBACLl0B,KAAKo2B,wBAAwBngB,EAAYvS,EAAGuS,EAAYtS,GAG5D,YAAMoS,eAAc,UAACC,EAAQC,EAAaN,KAGvC,YAAAW,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmB1R,EAAqBsS,GAC/FvW,KAAKk0B,gBAAiB,SAEfl0B,KAAKuM,MAAM6kB,kBAAkBzb,GACpC,YAAMW,aAAY,UAACN,EAAQC,EAAaN,EAAW1R,EAAasS,IAExE,EA/TA,CAAgC,GCDhC,cAkEI,WAAmBlP,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAjEX,EAAAwS,YAAc,QACd,EAAAkpB,aAAe,QACf,EAAAC,gBAAiB,EACf,EAAAC,kBAAmB,E,EAsOjC,OA1O4B,iBAOxB,sBAAW,8BAAe,C,IAA1B,WACI,OAAOjjC,KAAKijC,kB,IAGhB,SAA2BxjC,GACnBO,KAAKijC,mBAAqBxjC,IAI9BO,KAAKijC,iBAAmBxjC,EACxBO,KAAKoM,iB,gCAIT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK+iC,c,IAGhB,SAAuBtjC,GACfO,KAAK+iC,eAAiBtjC,IAI1BO,KAAK+iC,aAAetjC,EACpBO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAKgjC,gB,IAGhB,SAAyBvjC,GACjBO,KAAKgjC,iBAAmBvjC,IAI5BO,KAAKgjC,eAAiBvjC,EACtBO,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,UAGJ,YAAAgJ,MAAP,SAAapD,EAAmC2C,GAC5C3C,EAAQU,OAER3S,KAAKiT,aAAahB,GAClBjS,KAAKoiC,sBAAsBpiC,KAAKkjC,cAAgB,SAAW,aAC3D,IAAI5gC,EAAOtC,KAAKqiC,YACZ9/B,EAAMvC,KAAKsiC,WACX7hC,EAAQT,KAAKuiC,aACb7hC,EAASV,KAAKwiC,cAEdxmB,EAAS,EAEThc,KAAK6iC,gBAAkB7iC,KAAKkjC,eACxBljC,KAAKopB,WACL7mB,GAAQvC,KAAKyiC,yBAA2B,EAGxCngC,GAAStC,KAAKyiC,yBAA2B,EAG7CzmB,EAAShc,KAAKmiC,wBAA0B,GAGxCnmB,GAAUhc,KAAKyiC,yBAA2BziC,KAAK4hC,qBAAuB,GAGtE5hC,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAGjC,IAAMgyB,EAAgBnjC,KAAK6hC,oBAC3B5vB,EAAQmB,UAAYpT,KAAK6Z,YAErB7Z,KAAKopB,WACDppB,KAAK6iC,eACD7iC,KAAKkjC,eACLjxB,EAAQ4C,YACR5C,EAAQqH,IAAIhX,EAAOtC,KAAKmiC,wBAA0B,EAAG5/B,EAAKyZ,EAAQjZ,KAAKwW,GAAI,EAAIxW,KAAKwW,IACpFtH,EAAQ4J,OACR5J,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,IAGnCuR,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,EAASV,KAAKyiC,0BAIrDxwB,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,GAInCV,KAAK6iC,eACD7iC,KAAKkjC,eACLjxB,EAAQ4C,YACR5C,EAAQqH,IAAIhX,EAAOtC,KAAKgiC,qBAAsBz/B,EAAOvC,KAAKmiC,wBAA0B,EAAInmB,EAAQ,EAAG,EAAIjZ,KAAKwW,IAC5GtH,EAAQ4J,OACR5J,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,IAGnCuR,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAQT,KAAKyiC,yBAA0B/hC,GAIvEuR,EAAQ+I,SAAS1Y,EAAMC,EAAK9B,EAAOC,IAIvCV,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAI5Bc,EAAQmB,UAAYpT,KAAK8b,MACrB9b,KAAKijC,mBACDjjC,KAAKopB,WACDppB,KAAK6iC,eACD7iC,KAAKkjC,eACLjxB,EAAQ4C,YACR5C,EAAQqH,IAAIhX,EAAOtC,KAAKmiC,wBAA0B,EAAG5/B,EAAMvC,KAAKgiC,qBAAsBhmB,EAAQ,EAAG,EAAIjZ,KAAKwW,IAC1GtH,EAAQ4J,OACR5J,EAAQ+I,SAAS1Y,EAAMC,EAAM4gC,EAAe1iC,EAAOC,EAASyiC,IAG5DlxB,EAAQ+I,SAAS1Y,EAAMC,EAAM4gC,EAAe1iC,EAAOC,EAASyiC,EAAgBnjC,KAAKyiC,0BAIrFxwB,EAAQ+I,SAAS1Y,EAAMC,EAAM4gC,EAAe1iC,EAAOC,EAASyiC,GAI5DnjC,KAAK6iC,gBACD7iC,KAAKkjC,eACLjxB,EAAQ4C,YACR5C,EAAQqH,IAAIhX,EAAMC,EAAMvC,KAAKmiC,wBAA0B,EAAGnmB,EAAQ,EAAG,EAAIjZ,KAAKwW,IAC9EtH,EAAQ4J,OACR5J,EAAQ+I,SAAS1Y,EAAMC,EAAK4gC,EAAeziC,IAO/CuR,EAAQ+I,SAAS1Y,EAAMC,EAAK4gC,EAAeziC,IAMnDV,KAAK0iC,gBACD1iC,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQ8I,YAAc/a,KAAK+a,YAC3B9I,EAAQhB,WAAajR,KAAKiR,WAC1BgB,EAAQf,cAAgBlR,KAAKkR,cAC7Be,EAAQd,cAAgBnR,KAAKmR,eAE7BnR,KAAKgjC,gBACL/wB,EAAQ4C,YACJ7U,KAAKopB,WACLnX,EAAQqH,IAAIhX,EAAOtC,KAAKmiC,wBAA0B,EAAG5/B,EAAM4gC,EAAennB,EAAQ,EAAG,EAAIjZ,KAAKwW,IAG9FtH,EAAQqH,IAAIhX,EAAO6gC,EAAe5gC,EAAOvC,KAAKmiC,wBAA0B,EAAInmB,EAAQ,EAAG,EAAIjZ,KAAKwW,IAEpGtH,EAAQ4J,QACJ7b,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAE5Bc,EAAQW,YAAc5S,KAAK+iC,aAC3B9wB,EAAQ8J,WAGJ/b,KAAKopB,WACLnX,EAAQ+I,SAAS1Y,EAAOtC,KAAK4hC,oBAAqB5hC,KAAKyH,gBAAgBlF,IAAM4gC,EAAenjC,KAAKyH,gBAAgBhH,MAAOT,KAAKyiC,0BAG7HxwB,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAO6gC,EAAenjC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyiC,yBAA0BziC,KAAKyH,gBAAgB/G,SAE1IV,KAAKiR,YAAcjR,KAAKkR,eAAiBlR,KAAKmR,iBAC9Cc,EAAQhB,WAAa,EACrBgB,EAAQf,cAAgB,EACxBe,EAAQd,cAAgB,GAE5Bc,EAAQW,YAAc5S,KAAK+iC,aACvB/iC,KAAKopB,WACLnX,EAAQe,WAAW1Q,EAAOtC,KAAK4hC,oBAAqB5hC,KAAKyH,gBAAgBlF,IAAM4gC,EAAenjC,KAAKyH,gBAAgBhH,MAAOT,KAAKyiC,0BAG/HxwB,EAAQe,WAAWhT,KAAKyH,gBAAgBnF,KAAO6gC,EAAenjC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyiC,yBAA0BziC,KAAKyH,gBAAgB/G,UAIxJuR,EAAQc,WAEhB,EA1OA,CAA4B,GA2O5B,IAAW2G,gBAAgB,sBAAwB,ECvOnD,iBASI,WAEWrS,GAAA,KAAAA,OAVH,KAAA+7B,YAAc,IAAI,EAClB,KAAAC,WAA2B,IAAIzzB,MAWnC5P,KAAKojC,YAAYx0B,kBAAoB,EAAQC,uBAC7C7O,KAAKojC,YAAY10B,oBAAsB,EAAQC,0BAC/C3O,KAAKsjC,aAAetjC,KAAKujC,gBAAgBl8B,GA2DjD,OAvDI,sBAAW,yBAAU,C,IAArB,WACI,OAAOrH,KAAKojC,a,gCAIhB,sBAAW,wBAAS,C,IAApB,WACI,OAAOpjC,KAAKqjC,Y,gCAIhB,sBAAW,qBAAM,C,IAAjB,WACI,OAAOrjC,KAAKsjC,aAAalrB,M,IAG7B,SAAkBorB,GACiB,UAA3BxjC,KAAKsjC,aAAalrB,OAItBpY,KAAKsjC,aAAalrB,KAAOorB,I,gCAIrB,YAAAD,gBAAR,SAAwBnrB,GACpB,IAAIqrB,EAAe,IAAI,EAAU,YAAarrB,GAS9C,OARAqrB,EAAahjC,MAAQ,GACrBgjC,EAAa/iC,OAAS,OACtB+iC,EAAajb,cAAe,EAC5Bib,EAAa3nB,MAAQ,QACrB2nB,EAAa/0B,oBAAsB,EAAQC,0BAC3C80B,EAAahb,wBAA0B,EAAQ9Z,0BAC/C80B,EAAanhC,KAAO,MACpBtC,KAAKojC,YAAY3oB,WAAWgpB,GACrBA,GAIJ,YAAAC,aAAP,SAAoBC,GAChB,KAAIA,EAAa,GAAKA,GAAc3jC,KAAKqjC,WAAWzhC,QAGpD,OAAO5B,KAAKqjC,WAAWM,IAMpB,YAAAC,eAAP,SAAsBD,GACdA,EAAa,GAAKA,GAAc3jC,KAAKqjC,WAAWzhC,SAGpD5B,KAAKojC,YAAYxrB,cAAc5X,KAAKqjC,WAAWM,IAC/C3jC,KAAKqjC,WAAWnzB,OAAOyzB,EAAY,KAG3C,EA1EA,GA+EA,2B,+CAqDA,OArDmC,iBAMxB,YAAAE,YAAP,SAAmBzrB,EAAc0rB,EAA4BC,QAA5B,IAAAD,MAAA,SAAQ19B,WAAoB,IAAA29B,OAAA,GACrDA,EAAUA,IAAW,EAAzB,IACIlJ,EAAS,IAAI,EACjBA,EAAOp6B,MAAQ,OACfo6B,EAAOn6B,OAAS,OAChBm6B,EAAO/e,MAAQ,UACf+e,EAAOrB,WAAa,UACpBqB,EAAOnsB,oBAAsB,EAAQC,0BAErCksB,EAAO/Q,6BAA6B9c,KAAI,SAASg3B,GAC7CF,EAAKE,MAGT,IAAIC,EAAY,EAAQxqB,UAAUohB,EAAQziB,EAAM,QAAS,CAAE8rB,cAAc,EAAMC,cAAc,IAC7FF,EAAUvjC,OAAS,OACnBujC,EAAUv1B,oBAAsB,EAAQC,0BACxCs1B,EAAU3hC,KAAO,MAEjBtC,KAAKokC,WAAW3pB,WAAWwpB,GAC3BjkC,KAAKqkC,UAAUl0B,KAAK8zB,GACpBpJ,EAAO1Q,UAAY4Z,EAEf/jC,KAAKokC,WAAW/2B,QAAUrN,KAAKokC,WAAW/2B,OAAOA,SACjDwtB,EAAO/e,MAAyB9b,KAAKokC,WAAW/2B,OAAOA,OAAQi3B,YAC/DzJ,EAAOrB,WAA8Bx5B,KAAKokC,WAAW/2B,OAAOA,OAAQk3B,mBAKrE,YAAAC,kBAAP,SAAyBb,EAAoBH,GAC7BxjC,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI9B,KAAOorB,GAIxD,YAAAiB,uBAAP,SAA8Bd,EAAoB7nB,GAClC9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI4B,MAAQA,GAIzD,YAAA4oB,wBAAP,SAA+Bf,EAAoB7nB,GAC/C9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAG4B,MAAQA,GAI5C,YAAA6oB,6BAAP,SAAoChB,EAAoB7nB,GACzC9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAIsf,WAAa1d,GAExE,EArDA,CAAmC,GA0DnC,yE,OACY,EAAA8oB,UAAY,E,EAyDxB,OA1DgC,iBAQrB,YAAAC,SAAP,SAAgBrB,EAAeM,EAA2BC,QAA3B,IAAAD,MAAA,SAAQjlB,WAAmB,IAAAklB,OAAA,GACtD,IAAIe,EAAK9kC,KAAK4kC,YACV/J,EAAS,IAAI,EACjBA,EAAOxzB,KAAOm8B,EACd3I,EAAOp6B,MAAQ,OACfo6B,EAAOn6B,OAAS,OAChBm6B,EAAO/e,MAAQ,UACf+e,EAAOrB,WAAa,UACpBqB,EAAOkG,MAAQ/gC,KAAKqH,KACpBwzB,EAAOnsB,oBAAsB,EAAQC,0BAErCksB,EAAO/Q,6BAA6B9c,KAAI,SAASg3B,GACzCA,GACAF,EAAKgB,MAIb,IAAIb,EAAY,EAAQxqB,UAAUohB,EAAQ2I,EAAO,QAAS,CAAEU,cAAc,EAAMC,cAAc,IAC9FF,EAAUvjC,OAAS,OACnBujC,EAAUv1B,oBAAsB,EAAQC,0BACxCs1B,EAAU3hC,KAAO,MACjBtC,KAAKokC,WAAW3pB,WAAWwpB,GAC3BjkC,KAAKqkC,UAAUl0B,KAAK8zB,GACpBpJ,EAAO1Q,UAAY4Z,EAEf/jC,KAAKokC,WAAW/2B,QAAUrN,KAAKokC,WAAW/2B,OAAOA,SACjDwtB,EAAO/e,MAAyB9b,KAAKokC,WAAW/2B,OAAOA,OAAQi3B,YAC/DzJ,EAAOrB,WAA8Bx5B,KAAKokC,WAAW/2B,OAAOA,OAAQk3B,mBAKrE,YAAAC,kBAAP,SAAyBb,EAAoBH,GAC7BxjC,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI9B,KAAOorB,GAIxD,YAAAiB,uBAAP,SAA8Bd,EAAoB7nB,GAClC9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI4B,MAAQA,GAIzD,YAAA4oB,wBAAP,SAA+Bf,EAAoB7nB,GAC/C9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAG4B,MAAQA,GAI5C,YAAA6oB,6BAAP,SAAoChB,EAAoB7nB,GACtC9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAIsf,WAAa1d,GAE3E,EA1DA,CAAgC,GA+DhC,2B,+CAiEA,OAjEiC,iBAWtB,YAAAipB,UAAP,SAAiBvB,EAAeM,EAA2BpkC,EAAwBsD,EAAiBE,EAAiBzD,EAAmBulC,QAAxG,IAAAlB,MAAA,SAAQmB,WAAmB,IAAAvlC,MAAA,cAAwB,IAAAsD,MAAA,QAAiB,IAAAE,MAAA,QAAiB,IAAAzD,MAAA,QAAmB,IAAAulC,MAAA,SAAiBC,GAAgB,OAAW,EAAJA,IAC5K,IAAIpK,EAAS,IAAI,EACjBA,EAAOxzB,KAAO3H,EACdm7B,EAAOp7B,MAAQA,EACfo7B,EAAOkH,QAAU/+B,EACjB63B,EAAOiH,QAAU5+B,EACjB23B,EAAOp6B,MAAQ,GACfo6B,EAAOn6B,OAAS,OAChBm6B,EAAO/e,MAAQ,UACf+e,EAAOrB,WAAa,UACpBqB,EAAOqK,YAAc,QACrBrK,EAAOnsB,oBAAsB,EAAQC,0BACrCksB,EAAOv4B,KAAO,MACdu4B,EAAOltB,cAAgB,MAEvBktB,EAAO5G,yBAAyBjnB,KAAI,SAASvN,GAC7Bo7B,EAAOxtB,OAAQ6M,SAAS,GAAI9B,KAAOyiB,EAAOxtB,OAAQ6M,SAAS,GAAG7S,KAAO,KAAO29B,EAAcvlC,GAAS,IAAMo7B,EAAOxzB,KAC5Hy8B,EAAKrkC,MAGT,IAAIwkC,EAAY,EAAQxqB,UAAUohB,EAAQ2I,EAAQ,KAAOwB,EAAcvlC,GAAS,IAAMC,EAAM,OAAQ,CAAEwkC,cAAc,EAAOC,cAAc,IACzIF,EAAUvjC,OAAS,OACnBujC,EAAUv1B,oBAAsB,EAAQC,0BACxCs1B,EAAU3hC,KAAO,MACjB2hC,EAAU/pB,SAAS,GAAG7S,KAAOm8B,EAC7BxjC,KAAKokC,WAAW3pB,WAAWwpB,GAC3BjkC,KAAKqkC,UAAUl0B,KAAK8zB,GAEhBjkC,KAAKokC,WAAW/2B,QAAUrN,KAAKokC,WAAW/2B,OAAOA,SACjDwtB,EAAO/e,MAAyB9b,KAAKokC,WAAW/2B,OAAOA,OAAQi3B,YAC/DzJ,EAAOrB,WAA8Bx5B,KAAKokC,WAAW/2B,OAAOA,OAAQk3B,mBAKrE,YAAAC,kBAAP,SAAyBb,EAAoBH,GACzCxjC,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAG7S,KAAOm8B,EAClCxjC,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI9B,KAAOorB,EAAQ,KAAgBxjC,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAIza,MAAQ,IAAMO,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAG7S,MAI7K,YAAAo9B,uBAAP,SAA8Bd,EAAoB7nB,GAClC9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAI4B,MAAQA,GAIzD,YAAA4oB,wBAAP,SAA+Bf,EAAoB7nB,GAC/C9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAG4B,MAAQA,GAI5C,YAAA6oB,6BAAP,SAAoChB,EAAoB7nB,GAC3C9b,KAAKqkC,UAAUV,GAAYzpB,SAAS,GAAIsf,WAAa1d,GAEtE,EAjEA,CAAiC,GAsEjC,cAiBI,WAEWzU,EAEA89B,QAAA,IAAAA,MAAA,IAJX,MAKI,YAAM99B,IAAK,KASX,GAZO,EAAAA,OAEA,EAAA89B,SAnBH,EAAAC,aAAuB,UACvB,EAAAC,kBAA4B,UAC5B,EAAAC,aAAuB,QACvB,EAAAC,UAAoB,QACpB,EAAAC,WAAqB,MACrB,EAAAC,cAAwB,OAGxB,EAAAC,MAAe,IAAI91B,MAavB,EAAK+1B,QAAUR,EACf,EAAKxd,UAAY,EACjB,EAAKie,OAAS,IAAI,EAClB,EAAKA,OAAOh3B,kBAAoB,EAAQC,uBACxC,EAAK+2B,OAAOl3B,oBAAsB,EAAQC,0BAC1C,EAAKi3B,OAAOrjC,IAAM,EAClB,EAAKqjC,OAAOtjC,KAAO,EACnB,EAAKsjC,OAAOnlC,MAAQ,IAChB0kC,EAAOvjC,OAAS,EAAG,CACnB,IAAK,IAAI4B,EAAI,EAAGA,EAAI2hC,EAAOvjC,OAAS,EAAG4B,IACnC,EAAKoiC,OAAOnrB,WAAW0qB,EAAO3hC,GAAG4gC,YACjC,EAAKyB,aAET,EAAKD,OAAOnrB,WAAW0qB,EAAOA,EAAOvjC,OAAS,GAAGwiC,Y,OAErD,EAAK3pB,WAAW,EAAKmrB,Q,EAwS7B,OA9UoC,iBAyCtB,YAAAv5B,aAAV,WACI,MAAO,kBAIX,sBAAW,0BAAW,C,IAAtB,WACI,OAAOrM,KAAKslC,c,IAGhB,SAAuBxpB,GACf9b,KAAKslC,eAAiBxpB,IAG1B9b,KAAKslC,aAAexpB,EACpB9b,KAAK8lC,oB,gCAID,YAAAA,gBAAR,WACI,IAAK,IAAItiC,EAAI,EAAGA,EAAIxD,KAAK2lC,QAAQ/jC,OAAQ4B,IACrCxD,KAAK2lC,QAAQniC,GAAG4gC,WAAWlqB,SAAS,GAAG4B,MAAQ9b,KAAKslC,cAK5D,sBAAW,0BAAW,C,IAAtB,WACI,OAAOtlC,KAAKolC,c,IAGhB,SAAuBtpB,GACf9b,KAAKolC,eAAiBtpB,IAI1B9b,KAAKolC,aAAetpB,EACpB9b,KAAK+lC,oB,gCAID,YAAAA,gBAAR,WACI,IAAK,IAAIviC,EAAI,EAAGA,EAAIxD,KAAK2lC,QAAQ/jC,OAAQ4B,IACrC,IAAK,IAAIwiC,EAAI,EAAGA,EAAIhmC,KAAK2lC,QAAQniC,GAAG6gC,UAAUziC,OAAQokC,IACPhmC,KAAK2lC,QAAQniC,GAAIkhC,wBAAwBsB,EAAGhmC,KAAKolC,eAMxG,sBAAW,yBAAU,C,IAArB,WACI,OAAOplC,KAAKimC,a,IAGhB,SAAsBnqB,GACd9b,KAAKimC,cAAgBnqB,IAGzB9b,KAAKimC,YAAcnqB,EACnB9b,KAAKkmC,mB,gCAGD,YAAAA,eAAR,WACI,IAAK,IAAI1iC,EAAI,EAAGA,EAAIxD,KAAK2lC,QAAQ/jC,OAAQ4B,IACrC,IAAK,IAAIwiC,EAAI,EAAGA,EAAIhmC,KAAK2lC,QAAQniC,GAAG6gC,UAAUziC,OAAQokC,IACPhmC,KAAK2lC,QAAQniC,GAAIihC,uBAAuBuB,EAAGhmC,KAAKimC,cAMvG,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOjmC,KAAKqlC,mB,IAGhB,SAA4BvpB,GACpB9b,KAAKqlC,oBAAsBvpB,IAI/B9b,KAAKqlC,kBAAoBvpB,EACzB9b,KAAKmmC,yB,gCAID,YAAAA,qBAAR,WACI,IAAK,IAAI3iC,EAAI,EAAGA,EAAIxD,KAAK2lC,QAAQ/jC,OAAQ4B,IACrC,IAAK,IAAIwiC,EAAI,EAAGA,EAAIhmC,KAAK2lC,QAAQniC,GAAG6gC,UAAUziC,OAAQokC,IACPhmC,KAAK2lC,QAAQniC,GAAImhC,6BAA6BqB,EAAGhmC,KAAKqlC,oBAM7G,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOrlC,KAAKulC,W,IAGhB,SAAoBzpB,GACZ9b,KAAKulC,YAAczpB,IAIvB9b,KAAKulC,UAAYzpB,EACjB9b,KAAKomC,iB,gCAGD,YAAAA,aAAR,WACI,IAAK,IAAI5iC,EAAI,EAAGA,EAAIxD,KAAK0lC,MAAM9jC,OAAQ4B,IACnCxD,KAAK0lC,MAAMliC,GAAG0W,SAAS,GAAGsf,WAAax5B,KAAKulC,WAKpD,sBAAW,wBAAS,C,IAApB,WACI,OAAOvlC,KAAKwlC,Y,IAGhB,SAAqB/lC,GACbO,KAAKwlC,aAAe/lC,IAIxBO,KAAKwlC,WAAa/lC,EAClBO,KAAKqmC,kB,gCAGD,YAAAA,cAAR,WACI,IAAK,IAAI7iC,EAAI,EAAGA,EAAIxD,KAAK0lC,MAAM9jC,OAAQ4B,IACnCxD,KAAK0lC,MAAMliC,GAAG0W,SAAS,GAAGxZ,OAASV,KAAKwlC,YAKhD,sBAAW,2BAAY,C,IAAvB,WACI,OAAOxlC,KAAKylC,e,IAGhB,SAAwBhmC,GAChBO,KAAKylC,gBAAkBhmC,IAI3BO,KAAKylC,cAAgBhmC,EACrBO,KAAKsmC,qB,gCAGD,YAAAA,iBAAR,WACI,IAAK,IAAI9iC,EAAI,EAAGA,EAAIxD,KAAK0lC,MAAM9jC,OAAQ4B,IACnCxD,KAAK0lC,MAAMliC,GAAG9C,OAASV,KAAKylC,eAK5B,YAAAI,WAAR,WACI,IAAIU,EAAY,IAAI,EACpBA,EAAU9lC,MAAQ,EAClB8lC,EAAU7lC,OAASV,KAAKylC,cACxBc,EAAU73B,oBAAsB,EAAQC,0BAExC,IAAI63B,EAAM,IAAI,EACdA,EAAI/lC,MAAQ,EACZ+lC,EAAI9lC,OAASV,KAAKwlC,WAClBgB,EAAI93B,oBAAsB,EAAQC,0BAClC63B,EAAI53B,kBAAoB,EAAQtG,0BAChCk+B,EAAIhN,WAAax5B,KAAKulC,UACtBiB,EAAI1qB,MAAQ,cACZyqB,EAAU9rB,WAAW+rB,GAErBxmC,KAAK4lC,OAAOnrB,WAAW8rB,GACvBvmC,KAAK0lC,MAAMv1B,KAAKo2B,IAMb,YAAAE,SAAP,SAAgB1F,GACR/gC,KAAK2lC,QAAQ/jC,OAAS,GACtB5B,KAAK6lC,aAET7lC,KAAK4lC,OAAOnrB,WAAWsmB,EAAMqD,YAC7BpkC,KAAK2lC,QAAQx1B,KAAK4wB,GAClBA,EAAMqD,WAAWlqB,SAAS,GAAG4B,MAAQ9b,KAAKslC,aAC1C,IAAK,IAAIU,EAAI,EAAGA,EAAIjF,EAAMsD,UAAUziC,OAAQokC,IACGjF,EAAO2D,wBAAwBsB,EAAGhmC,KAAKolC,cACvCrE,EAAO4D,6BAA6BqB,EAAGhmC,KAAKqlC,oBAOxF,YAAAqB,YAAP,SAAmBC,GACf,KAAIA,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,QAA3C,CAGA,IAAIm/B,EAAQ/gC,KAAK2lC,QAAQgB,GACzB3mC,KAAK4lC,OAAOhuB,cAAcmpB,EAAMqD,YAChCpkC,KAAK2lC,QAAQz1B,OAAOy2B,EAAS,GACzBA,EAAU3mC,KAAK0lC,MAAM9jC,SACrB5B,KAAK4lC,OAAOhuB,cAAc5X,KAAK0lC,MAAMiB,IACrC3mC,KAAK0lC,MAAMx1B,OAAOy2B,EAAS,MAQ5B,YAAAC,cAAP,SAAqBpD,EAAemD,GAC5BA,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,SAG/B5B,KAAK2lC,QAAQgB,GACPvC,WAAWlqB,SAAS,GAAI9B,KAAOorB,IAQ9C,YAAAqD,QAAP,SAAerD,EAAemD,EAAiBhD,GAC3C,KAAIgD,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,QAA3C,CAGA,IAAIm/B,EAAQ/gC,KAAK2lC,QAAQgB,GACrBhD,EAAa,GAAKA,GAAc5C,EAAMsD,UAAUziC,QAGTm/B,EAAOyD,kBAAkBb,EAAYH,KAO7E,YAAAsD,wBAAP,SAA+BH,EAAiBhD,GAC5C,KAAIgD,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,QAA3C,CAGA,IAAIm/B,EAAQ/gC,KAAK2lC,QAAQgB,GACrBhD,EAAa,GAAKA,GAAc5C,EAAMsD,UAAUziC,QAGpDm/B,EAAM6C,eAAeD,KASlB,YAAAoD,mBAAP,SAA0BJ,EAAiBnD,EAAeM,EAAkBC,SAAlB,IAAAD,MAAA,mBAAkB,IAAAC,OAAA,GACpE4C,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,SAG/B5B,KAAK2lC,QAAQgB,GACF9C,YAAYL,EAAOM,EAAMC,IAS7C,YAAAiD,gBAAP,SAAuBL,EAAiBnD,EAAeM,EAAkBC,SAAlB,IAAAD,MAAA,mBAAkB,IAAAC,OAAA,GACjE4C,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,SAG/B5B,KAAK2lC,QAAQgB,GACL9B,SAASrB,EAAOM,EAAMC,IAcvC,YAAAkD,iBAAP,SAAwBN,EAAiBnD,EAAeM,EAAkBpkC,EAAwBsD,EAAiBE,EAAiBzD,EAAmBynC,SAA/F,IAAApD,MAAA,mBAAkB,IAAApkC,MAAA,cAAwB,IAAAsD,MAAA,QAAiB,IAAAE,MAAA,QAAiB,IAAAzD,MAAA,QAAmB,IAAAynC,MAAA,SAASjC,GAAgB,OAAW,EAAJA,IAC/K0B,EAAU,GAAKA,GAAW3mC,KAAK2lC,QAAQ/jC,SAG/B5B,KAAK2lC,QAAQgB,GACJ5B,UAAUvB,EAAOM,EAAMpkC,EAAMsD,EAAKE,EAAKzD,EAAOynC,IAG3E,EA9UA,CAAoC,GCjRpC,cAiJI,WAAY7/B,GAAZ,MACI,YAAMA,IAAK,K,OA9IP,EAAA8/B,iBAAkB,EA0ClB,EAAAC,aAAuB,EACvB,EAAAC,cAAwB,EACxB,EAAAC,SAA8C,G,EAkP1D,OAlSyC,iBASrC,sBAAW,6BAAc,C,IAAzB,WACI,OAAOtnC,KAAKmnC,iB,IAGhB,SAA0B1nC,GACtB,GAAIO,KAAKmnC,kBAAoB1nC,EAA7B,CAKAO,KAAKmnC,iBAAkB,EAEvB,IAAII,EAAcvnC,KAAKI,KAAKQ,UACxB4mC,EAAcD,EAAY9mC,MAC1BgnC,EAAeF,EAAY7mC,OAE3BuR,EAAUjS,KAAKI,KAAK+e,aAEpBuoB,EAAU,IAAI1jC,EAAQ,EAAG,EAAGwjC,EAAaC,GAE7CznC,KAAKI,KAAKwT,gBAAkB,EAE5B5T,KAAKI,KAAKqO,eAAe+E,QAAQk0B,EAASz1B,GAGtCxS,IACAO,KAAK2nC,kBACD3nC,KAAK4nC,eACL5nC,KAAK6nC,gBAIb7nC,KAAKmnC,gBAAkB1nC,EAEvBO,KAAKI,KAAKqR,gB,gCAQd,sBAAW,0BAAW,C,IAAtB,WACI,OAAOzR,KAAKonC,c,gCAGhB,sBAAW,2BAAY,C,IAAvB,WACI,OAAOpnC,KAAKqnC,e,gCAGT,YAAAS,eAAP,SAAsBrnC,EAAeC,GACjCV,KAAKonC,aAAe3mC,EACpBT,KAAKqnC,cAAgB3mC,EAEjBV,KAAK4nC,cACD5nC,KAAKmnC,iBACLnnC,KAAK6nC,eAGT7nC,KAAKsnC,SAAW,IAIhB,YAAAM,YAAR,WACI,OAAO5nC,KAAKonC,aAAe,GAAKpnC,KAAKqnC,cAAgB,GAGjD,YAAAQ,aAAR,WACI7nC,KAAKsnC,SAAW,GAChBtnC,KAAK+nC,WAAahlC,KAAKc,KAAK7D,KAAKkf,cAAgBlf,KAAKonC,cACtDpnC,KAAKgoC,mBAAmBhoC,KAAK2Z,YAGzB,YAAAquB,mBAAR,SAA2B9tB,GACvB,IAAK,IAAI1W,EAAI,EAAGA,EAAI0W,EAAStY,SAAU4B,EAAG,CAQtC,IAPA,IAAI4W,EAAQF,EAAS1W,GAEjBykC,EAAUllC,KAAKG,IAAI,EAAGH,KAAKa,OAAOwW,EAAM3S,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBnF,MAAQtC,KAAKonC,eACjGc,EAAQnlC,KAAKa,OAAOwW,EAAM3S,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBnF,KAAO8X,EAAM3S,gBAAgBhH,MAAQ,GAAKT,KAAKonC,cACrHe,EAAUplC,KAAKG,IAAI,EAAGH,KAAKa,OAAOwW,EAAM3S,gBAAgBlF,IAAMvC,KAAKyH,gBAAgBlF,KAAOvC,KAAKqnC,gBAC/Fe,EAAQrlC,KAAKa,OAAOwW,EAAM3S,gBAAgBlF,IAAMvC,KAAKyH,gBAAgBlF,IAAM6X,EAAM3S,gBAAgB/G,OAAS,GAAKV,KAAKqnC,eAEjHc,GAAWC,GAAO,CACrB,IAAK,IAAI1kC,EAAIukC,EAASvkC,GAAKwkC,IAASxkC,EAAG,CACnC,IAAI2kC,EAASF,EAAUnoC,KAAK+nC,WAAarkC,EACrC4kC,EAAOtoC,KAAKsnC,SAASe,GAEpBC,IACDA,EAAO,GACPtoC,KAAKsnC,SAASe,GAAUC,GAG5BA,EAAKn4B,KAAKiK,GAEd+tB,IAGA/tB,aAAiB,GAAaA,EAAMT,UAAU/X,OAAS,GACvD5B,KAAKgoC,mBAAmB5tB,EAAMT,aAMlC,YAAAguB,gBAAR,WACI,IAAIrlC,EAA2B,EAApBtC,KAAKuoC,aACZhmC,EAAyB,EAAnBvC,KAAKwoC,YAEfxoC,KAAK4Z,oBAAoBtX,MAAQA,EACjCtC,KAAK4Z,oBAAoBrX,KAAOA,EAChCvC,KAAKyH,gBAAgBnF,MAAQA,EAC7BtC,KAAKyH,gBAAgBlF,KAAOA,EAE5BvC,KAAKyoC,wBAAwBzoC,KAAK2Z,UAAWrX,EAAMC,IAG/C,YAAAkmC,wBAAR,SAAgCvuB,EAAqB5X,EAAcC,GAC/D,IAAK,IAAIiB,EAAI,EAAGA,EAAI0W,EAAStY,SAAU4B,EAAG,CACtC,IAAI4W,EAAQF,EAAS1W,GAErB4W,EAAM3S,gBAAgBnF,MAAQA,EAC9B8X,EAAM3S,gBAAgBlF,KAAOA,EAE7B6X,EAAM5P,YAAYk+B,UAAYtuB,EAAM3S,gBAAgBnF,KACpD8X,EAAM5P,YAAYm+B,SAAWvuB,EAAM3S,gBAAgBlF,IAE/C6X,aAAiB,GAAaA,EAAMT,UAAU/X,OAAS,GACvD5B,KAAKyoC,wBAAwBruB,EAAMT,UAAWrX,EAAMC,KAatD,YAAA8J,aAAV,WACI,MAAO,sBAID,YAAA8H,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK4oC,eAAiBn1B,EAEtBzT,KAAK4Z,oBAAoBtX,KAAOtC,KAAKyH,gBAAgBnF,KACrDtC,KAAK4Z,oBAAoBrX,IAAMvC,KAAKyH,gBAAgBlF,IAEpDvC,KAAK4Z,oBAAoBnZ,MAAQgT,EAAchT,MAC/CT,KAAK4Z,oBAAoBlZ,OAAS+S,EAAc/S,QAI7C,YAAA8S,QAAP,SAAeC,EAAwBxB,GACnC,OAAIjS,KAAKmnC,iBACLnnC,KAAK8Q,kBACE,GAGJ,YAAM0C,QAAO,UAACC,EAAexB,IAGhC,YAAA42B,gBAAR,SAAwB3uB,EAAqB5X,EAAcC,GACvD,IAAK,IAAIiB,EAAI,EAAGA,EAAI0W,EAAStY,SAAU4B,EAAG,CACtC,IAAI4W,EAAQF,EAAS1W,GAErB4W,EAAM3S,gBAAgBnF,KAAO8X,EAAM5P,YAAYk+B,UAAYpmC,EAC3D8X,EAAM3S,gBAAgBlF,IAAM6X,EAAM5P,YAAYm+B,SAAWpmC,EACzD6X,EAAM3P,YAAa,EAEf2P,aAAiB,GAAaA,EAAMT,UAAU/X,OAAS,GACvD5B,KAAK6oC,gBAAgBzuB,EAAMT,UAAWrX,EAAMC,KAKhD,YAAAumC,2BAAR,SAAmCxmC,EAAcC,EAAawmC,EAAoBC,GAM9E,IALA,IAAIf,EAAUllC,KAAKG,IAAI,EAAGH,KAAKa,OAAOtB,EAAOtC,KAAKonC,eAC9Cc,EAAQnlC,KAAKa,QAAQtB,EAAOtC,KAAK4oC,eAAenoC,MAAQ,GAAKT,KAAKonC,cAClEe,EAAUplC,KAAKG,IAAI,EAAGH,KAAKa,OAAOrB,EAAMvC,KAAKqnC,gBAC7Ce,EAAQrlC,KAAKa,QAAQrB,EAAMvC,KAAK4oC,eAAeloC,OAAS,GAAKV,KAAKqnC,eAE/Dc,GAAWC,GAAO,CACrB,IAAK,IAAI1kC,EAAIukC,EAASvkC,GAAKwkC,IAASxkC,EAAG,CACnC,IAAI2kC,EAASF,EAAUnoC,KAAK+nC,WAAarkC,EACrC4kC,EAAOtoC,KAAKsnC,SAASe,GAEzB,GAAIC,EACA,IAAK,IAAI9kC,EAAI,EAAGA,EAAI8kC,EAAK1mC,SAAU4B,EAAG,CAClC,IAAI4W,EAAQkuB,EAAK9kC,GACjB4W,EAAM3S,gBAAgBnF,KAAO8X,EAAM5P,YAAYk+B,UAAYK,EAC3D3uB,EAAM3S,gBAAgBlF,IAAM6X,EAAM5P,YAAYm+B,SAAWK,EACzD5uB,EAAM3P,YAAa,GAI/B09B,MAKD,YAAA9yB,MAAP,SAAapD,EAAmC2C,GAC5C,GAAK5U,KAAKmnC,gBAAV,CAKAnnC,KAAK8a,WAAW7I,GAEZjS,KAAK+K,cACL/K,KAAK0U,iBAAiBzC,GAG1B,IAAI3P,EAAOtC,KAAKuoC,aACZhmC,EAAMvC,KAAKwoC,YAEXxoC,KAAK4nC,eACL5nC,KAAK8oC,2BAA2B9oC,KAAKipC,SAAUjpC,KAAKkpC,QAAS5mC,EAAMC,GACnEvC,KAAK8oC,2BAA2BxmC,EAAMC,EAAKD,EAAMC,IAEjDvC,KAAK6oC,gBAAgB7oC,KAAK2Z,UAAWrX,EAAMC,GAG/CvC,KAAKipC,SAAW3mC,EAChBtC,KAAKkpC,QAAU3mC,EAEf,IAAkB,UAAAvC,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KACLA,EAAMxJ,gBAAgB5Q,KAAK4oC,iBAGhCxuB,EAAMnF,QAAQhD,EAASjS,KAAK4oC,sBA3B5B,YAAMvzB,MAAK,UAACpD,EAAS2C,IA+BnB,YAAA0G,aAAV,WACI,GAAItb,KAAKmnC,gBACL,YAAM7rB,aAAY,eADtB,CAOA,IAFA,IAAI6tB,EAAWnpC,KAAKopC,kBAChBC,EAAYrpC,KAAKspC,mBACH,MAAAtpC,KAAKka,SAAL,eAAe,CAA5B,IAAIE,EAAK,KACLA,EAAMzG,YAAayG,EAAM/K,gBAI1B+K,EAAM1L,sBAAwB,EAAQtG,6BACtCgS,EAAM3J,YAAYzQ,KAAKyH,gBAAgBnF,KAAO8X,EAAM3S,gBAAgBnF,MAGpE8X,EAAMxL,oBAAsB,EAAQtG,2BACpC8R,EAAM1J,WAAW1Q,KAAKyH,gBAAgBlF,IAAM6X,EAAM3S,gBAAgBlF,KAGtE4mC,EAAWpmC,KAAKG,IAAIimC,EAAU/uB,EAAM3S,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBnF,KAAO8X,EAAM3S,gBAAgBhH,OAC7G4oC,EAAYtmC,KAAKG,IAAImmC,EAAWjvB,EAAM3S,gBAAgBlF,IAAMvC,KAAKyH,gBAAgBlF,IAAM6X,EAAM3S,gBAAgB/G,SAG7GV,KAAKyH,gBAAgBhH,QAAU0oC,IAC/BnpC,KAAK8H,OAAOtH,cAAc2oC,EAAUvpC,EAAaC,gBACjDG,KAAKyH,gBAAgBhH,MAAQ0oC,EAC7BnpC,KAAKuK,gBAAiB,EACtBvK,KAAKuI,UAAW,GAGhBvI,KAAKyH,gBAAgB/G,SAAW2oC,IAChCrpC,KAAK+H,QAAQvH,cAAc6oC,EAAWzpC,EAAaC,gBACnDG,KAAKyH,gBAAgB/G,OAAS2oC,EAC9BrpC,KAAKuK,gBAAiB,EACtBvK,KAAKuI,UAAW,GAGpB,YAAM+S,aAAY,aAG1B,EAlSA,CAAyC,GCDzC,cAqCI,WAAmBjU,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OApCX,EAAAwS,YAAc,QACd,EAAAkpB,aAAe,QACf,EAAAwG,aAAe,IAAIvlC,EAAQ,EAAG,EAAG,EAAG,G,EAuIhD,OA1I+B,iBAM3B,sBAAW,0BAAW,C,IAAtB,WACI,OAAOhE,KAAK+iC,c,IAGhB,SAAuBtjC,GACfO,KAAK+iC,eAAiBtjC,IAI1BO,KAAK+iC,aAAetjC,EACpBO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,aAGD,YAAA41B,mBAAV,WAQI,OANIjiC,KAAKqhC,YAAY/gC,QACAN,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAG/BvM,KAAKmiC,wBAA0BniC,KAAKqhC,YAAY9gC,SAASP,KAAKuM,QAKhF,YAAA8I,MAAP,SAAapD,GACTA,EAAQU,OAER3S,KAAKiT,aAAahB,GAClBjS,KAAKoiC,sBAAsB,aAC3B,IAAI9/B,EAAOtC,KAAKqiC,YAEVc,EAAgBnjC,KAAK6hC,oBAC3B5vB,EAAQmB,UAAYpT,KAAK6Z,YAEzB5H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,QAGvHuR,EAAQmB,UAAYpT,KAAK8b,MAGrB9b,KAAKopB,YACLppB,KAAKupC,aAAajnC,KAAOA,EAAOtC,KAAK4hC,oBACrC5hC,KAAKupC,aAAahnC,IAAMvC,KAAKyH,gBAAgBlF,IAAM4gC,EACnDnjC,KAAKupC,aAAa9oC,MAAQT,KAAKyH,gBAAgBhH,MAC/CT,KAAKupC,aAAa7oC,OAASV,KAAKyiC,2BAGhCziC,KAAKupC,aAAajnC,KAAOtC,KAAKyH,gBAAgBnF,KAAO6gC,EACrDnjC,KAAKupC,aAAahnC,IAAMvC,KAAKyH,gBAAgBlF,IAC7CvC,KAAKupC,aAAa9oC,MAAQT,KAAKyiC,yBAC/BziC,KAAKupC,aAAa7oC,OAASV,KAAKyH,gBAAgB/G,QAGpDuR,EAAQ+I,SAAShb,KAAKupC,aAAajnC,KAAMtC,KAAKupC,aAAahnC,IAAKvC,KAAKupC,aAAa9oC,MAAOT,KAAKupC,aAAa7oC,QAE3GuR,EAAQc,WAQF,YAAAqjB,wBAAV,SAAkC1yB,EAAWC,GACpB,GAAjB3D,KAAK8iC,WACL9iC,KAAKwJ,uBAAuB/F,qBAAqBC,EAAGC,EAAG3D,KAAKyJ,sBAC5D/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,GAG9B3D,KAAKwpC,SACLxpC,KAAKwpC,QAAS,EACdxpC,KAAKypC,SAAW/lC,EAChB1D,KAAK0pC,SAAW/lC,GAGZD,EAAI1D,KAAKupC,aAAajnC,MAAQoB,EAAI1D,KAAKupC,aAAajnC,KAAOtC,KAAKupC,aAAa9oC,OAASkD,EAAI3D,KAAKupC,aAAahnC,KAAOoB,EAAI3D,KAAKupC,aAAahnC,IAAMvC,KAAKupC,aAAa7oC,UAC7JV,KAAKopB,WACLppB,KAAKP,MAAQO,KAAK+hC,SAAW,GAAMp+B,EAAI3D,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,SAAYV,KAAK8hC,QAAU9hC,KAAK+hC,SAGxH/hC,KAAKP,MAAQO,KAAK+hC,SAAYr+B,EAAI1D,KAAKyH,gBAAgBnF,MAAQtC,KAAKyH,gBAAgBhH,OAAUT,KAAK8hC,QAAU9hC,KAAK+hC,WAM9H,IAAI4H,EAAQ,EAERA,EADA3pC,KAAKopB,aACMzlB,EAAI3D,KAAK0pC,WAAa1pC,KAAKyH,gBAAgB/G,OAASV,KAAKyiC,2BAG3D/+B,EAAI1D,KAAKypC,WAAazpC,KAAKyH,gBAAgBhH,MAAQT,KAAKyiC,0BAGrEziC,KAAKP,OAASkqC,GAAS3pC,KAAK8hC,QAAU9hC,KAAK+hC,SAE3C/hC,KAAKypC,SAAW/lC,EAChB1D,KAAK0pC,SAAW/lC,GAGb,YAAA0S,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAG5E,OAFAjE,KAAKwpC,QAAS,EAEP,YAAMnzB,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,IAEpE,EA1IA,CAA+B,GCC/B,cA0JI,WAAmBoD,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OArJX,EAAAuiC,aAAuB,GACvB,EAAAC,aAAuB,EACvB,EAAAC,gBAA0B,EAC1B,EAAAP,aAAe,IAAIvlC,EAAQ,EAAG,EAAG,EAAG,GAGrC,EAAA+lC,4BAA8B,E,EA8PzC,OAzQoC,iBAgBhC,sBAAW,8BAAe,C,IAA1B,WACI,OAAO/pC,KAAKgqC,sB,IAGhB,SAA2BvqC,GAA3B,WACQO,KAAKgqC,uBAAyBvqC,IAIlCO,KAAKgqC,qBAAuBvqC,EAExBO,KAAKopB,YAAmD,IAArCppB,KAAK+pC,4BACnBtqC,EAAMwqC,UAYPjqC,KAAKkqC,iBAAmBzqC,EAAMqhB,UAAU9gB,KAAK+pC,6BAA6B,GAC1E/pC,KAAKoM,gBAZL3M,EAAM4gB,wBAAwBqB,SAAQ,WAClC,IAAMyoB,EAAe1qC,EAAMqhB,UAAU,EAAKipB,6BAA6B,GACvE,EAAKG,iBAAmBC,EACnBA,EAAaF,UACdE,EAAa9pB,wBAAwBqB,SAAQ,WACzC,EAAKtV,kBAGb,EAAKA,mBAQbpM,KAAKkqC,iBAAmBzqC,EACpBA,IAAUA,EAAMwqC,UAChBxqC,EAAM4gB,wBAAwBqB,SAAQ,WAClC,EAAKtV,kBAIbpM,KAAKoM,kB,gCAOb,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAKoqC,iB,IAGhB,SAAsB3qC,GAAtB,WACQO,KAAKoqC,kBAAoB3qC,IAI7BO,KAAKoqC,gBAAkB3qC,EAEnBO,KAAKopB,YAAmD,IAArCppB,KAAK+pC,4BACnBtqC,EAAMwqC,UAYPjqC,KAAKqqC,YAAc5qC,EAAMqhB,WAAW9gB,KAAK+pC,6BAA6B,GACtE/pC,KAAKoM,gBAZL3M,EAAM4gB,wBAAwBqB,SAAQ,WAClC,IAAIyoB,EAAe1qC,EAAMqhB,WAAW,EAAKipB,6BAA6B,GACtE,EAAKM,YAAcF,EACdA,EAAaF,UACdE,EAAa9pB,wBAAwBqB,SAAQ,WACzC,EAAKtV,kBAGb,EAAKA,mBAQbpM,KAAKqqC,YAAc5qC,EACfA,IAAUA,EAAMwqC,UAChBxqC,EAAM4gB,wBAAwBqB,SAAQ,WAClC,EAAKtV,kBAIbpM,KAAKoM,kB,gCAOb,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK4pC,c,IAGhB,SAAuBnqC,GACfO,KAAK4pC,eAAiBnqC,IAI1BO,KAAK4pC,aAAenqC,EAEpBO,KAAKoM,iB,gCAMT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK6pC,c,IAGhB,SAAuBpqC,GACfO,KAAK4pC,eAAiBnqC,IAI1BO,KAAK6pC,aAAepqC,EAEpBO,KAAKoM,iB,gCAMT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK8pC,iB,IAGhB,SAA0BrqC,GAClBO,KAAK8pC,kBAAoBrqC,IAI7BO,KAAK8pC,gBAAkBrqC,EAEvBO,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,kBAGD,YAAA41B,mBAAV,WAQI,OANIjiC,KAAKqhC,YAAY/gC,QACAN,KAAKqhC,YAAY9gC,SAASP,KAAKuM,OAG/BvM,KAAKmiC,wBAA0BniC,KAAKqhC,YAAY9gC,SAASP,KAAKuM,QAKhF,YAAA8I,MAAP,SAAapD,GACTA,EAAQU,OAER3S,KAAKiT,aAAahB,GAElBjS,KAAKoiC,sBAAsB,aAC3B,IAAMe,EAAgBnjC,KAAK6hC,oBACvBv/B,EAAOtC,KAAKqiC,YACZ9/B,EAAMvC,KAAKsiC,WACX7hC,EAAQT,KAAKuiC,aACb7hC,EAASV,KAAKwiC,cAGdxiC,KAAKkqC,mBACLlqC,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAK9B,EAAOC,GAC/CV,KAAKopB,YACLppB,KAAKupC,aAAa7mC,eAAeJ,EAAO7B,GAAS,EAAIT,KAAK8pC,iBAAmB,GAAK9pC,KAAKyH,gBAAgBlF,IAAK9B,EAAQT,KAAK8pC,gBAAiBppC,GAC1IV,KAAKupC,aAAa7oC,QAAUV,KAAKyiC,yBACjCziC,KAAKkqC,iBAAiBziC,gBAAgBjF,SAASxC,KAAKupC,gBAGpDvpC,KAAKupC,aAAa7mC,eAAe1C,KAAKyH,gBAAgBnF,KAAMC,EAAM7B,GAAU,EAAIV,KAAK8pC,iBAAmB,GAAKrpC,EAAOC,EAASV,KAAK8pC,iBAClI9pC,KAAKupC,aAAa9oC,OAAST,KAAKyiC,yBAChCziC,KAAKkqC,iBAAiBziC,gBAAgBjF,SAASxC,KAAKupC,eAExDvpC,KAAKkqC,iBAAiB70B,MAAMpD,IAI5BjS,KAAKopB,WACLppB,KAAKupC,aAAa7mC,eAAeJ,EAAOtC,KAAK4hC,oBAAsB5hC,KAAKyH,gBAAgBhH,OAAS,EAAIT,KAAK6pC,cAAgB,GAAK7pC,KAAKyH,gBAAgBlF,IAAM4gC,EAAenjC,KAAKyH,gBAAgBhH,MAAQT,KAAK6pC,aAAc7pC,KAAKyiC,0BAG9NziC,KAAKupC,aAAa7mC,eAAe1C,KAAKyH,gBAAgBnF,KAAO6gC,EAAenjC,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,QAAU,EAAIV,KAAK6pC,cAAgB,GAAK7pC,KAAKyiC,yBAA0BziC,KAAKyH,gBAAgB/G,OAASV,KAAK6pC,cAGtO7pC,KAAKqqC,cACLrqC,KAAKqqC,YAAY5iC,gBAAgBjF,SAASxC,KAAKupC,cAC/CvpC,KAAKqqC,YAAYh1B,MAAMpD,IAG3BA,EAAQc,WAQF,YAAAqjB,wBAAV,SAAkC1yB,EAAWC,GACpB,GAAjB3D,KAAK8iC,WACL9iC,KAAKwJ,uBAAuB/F,qBAAqBC,EAAGC,EAAG3D,KAAKyJ,sBAC5D/F,EAAI1D,KAAKyJ,qBAAqB/F,EAC9BC,EAAI3D,KAAKyJ,qBAAqB9F,GAG9B3D,KAAKwpC,SACLxpC,KAAKwpC,QAAS,EACdxpC,KAAKypC,SAAW/lC,EAChB1D,KAAK0pC,SAAW/lC,GAGZD,EAAI1D,KAAKupC,aAAajnC,MAAQoB,EAAI1D,KAAKupC,aAAajnC,KAAOtC,KAAKupC,aAAa9oC,OAASkD,EAAI3D,KAAKupC,aAAahnC,KAAOoB,EAAI3D,KAAKupC,aAAahnC,IAAMvC,KAAKupC,aAAa7oC,UAC7JV,KAAKopB,WACLppB,KAAKP,MAAQO,KAAK+hC,SAAW,GAAMp+B,EAAI3D,KAAKyH,gBAAgBlF,KAAOvC,KAAKyH,gBAAgB/G,SAAYV,KAAK8hC,QAAU9hC,KAAK+hC,SAGxH/hC,KAAKP,MAAQO,KAAK+hC,SAAYr+B,EAAI1D,KAAKyH,gBAAgBnF,MAAQtC,KAAKyH,gBAAgBhH,OAAUT,KAAK8hC,QAAU9hC,KAAK+hC,WAM9H,IAAI4H,EAAQ,EAERA,EADA3pC,KAAKopB,aACMzlB,EAAI3D,KAAK0pC,WAAa1pC,KAAKyH,gBAAgB/G,OAASV,KAAKyiC,2BAG3D/+B,EAAI1D,KAAKypC,WAAazpC,KAAKyH,gBAAgBhH,MAAQT,KAAKyiC,0BAGrEziC,KAAKP,OAASkqC,GAAS3pC,KAAK8hC,QAAU9hC,KAAK+hC,SAE3C/hC,KAAKypC,SAAW/lC,EAChB1D,KAAK0pC,SAAW/lC,GAGb,YAAA0S,eAAP,SAAsBL,EAAiBC,EAAsBN,EAAmB1R,GAG5E,OAFAjE,KAAKwpC,QAAS,EAEP,YAAMnzB,eAAc,UAACL,EAAQC,EAAaN,EAAW1R,IAEpE,EAzQA,CAAoC,GCSpC,cAqJI,WAAYoD,EAAeijC,GAA3B,MACI,YAAMjjC,IAAK,K,OAvIP,EAAAkjC,SAAmB,GAEnB,EAAAC,gBAA0B,EAC1B,EAAAC,gBAA0B,IAK1B,EAAAb,aAAuB,GACvB,EAAAC,aAAuB,EACvB,EAAAC,gBAA0B,EAC1B,EAAAY,0BAAoC,EACpC,EAAAC,wBAAkC,EAyFlC,EAAAC,qBAA+B,EAC/B,EAAAC,mBAA6B,EAmCjC,EAAKC,aAAeR,IAA8B,EAElD,EAAKt+B,kBAAkBgB,KAAI,WACvB,EAAK+9B,oBAAoBjvB,MAAQ,EAAKA,MACtC,EAAKkvB,kBAAkBlvB,MAAQ,EAAKA,MACpC,EAAKmvB,WAAWnvB,MAAQ,EAAKA,SAGjC,EAAK/P,yBAAyBiB,KAAI,WAC9B,EAAKw9B,gBAAiB,KAG1B,EAAK7+B,uBAAuBqB,KAAI,WAC5B,EAAKw9B,gBAAiB,KAG1B,EAAKU,MAAQ,IAAI,EACb,EAAKJ,cACL,EAAKK,eAAiB,IAAI,EAC1B,EAAKC,aAAe,IAAI,IAGxB,EAAKD,eAAiB,IAAI,EAC1B,EAAKC,aAAe,IAAI,GAG5B,EAAKC,QAAU,IAAI,EAAoB,uBACvC,EAAKA,QAAQ38B,oBAAsB,EAAQC,0BAC3C,EAAK08B,QAAQz8B,kBAAoB,EAAQC,uBAEzC,EAAKq8B,MAAMtZ,oBAAoB,GAC/B,EAAKsZ,MAAMtZ,oBAAoB,GAAG,GAClC,EAAKsZ,MAAMvZ,iBAAiB,GAC5B,EAAKuZ,MAAMvZ,iBAAiB,GAAG,GAE/B,YAAMlX,WAAU,OAAC,EAAKywB,OACtB,EAAKA,MAAMzwB,WAAW,EAAK4wB,QAAS,EAAG,GAEvC,EAAKL,kBAAoB,IAAI,EAC7B,EAAKA,kBAAkBt8B,oBAAsB,EAAQC,0BACrD,EAAKq8B,kBAAkBp8B,kBAAoB,EAAQC,uBACnD,EAAKm8B,kBAAkBrjB,UAAY,EACnC,EAAKujB,MAAMzwB,WAAW,EAAKuwB,kBAAmB,EAAG,GACjD,EAAKM,QAAQ,EAAKF,aAAc,EAAKJ,mBAAmB,EAAMjoC,KAAKwW,IAEnE,EAAKwxB,oBAAsB,IAAI,EAC/B,EAAKA,oBAAoBr8B,oBAAsB,EAAQC,0BACvD,EAAKo8B,oBAAoBn8B,kBAAoB,EAAQC,uBACrD,EAAKk8B,oBAAoBpjB,UAAY,EACrC,EAAKujB,MAAMzwB,WAAW,EAAKswB,oBAAqB,EAAG,GACnD,EAAKO,QAAQ,EAAKH,eAAgB,EAAKJ,qBAAqB,EAAO,GAEnE,EAAKE,WAAa,IAAI,EACtB,EAAKA,WAAWtjB,UAAY,EAC5B,EAAKujB,MAAMzwB,WAAW,EAAKwwB,WAAY,EAAG,GAGrC,EAAKH,eACN,EAAKS,SAAW,OAChB,EAAKC,cAAgB,e,EAgdjC,OAnqBkC,iBA+B9B,sBAAW,4BAAa,C,IAAxB,WACI,OAAOxrC,KAAKmrC,gB,gCAMhB,sBAAW,0BAAW,C,IAAtB,WACI,OAAOnrC,KAAKorC,c,gCAQT,YAAA3wB,WAAP,SAAkBD,GACd,OAAKA,GAILxa,KAAKqrC,QAAQ5wB,WAAWD,GAEjBxa,MALIA,MAaR,YAAA4X,cAAP,SAAqB4C,GAEjB,OADAxa,KAAKqrC,QAAQzzB,cAAc4C,GACpBxa,MAIX,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOA,KAAKqrC,QAAQnxB,U,gCAGjB,YAAAvJ,8BAAP,WACI,IAAkB,UAAA3Q,KAAK2Z,UAAL,eAAgB,CAApB,KACJjN,uBASd,sBAAW,6BAAc,C,IAAzB,WACI,OAAO1M,KAAKqrC,QAAQI,gB,IAGxB,SAA0BhsC,GACtBO,KAAKqrC,QAAQI,eAAiBhsC,G,gCAIlC,sBAAW,0BAAW,C,IAAtB,WACI,OAAOO,KAAKqrC,QAAQK,a,gCAIxB,sBAAW,2BAAY,C,IAAvB,WACI,OAAO1rC,KAAKqrC,QAAQM,c,gCAcjB,YAAA7D,eAAP,SAAsBrnC,EAAeC,GACjCV,KAAKqrC,QAAQvD,eAAernC,EAAOC,IASvC,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOV,KAAK4qC,qB,IAGhB,SAA8BnrC,GAC1BO,KAAKkrC,MAAMrZ,iBAAiB,EAAGpyB,EAAQO,KAAKuqC,SAAW,GAAG,GAC1DvqC,KAAKmrC,eAAex3B,UAAYlU,EAChCO,KAAK4qC,oBAAsBnrC,G,gCAM/B,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOO,KAAK6qC,mB,IAGhB,SAA4BprC,GACxBO,KAAKkrC,MAAMnZ,oBAAoB,EAAGtyB,EAAQO,KAAKuqC,SAAW,GAAG,GAC7DvqC,KAAKorC,aAAaz3B,UAAYlU,EAC9BO,KAAK6qC,kBAAoBprC,G,gCA0EtB,YAAAmsC,YAAP,WACI5rC,KAAKqrC,QAAQ5qC,MAAQ,OACrBT,KAAKqrC,QAAQ3qC,OAAS,QAGhB,YAAA2L,aAAV,WACI,MAAO,gBAGH,YAAAw/B,kBAAR,WACI,IAAIllB,EAAQ3mB,KAAKI,KAAK0rC,WAEtB9rC,KAAKqrC,QAAQjC,kBAAoBppC,KAAKyH,gBAAgBhH,OAAST,KAAKorC,aAAaz3B,WAAa3T,KAAK+rC,iBAAmB/rC,KAAKuqC,SAAW5jB,EAAQ,GAAK,EAAI3mB,KAAK2nB,UAC5J3nB,KAAKqrC,QAAQ/B,mBAAqBtpC,KAAKyH,gBAAgB/G,QAAUV,KAAKmrC,eAAex3B,WAAa3T,KAAKgsC,mBAAqBhsC,KAAKuqC,SAAW5jB,EAAQ,GAAK,EAAI3mB,KAAK2nB,UAElK3nB,KAAKisC,aAAejsC,KAAKqrC,QAAQjC,kBACjCppC,KAAKksC,cAAgBlsC,KAAKqrC,QAAQ/B,oBAG5B,YAAAn1B,sBAAV,SAAgCV,EAAwBxB,GACpD,YAAMkC,sBAAqB,UAACV,EAAexB,GAE3CjS,KAAK6rC,qBAGC,YAAAvwB,aAAV,WACI,YAAMA,aAAY,WAElBtb,KAAKmsC,mBAOT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOnsC,KAAKyqC,iB,IAGhB,SAA0BhrC,GAClBO,KAAKyqC,kBAAoBhrC,IAIzBA,EAAQ,IACRA,EAAQ,GAGRA,EAAQ,IACRA,EAAQ,GAGZO,KAAKyqC,gBAAkBhrC,I,gCAI3B,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOO,KAAK+qC,oBAAoBvR,Y,IAGpC,SAA4B1d,GACpB9b,KAAK+qC,oBAAoBvR,aAAe1d,IAG5C9b,KAAK+qC,oBAAoBvR,WAAa1d,EACtC9b,KAAKgrC,kBAAkBxR,WAAa1d,I,gCAIxC,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO9b,KAAKulC,W,IAGhB,SAAoBzpB,GACZ9b,KAAKulC,YAAczpB,IAIvB9b,KAAKulC,UAAYzpB,EACjB9b,KAAKmrC,eAAervB,MAAQA,EAC5B9b,KAAKorC,aAAatvB,MAAQA,I,gCAI9B,sBAAW,yBAAU,C,IAArB,WACI,OAAO9b,KAAKosC,W,IAGhB,SAAsB3sC,GAClB,GAAIO,KAAKosC,YAAc3sC,EAAvB,CAIAO,KAAKosC,UAAY3sC,EACjB,IAAI4sC,EAAqBrsC,KAAKmrC,eAC1BtnB,EAAqB7jB,KAAKorC,aAC9BiB,EAAGC,WAAa7sC,EAChBokB,EAAGyoB,WAAa7sC,I,gCAIpB,sBAAW,mCAAoB,C,IAA/B,WACI,OAAOO,KAAKusC,qB,IAGhB,SAAgC9sC,GACxBO,KAAKusC,sBAAwB9sC,IAIjCO,KAAKusC,oBAAsB9sC,EACFO,KAAKmrC,eAC3BmB,WAAa7sC,I,gCAIpB,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOO,KAAKwsC,mB,IAGhB,SAA8B/sC,GACtBO,KAAKwsC,oBAAsB/sC,IAI/BO,KAAKwsC,kBAAoB/sC,EACAO,KAAKorC,aAC3BkB,WAAa7sC,I,gCAIpB,sBAAW,sBAAO,C,IAAlB,WACI,OAAOO,KAAKuqC,U,IAGhB,SAAmB9qC,GACXO,KAAKuqC,WAAa9qC,IAItBO,KAAKuqC,SAAW9qC,EAChBO,KAAKoM,eAEDpM,KAAKmrC,eAAex3B,WACpB3T,KAAKkrC,MAAMrZ,iBAAiB,EAAG7xB,KAAKuqC,UAAU,GAE9CvqC,KAAKorC,aAAaz3B,WAClB3T,KAAKkrC,MAAMnZ,oBAAoB,EAAG/xB,KAAKuqC,UAAU,K,gCAKzD,sBAAW,0BAAW,C,IAAtB,WACI,OAAOvqC,KAAK4pC,c,IAGhB,SAAuBnqC,GACnB,GAAIO,KAAK4pC,eAAiBnqC,EAA1B,CAGIA,GAAS,IACTA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,GAEZO,KAAK4pC,aAAenqC,EACpB,IAAI4sC,EAAqBrsC,KAAKmrC,eAC1BtnB,EAAqB7jB,KAAKorC,aAC9BiB,EAAGI,YAAchtC,EACjBokB,EAAG4oB,YAAchtC,EACjBO,KAAKoM,iB,gCAIT,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpM,KAAK6pC,c,IAGhB,SAAuBpqC,GACnB,GAAIO,KAAK6pC,eAAiBpqC,EAA1B,CAGIA,GAAS,IACTA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,GAEZO,KAAK6pC,aAAepqC,EACpB,IAAI4sC,EAAqBrsC,KAAKmrC,eAC1BtnB,EAAqB7jB,KAAKorC,aAC9BiB,EAAGK,YAAcjtC,EACjBokB,EAAG6oB,YAAcjtC,EACjBO,KAAKoM,iB,gCAIT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAK8pC,iB,IAGhB,SAA0BrqC,GACtB,GAAIO,KAAK8pC,kBAAoBrqC,EAA7B,CAGIA,GAAS,IACTA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,GAEZO,KAAK8pC,gBAAkBrqC,EACvB,IAAI4sC,EAAqBrsC,KAAKmrC,eAC1BtnB,EAAqB7jB,KAAKorC,aAC9BiB,EAAGM,eAAiBltC,EACpBokB,EAAG8oB,eAAiBltC,EACpBO,KAAKoM,iB,gCAIT,sBAAW,uCAAwB,C,IAAnC,WACI,OAAOpM,KAAK0qC,2B,IAGhB,SAAoCjrC,GAC5BO,KAAK0qC,4BAA8BjrC,IAGnCA,GAAS,IACTA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,GAEZO,KAAK0qC,0BAA4BjrC,EACRO,KAAKmrC,eAC3BwB,eAAiBltC,EACpBO,KAAKoM,iB,gCAIT,sBAAW,qCAAsB,C,IAAjC,WACI,OAAOpM,KAAK2qC,yB,IAGhB,SAAkClrC,GAC1BO,KAAK2qC,0BAA4BlrC,IAGjCA,GAAS,IACTA,EAAQ,IAERA,EAAQ,IACRA,EAAQ,GAEZO,KAAK2qC,wBAA0BlrC,EACNO,KAAKorC,aAC3BuB,eAAiBltC,EACpBO,KAAKoM,iB,gCAIT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAK4sC,gB,IAGhB,SAAyB9wB,GACrB,GAAI9b,KAAK4sC,iBAAmB9wB,EAA5B,CAIA9b,KAAK4sC,eAAiB9wB,EACtB,IAAIuwB,EAAgBrsC,KAAKmrC,eACrBtnB,EAAgB7jB,KAAKorC,aACzBiB,EAAG7S,WAAa1d,EAChB+H,EAAG2V,WAAa1d,EAChB9b,KAAKirC,WAAWzR,WAAa1d,I,gCAIjC,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO9b,KAAK6sC,qB,IAGhB,SAAoBptC,GACZO,KAAK6sC,oBAGT7sC,KAAK6sC,oBAAsBptC,EAC3B,IAAI4sC,EAAqBrsC,KAAKmrC,eAC1BtnB,EAAqB7jB,KAAKorC,aAC9BiB,EAAGS,gBAAkBrtC,EACrBokB,EAAGipB,gBAAkBrtC,G,gCAIzB,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOO,KAAK+sC,+B,IAGhB,SAA8BttC,GACtBO,KAAK+sC,8BAGT/sC,KAAK+sC,8BAAgCttC,EACZO,KAAKmrC,eAC3B2B,gBAAkBrtC,G,gCAIzB,sBAAW,+BAAgB,C,IAA3B,WACI,OAAOO,KAAKgtC,6B,IAGhB,SAA4BvtC,GACpBO,KAAKgtC,4BAGThtC,KAAKgtC,4BAA8BvtC,EACVO,KAAKorC,aAC3B0B,gBAAkBrtC,G,gCAGjB,YAAAwtC,mBAAR,WACI,IAAItmB,EAAQ3mB,KAAKI,KAAK0rC,WAClBoB,EAAsBltC,KAAKqrC,QAAQ5jC,gBAAgBhH,MACnD0sC,EAAuBntC,KAAKqrC,QAAQ5jC,gBAAgB/G,OAElD0sC,EAAWptC,KAAKisC,aAAeiB,EAC/BG,EAAUrtC,KAAKksC,cAAgBiB,EAE/B78B,EAAWtQ,KAAKmrC,eAAe1rC,MAAQknB,EAASymB,EAAW,KAC3D78B,EAAUvQ,KAAKorC,aAAa3rC,MAAQknB,EAAS0mB,EAAU,KAEzD/8B,IAAYtQ,KAAKqrC,QAAQ/oC,OACzBtC,KAAKqrC,QAAQ/oC,KAAOgO,EACftQ,KAAKyrC,iBACNzrC,KAAKuK,gBAAiB,IAI1BgG,IAAWvQ,KAAKqrC,QAAQ9oC,MACxBvC,KAAKqrC,QAAQ9oC,IAAMgO,EACdvQ,KAAKyrC,iBACNzrC,KAAKuK,gBAAiB,KAM1B,YAAA4hC,gBAAR,WACI,IAAIe,EAAsBltC,KAAKqrC,QAAQ5jC,gBAAgBhH,MACnD0sC,EAAuBntC,KAAKqrC,QAAQ5jC,gBAAgB/G,OAEpDV,KAAKmrC,eAAex3B,WAAau5B,GAAuBltC,KAAKisC,eAAiBjsC,KAAKgsC,oBACnFhsC,KAAKkrC,MAAMrZ,iBAAiB,EAAG,GAAG,GAClC7xB,KAAKmrC,eAAex3B,WAAY,EAChC3T,KAAKmrC,eAAe1rC,MAAQ,EAC5BO,KAAKuK,gBAAiB,IAEhBvK,KAAKmrC,eAAex3B,YAAcu5B,EAAsBltC,KAAKisC,cAAgBjsC,KAAKgsC,sBACxFhsC,KAAKkrC,MAAMrZ,iBAAiB,EAAG7xB,KAAKuqC,UAAU,GAC9CvqC,KAAKmrC,eAAex3B,WAAY,EAChC3T,KAAKuK,gBAAiB,GAGtBvK,KAAKorC,aAAaz3B,WAAaw5B,GAAwBntC,KAAKksC,gBAAkBlsC,KAAK+rC,kBACnF/rC,KAAKkrC,MAAMnZ,oBAAoB,EAAG,GAAG,GACrC/xB,KAAKorC,aAAaz3B,WAAY,EAC9B3T,KAAKorC,aAAa3rC,MAAQ,EAC1BO,KAAKuK,gBAAiB,IAEhBvK,KAAKorC,aAAaz3B,YAAcw5B,EAAuBntC,KAAKksC,eAAiBlsC,KAAK+rC,oBACxF/rC,KAAKkrC,MAAMnZ,oBAAoB,EAAG/xB,KAAKuqC,UAAU,GACjDvqC,KAAKorC,aAAaz3B,WAAY,EAC9B3T,KAAKuK,gBAAiB,GAG1BvK,KAAK6rC,oBAEL,IAAIllB,EAAQ3mB,KAAKI,KAAK0rC,WAEtB9rC,KAAKmrC,eAAemC,WAAiC,GAApBttC,KAAK4pC,cAAsB5pC,KAAKisC,aAAetlB,GAAS,KACzF3mB,KAAKorC,aAAakC,WAAkC,GAArBttC,KAAK4pC,cAAuB5pC,KAAKksC,cAAgBvlB,GAAS,MAGtF,YAAA9U,MAAP,SAAazR,GACT,YAAMyR,MAAK,UAACzR,GAEZJ,KAAKutC,gBAID,YAAAjC,QAAR,SAAgBkC,EAAwCC,EAAyBrkB,EAAqB0Z,GAAtG,WACI0K,EAAWhgC,YAAc,EACzBggC,EAAW/sC,MAAQ,OACnB+sC,EAAW9sC,OAAS,OACpB8sC,EAAWE,UAAY,EACvBF,EAAW/tC,MAAQ,EACnB+tC,EAAW1L,QAAU,EACrB0L,EAAW9+B,oBAAsB,EAAQtG,4BACzColC,EAAW5+B,kBAAoB,EAAQtG,0BACvCklC,EAAWpkB,WAAaA,EACxBokB,EAAW1K,SAAWA,EACtB0K,EAAW75B,WAAY,EAEvB85B,EAAahzB,WAAW+yB,GAExBA,EAAWvZ,yBAAyBjnB,KAAI,SAACvN,GACrC,EAAKwtC,yBAKL,YAAAM,aAAR,sBACSvtC,KAAKuM,QAASvM,KAAK2tC,mBAIxB3tC,KAAK2tC,iBAAmB3tC,KAAKyL,kBAAkBuB,KAAI,SAAC4gC,GAC3C,EAAKpD,iBAGyB,GAA/B,EAAKY,aAAaz3B,YACdi6B,EAAGjqC,EAAI,GAAK,EAAKynC,aAAa3rC,MAAQ,EACtC,EAAK2rC,aAAa3rC,OAAS,EAAKgrC,gBACzBmD,EAAGjqC,EAAI,GAAK,EAAKynC,aAAa3rC,MAAQ,EAAK2rC,aAAatJ,UAC/D,EAAKsJ,aAAa3rC,OAAS,EAAKgrC,kBAGH,GAAjC,EAAKU,eAAex3B,YAChBi6B,EAAGlqC,EAAI,GAAK,EAAKynC,eAAe1rC,MAAQ,EAAK0rC,eAAerJ,QAC5D,EAAKqJ,eAAe1rC,OAAS,EAAKgrC,gBAC3BmD,EAAGlqC,EAAI,GAAK,EAAKynC,eAAe1rC,MAAQ,IAC/C,EAAK0rC,eAAe1rC,OAAS,EAAKgrC,wBAM3C,YAAA33B,yBAAP,SAAgCb,GACvBjS,KAAK0S,gBAIV,YAAMI,yBAAwB,UAACb,GAE/BjS,KAAKkrC,MAAMp4B,yBAAyBb,GAEpCA,EAAQc,YAIL,YAAA2E,QAAP,WACI1X,KAAKyL,kBAAkBqB,OAAO9M,KAAK2tC,kBACnC3tC,KAAK2tC,iBAAmB,KACxB,YAAMj2B,QAAO,YAErB,EAnqBA,CAAkC,GAoqBlC,IAAWgC,gBAAgB,4BAA8B,ECzqBzD,mBA4BA,yE,OAEW,EAAAm0B,qBAAuB,IAAI,IAG3B,EAAAC,mBAAqB,OAErB,EAAAC,oBAAsB,OAGtB,EAAAC,yBAA2B,MAE3B,EAAAC,0BAA4B,MAE5B,EAAAC,wBAA0B,MAE1B,EAAAC,2BAA6B,MAG7B,EAAAC,mBAAqB,OAErB,EAAAC,wBAA0B,UAG1B,EAAAC,iBAAmB,UAEnB,EAAAC,uBAAyB,EAGzB,EAAAC,WAAa,EAmGZ,EAAAC,6BAAoD,KACpD,EAAAC,qBAA6C,GAC7C,EAAAC,oBAAkD,K,EA2I9D,OA7QqC,iBA+BvB,YAAAtiC,aAAV,WACI,MAAO,mBAGH,YAAAuiC,WAAR,SAAmBl4B,EAAam4B,GAAhC,WACQhU,EAAS,EAAOhS,mBAAmBnS,EAAKA,GAuB5C,OArBAmkB,EAAOp6B,MAAQouC,GAAeA,EAAYpuC,MAAQouC,EAAYpuC,MAAQT,KAAK8tC,mBAC3EjT,EAAOn6B,OAASmuC,GAAeA,EAAYnuC,OAASmuC,EAAYnuC,OAASV,KAAK+tC,oBAC9ElT,EAAO/e,MAAQ+yB,GAAeA,EAAY/yB,MAAQ+yB,EAAY/yB,MAAQ9b,KAAKouC,mBAC3EvT,EAAOrB,WAAaqV,GAAeA,EAAYrV,WAAaqV,EAAYrV,WAAax5B,KAAKquC,wBAC1FxT,EAAOrtB,YAAcqhC,GAAeA,EAAYrhC,YAAcqhC,EAAYrhC,YAAcxN,KAAKguC,yBAC7FnT,EAAOptB,aAAeohC,GAAeA,EAAYphC,aAAeohC,EAAYphC,aAAezN,KAAKiuC,0BAChGpT,EAAOntB,WAAamhC,GAAeA,EAAYnhC,WAAamhC,EAAYnhC,WAAa1N,KAAKkuC,wBAC1FrT,EAAOltB,cAAgBkhC,GAAeA,EAAYlhC,cAAgBkhC,EAAYlhC,cAAgB3N,KAAKmuC,2BAEnGtT,EAAOlT,UAAY,EACnBkT,EAAO/vB,kBAAmB,EAE1B+vB,EAAO9f,YAAc/a,KAAK+a,YAC1B8f,EAAO5pB,WAAajR,KAAKiR,WACzB4pB,EAAO3pB,cAAgBlR,KAAKkR,cAC5B2pB,EAAO1pB,cAAgBnR,KAAKmR,cAE5B0pB,EAAOhvB,sBAAsBmB,KAAI,WAC7B,EAAK6gC,qBAAqBx5B,gBAAgBqC,MAGvCmkB,GAQJ,YAAAiU,WAAP,SAAkBC,EAAqBC,GACnC,IAAIzkB,EAAQ,IAAI,EAChBA,EAAMnB,YAAa,EACnBmB,EAAMzf,kBAAmB,EAGzB,IADA,IAAImkC,EAA2B,KACtBzrC,EAAI,EAAGA,EAAIurC,EAAKntC,OAAQ4B,IAAK,CAClC,IAAI0rC,EAAa,KAEbF,GAAgBA,EAAaptC,SAAWmtC,EAAKntC,SAC7CstC,EAAaF,EAAaxrC,IAG9B,IAAIkT,EAAM1W,KAAK4uC,WAAWG,EAAKvrC,GAAI0rC,KAC9BD,GAAUv4B,EAAIy4B,eAAiBF,EAAOE,kBACvCF,EAASv4B,GAGb6T,EAAM9P,WAAW/D,GAGrB6T,EAAM7pB,OAASuuC,EAASA,EAAOvuC,OAASV,KAAK+tC,oBAE7C/tC,KAAKya,WAAW8P,IAOb,YAAA6kB,gBAAP,SAAuBZ,GACnB,GAAKxuC,KAAKka,SAIV,IAAK,IAAI1W,EAAI,EAAGA,EAAIxD,KAAKka,SAAStY,OAAQ4B,IAAK,CAC3C,IAAI+iB,EAAMvmB,KAAKka,SAAS1W,GACxB,GAAK+iB,GAAoBA,EAAKrM,SAK9B,IADA,IAAIm1B,EAA0B9oB,EACrByf,EAAI,EAAGA,EAAIqJ,EAAan1B,SAAStY,OAAQokC,IAAK,CACnD,IAAInL,EAASwU,EAAan1B,SAAS8rB,GAEnC,GAAKnL,GAAWA,EAAO3gB,SAAS,GAAhC,CAIA,IAAIo1B,EAAgBzU,EAAO3gB,SAAS,GAET,WAAvBo1B,EAAcl3B,OACdyiB,EAAO/e,MAAS0yB,EAAaxuC,KAAKsuC,iBAAmBtuC,KAAKouC,mBAC1DvT,EAAOlT,UAAa6mB,EAAa,EAAIxuC,KAAKuuC,uBAAyB,GAGvEe,EAAcl3B,KAAQo2B,EAAa,EAAIc,EAAcl3B,KAAKm3B,cAAgBD,EAAcl3B,KAAKo3B,kBAUzG,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOxvC,KAAKyuC,8B,gCAQT,YAAAgB,QAAP,SAAeC,GAAf,WAEI,IADkC1vC,KAAK0uC,qBAAqBiB,MAAK,SAAC/sC,GAAM,OAAAA,EAAE8sC,QAAF,KACxE,CAIiC,OAA7B1vC,KAAK2uC,sBACL3uC,KAAK2uC,oBAAsB3uC,KAAK6tC,qBAAqB7gC,KAAI,SAAC0J,GACtD,GAAK,EAAK+3B,6BAAV,CAMA,OAFA,EAAKA,6BAA6BliC,MAAMohB,eAAiB,EAAK8gB,6BAEtD/3B,GACJ,IAAK,SAMD,OALA,EAAK83B,aACD,EAAKA,WAAa,IAClB,EAAKA,WAAa,QAEtB,EAAKY,gBAAgB,EAAKZ,YAE9B,IAAK,SAED,YADA,EAAKC,6BAA6B9f,WAAW,GAEjD,IAAK,SAED,YADA,EAAK8f,6BAA6B9f,WAAW,IAGrD,EAAK8f,6BAA6B9f,YAAY,EAAI,EAAK6f,WAAa93B,EAAI64B,cAAgB74B,GAEhE,IAApB,EAAK83B,aACL,EAAKA,WAAa,EAClB,EAAKY,gBAAgB,EAAKZ,kBAKtCxuC,KAAK2T,WAAY,EACjB3T,KAAKyuC,6BAA+BiB,EACpCA,EAAMhhB,0BAA4B1uB,KAGlC,IAAM4vC,EAAiDF,EAAMtjB,kBAAkBpf,KAAI,WAC/E,EAAKyhC,6BAA+BiB,EACpCA,EAAMhhB,0BAA4B,EAClC,EAAK/a,WAAY,KAGfk8B,EAAgDH,EAAMrjB,iBAAiBrf,KAAI,WAC7E0iC,EAAMhhB,0BAA4B,KAClC,EAAK+f,6BAA+B,KACpC,EAAK96B,WAAY,KAGrB3T,KAAK0uC,qBAAqBv+B,KAAK,CAC3Bu/B,MAAK,EACLG,eAAc,EACdD,gBAAe,MAShB,YAAAE,WAAP,SAAkBJ,GAAlB,WACI,GAAIA,EAAO,CAEP,IAAIK,EAAW/vC,KAAK0uC,qBAAqBsB,QAAO,SAACptC,GAAM,OAAAA,EAAE8sC,QAAF,KAC/B,IAApBK,EAASnuC,SACT5B,KAAKiwC,iCAAiCF,EAAS,IAE/C/vC,KAAK0uC,qBAAuB1uC,KAAK0uC,qBAAqBsB,QAAO,SAACptC,GAAM,OAAAA,EAAE8sC,QAAF,KAChE1vC,KAAKyuC,+BAAiCiB,IACtC1vC,KAAKyuC,6BAA+B,YAI5CzuC,KAAK0uC,qBAAqBjO,SAAQ,SAACyP,GAC/B,EAAKD,iCAAiCC,MAE1ClwC,KAAK0uC,qBAAuB,GAGS,IAArC1uC,KAAK0uC,qBAAqB9sC,SAC1B5B,KAAKyuC,6BAA+B,KACpCzuC,KAAK6tC,qBAAqB/gC,OAAO9M,KAAK2uC,qBACtC3uC,KAAK2uC,oBAAsB,OAI3B,YAAAsB,iCAAR,SAAyCC,GACrCA,EAAmBR,MAAMhhB,0BAA4B,KACrDwhB,EAAmBR,MAAMtjB,kBAAkBtf,OAAOojC,EAAmBN,iBACrEM,EAAmBR,MAAMrjB,iBAAiBvf,OAAOojC,EAAmBL,iBAMjE,YAAAn4B,QAAP,WACI,YAAMA,QAAO,WAEb1X,KAAK8vC,cAWK,EAAAK,oBAAd,SAAkC9oC,GAC9B,IAAI+oC,EAAc,IAAIC,EAAgBhpC,GAQtC,OANA+oC,EAAYtB,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,WAC1EsB,EAAYtB,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACrEsB,EAAYtB,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,WAC/EsB,EAAYtB,WAAW,CAAC,SAAU,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/EsB,EAAYtB,WAAW,CAAC,KAAM,CAAC,CAAEruC,MAAO,WAEjC2vC,GAEf,EA7QA,CAAqC,GA+QrC,IAAW12B,gBAAgB,+BAAiC,EClT5D,kBA4II,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OA3IX,EAAA4Y,WAAa,GACb,EAAAC,YAAc,GAEd,EAAAowB,mBAAqB,EACrB,EAAAC,gBAAkB,WAElB,EAAAC,mBAAqB,EACrB,EAAAC,gBAAkB,QAElB,EAAAC,oBAAsB,EAEtB,EAAA72B,YAAc,QAEd,EAAA82B,oBAAqB,EACrB,EAAAC,oBAAqB,E,EA0MjC,OAzNiC,iBAkB7B,sBAAW,gCAAiB,C,IAA5B,WACI,OAAO5wC,KAAK4wC,oB,IAGhB,SAA6BnxC,GACrBO,KAAK4wC,qBAAuBnxC,IAIhCO,KAAK4wC,mBAAqBnxC,EAC1BO,KAAKoM,iB,gCAIT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAK2wC,oB,IAGhB,SAA6BlxC,GACrBO,KAAK2wC,qBAAuBlxC,IAIhCO,KAAK2wC,mBAAqBlxC,EAC1BO,KAAKoM,iB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAK6Z,a,IAGhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAIzBO,KAAK6Z,YAAcpa,EACnBO,KAAKoM,iB,gCAIT,sBAAW,wBAAS,C,IAApB,WACI,OAAOpM,KAAKigB,Y,IAGhB,SAAqBxgB,GACjBO,KAAKigB,WAAaxgB,EAElBO,KAAKoM,gB,gCAIT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAKkgB,a,IAGhB,SAAsBzgB,GAClBO,KAAKkgB,YAAczgB,EAEnBO,KAAKoM,gB,gCAIT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAKswC,oB,IAGhB,SAA6B7wC,GACzBO,KAAKswC,mBAAqB7wC,EAE1BO,KAAKoM,gB,gCAIT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAKuwC,iB,IAGhB,SAA0B9wC,GACtBO,KAAKuwC,gBAAkB9wC,EAEvBO,KAAKoM,gB,gCAIT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOpM,KAAKwwC,oB,IAGhB,SAA6B/wC,GACzBO,KAAKwwC,mBAAqB/wC,EAE1BO,KAAKoM,gB,gCAIT,sBAAW,6BAAc,C,IAAzB,WACI,OAAOpM,KAAKywC,iB,IAGhB,SAA0BhxC,GACtBO,KAAKywC,gBAAkBhxC,EAEvBO,KAAKoM,gB,gCAIT,sBAAW,iCAAkB,C,IAA7B,WACI,OAAOpM,KAAK0wC,qB,IAGhB,SAA8BjxC,GAC1BO,KAAK0wC,oBAAsBjxC,EAE3BO,KAAKoM,gB,gCAWF,YAAAiJ,MAAP,SAAapD,EAAmC2C,GAK5C,GAJA3C,EAAQU,OAER3S,KAAKiT,aAAahB,GAEdjS,KAAKoK,WAAY,CAEbpK,KAAK6Z,cACL5H,EAAQmB,UAAYpT,KAAK6Z,YACzB5H,EAAQ+I,SAAShb,KAAKyH,gBAAgBnF,KAAMtC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyH,gBAAgBhH,MAAOT,KAAKyH,gBAAgB/G,SAG3H,IAAImwC,EAAa7wC,KAAKyH,gBAAgBhH,MAAQT,KAAKigB,WAC/C6wB,EAAa9wC,KAAKyH,gBAAgB/G,OAASV,KAAKkgB,YAG9C5d,EAAOtC,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAQ,EAChE,EAAMT,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,OAAS,EAErE,GAAIV,KAAK4wC,mBAAoB,CACzB3+B,EAAQW,YAAc5S,KAAKuwC,gBAC3Bt+B,EAAQY,UAAY7S,KAAKswC,mBAEzB,IAAK,IAAI5sC,GAAKmtC,EAAa,EAAGntC,EAAImtC,EAAa,EAAGntC,IAAK,CACnD,IAAMqtC,EAAQzuC,EAAOoB,EAAI1D,KAAKqmB,UAE9BpU,EAAQ4C,YACR5C,EAAQgK,OAAO80B,EAAO/wC,KAAKyH,gBAAgBlF,KAC3C0P,EAAQiK,OAAO60B,EAAO/wC,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,QAEtEuR,EAAQ8J,SAGZ,IAAK,IAAIpY,GAAKmtC,EAAa,EAAGntC,EAAImtC,EAAa,EAAGntC,IAAK,CACnD,IAAMqtC,EAAQ,EAAMrtC,EAAI3D,KAAKwmB,WAE7BvU,EAAQ4C,YACR5C,EAAQgK,OAAOjc,KAAKyH,gBAAgBnF,KAAM0uC,GAC1C/+B,EAAQiK,OAAOlc,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAOuwC,GACvE/+B,EAAQ8J,UAKhB,GAAI/b,KAAK2wC,mBAAoB,CACzB1+B,EAAQW,YAAc5S,KAAKywC,gBAC3Bx+B,EAAQY,UAAY7S,KAAKwwC,mBAEzB,IAAS9sC,GAAKmtC,EAAa,EAAI7wC,KAAK0wC,oBAAqBhtC,EAAImtC,EAAa,EAAGntC,GAAK1D,KAAK0wC,oBAAqB,CACpGK,EAAQzuC,EAAOoB,EAAI1D,KAAKqmB,UAE5BpU,EAAQ4C,YACR5C,EAAQgK,OAAO80B,EAAO/wC,KAAKyH,gBAAgBlF,KAC3C0P,EAAQiK,OAAO60B,EAAO/wC,KAAKyH,gBAAgBlF,IAAMvC,KAAKyH,gBAAgB/G,QACtEuR,EAAQ8J,SAGZ,IAASpY,GAAKmtC,EAAa,EAAI9wC,KAAK0wC,oBAAqB/sC,EAAImtC,EAAa,EAAGntC,GAAK3D,KAAK0wC,oBAAqB,CACpGM,EAAQ,EAAMrtC,EAAI3D,KAAKwmB,WAC3BvU,EAAQgK,OAAOjc,KAAKyH,gBAAgBnF,KAAM0uC,GAC1C/+B,EAAQiK,OAAOlc,KAAKyH,gBAAgBnF,KAAOtC,KAAKyH,gBAAgBhH,MAAOuwC,GACvE/+B,EAAQuH,YACRvH,EAAQ8J,WAKpB9J,EAAQc,WAGF,YAAA1G,aAAV,WACI,MAAO,eAEf,EAzNA,CAAiC,GA0NjC,IAAWqN,gBAAgB,2BAA6B,ECvNxD,mBAuFI,WAAmBrS,GAAnB,MACI,YAAMA,IAAK,K,OADI,EAAAA,OAlFX,EAAAkiC,aAAe,IAAIvlC,EAAQ,EAAG,EAAG,EAAG,G,EAsJhD,OA3JsC,iBAOlC,sBAAW,2BAAY,C,IAAvB,WACI,OAAOhE,KAAK0hC,eAAoC,MAAnB1hC,KAAKssC,Y,IAGtC,SAAwB7sC,GAChBO,KAAK0hC,gBAAkBjiC,IAI3BO,KAAK0hC,cAAgBjiC,EACrBO,KAAKoM,iB,gCAMT,sBAAW,8BAAe,C,IAA1B,WACI,OAAOpM,KAAKkqC,kB,IAGhB,SAA2BzqC,GAA3B,WACQO,KAAKkqC,mBAAqBzqC,IAI9BO,KAAKkqC,iBAAmBzqC,EAEpBA,IAAUA,EAAMwqC,UAChBxqC,EAAM4gB,wBAAwBqB,SAAQ,WAAM,2BAGhD1hB,KAAKoM,iB,gCAMT,sBAAW,4BAAa,C,IAAxB,WACI,OAAOpM,KAAKixC,gB,IAGhB,SAAyBxxC,GAAzB,WACQO,KAAKixC,iBAAmBxxC,IAI5BO,KAAKixC,eAAiBxxC,EAElBA,IAAUA,EAAMwqC,UAChBxqC,EAAM4gB,wBAAwBqB,SAAQ,WAAM,2BAGhD1hB,KAAKoM,iB,gCAMT,sBAAW,yBAAU,C,IAArB,WACI,OAAOpM,KAAKqqC,a,IAGhB,SAAsB5qC,GAAtB,WACQO,KAAKqqC,cAAgB5qC,IAIzBO,KAAKqqC,YAAc5qC,EAEfA,IAAUA,EAAMwqC,UAChBxqC,EAAM4gB,wBAAwBqB,SAAQ,WAAM,2BAGhD1hB,KAAKoM,iB,gCAWC,YAAAC,aAAV,WACI,MAAO,oBAGJ,YAAAgJ,MAAP,SAAapD,EAAmC2C,GAC5C3C,EAAQU,OAER3S,KAAKiT,aAAahB,GAElBjS,KAAKoiC,sBAAsB,aAC3B,IAAMe,EAAgBnjC,KAAK6hC,oBACvBv/B,EAAOtC,KAAKqiC,YACZ9/B,EAAMvC,KAAKsiC,WACX7hC,EAAQT,KAAKuiC,aACb7hC,EAASV,KAAKwiC,cAGdxiC,KAAKkqC,mBACLlqC,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAK9B,EAAOC,GAC/CV,KAAK6iC,gBAAkB7iC,KAAK0iC,eACxB1iC,KAAKopB,WACLppB,KAAKupC,aAAa7oC,QAAUV,KAAKyiC,yBAEjCziC,KAAKupC,aAAa9oC,OAAST,KAAKyiC,0BAGxCziC,KAAKkqC,iBAAiBziC,gBAAgBjF,SAASxC,KAAKupC,cACpDvpC,KAAKkqC,iBAAiB70B,MAAMpD,IAI5BjS,KAAKixC,iBACDjxC,KAAKopB,WACDppB,KAAK6iC,gBAAkB7iC,KAAK0iC,aAC5B1iC,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAM4gC,EAAe1iC,EAAOC,EAASyiC,EAAgBnjC,KAAKyiC,0BAEjGziC,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAM4gC,EAAe1iC,EAAOC,EAASyiC,GAG5EnjC,KAAK6iC,gBAAkB7iC,KAAK0iC,aAC5B1iC,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAK4gC,EAAgBnjC,KAAKyiC,yBAA2B,EAAG/hC,GAG/FV,KAAKupC,aAAa7mC,eAAeJ,EAAMC,EAAK4gC,EAAeziC,GAGnEV,KAAKixC,eAAexpC,gBAAgBjF,SAASxC,KAAKupC,cAClDvpC,KAAKixC,eAAe57B,MAAMpD,IAI1BjS,KAAK0iC,eACD1iC,KAAKopB,WACLppB,KAAKupC,aAAa7mC,eAAeJ,EAAOtC,KAAK4hC,oBAAqB5hC,KAAKyH,gBAAgBlF,IAAM4gC,EAAenjC,KAAKyH,gBAAgBhH,MAAOT,KAAKyiC,0BAE7IziC,KAAKupC,aAAa7mC,eAAe1C,KAAKyH,gBAAgBnF,KAAO6gC,EAAenjC,KAAKyH,gBAAgBlF,IAAKvC,KAAKyiC,yBAA0BziC,KAAKyH,gBAAgB/G,QAG9JV,KAAKqqC,YAAY5iC,gBAAgBjF,SAASxC,KAAKupC,cAC/CvpC,KAAKqqC,YAAYh1B,MAAMpD,IAG3BA,EAAQc,WAEhB,EA3JA,CAAsC,GA4JtC,IAAW2G,gBAAgB,gCAAkC,GC7J7D,IAAM,GAAO,UAYb,EAAQD,UAAY,SAASe,EAAkBpC,EAAc+b,EAAuBwC,GAChF,IAAIpM,EAAQ,IAAI,EAAW,SACvB2Z,GAAevN,GAAUA,EAAQuN,aACjCC,GAAexN,GAAUA,EAAQwN,aAErC5Z,EAAMnB,YAAc8a,EAEpB,IAAIxZ,EAAS,IAAI,EAAU,UAwB3B,OAvBAA,EAAOtS,KAAOA,EACdsS,EAAOjC,wBAA0B,EAAQ9Z,0BACrCu1B,EACAxZ,EAAOjqB,MAAQ0zB,EAEfzJ,EAAOhqB,OAASyzB,EAGhBgQ,GACA5Z,EAAM9P,WAAWD,GACjB+P,EAAM9P,WAAWiQ,GACjBA,EAAOld,YAAc,QAErB+c,EAAM9P,WAAWiQ,GACjBH,EAAM9P,WAAWD,GACjBkQ,EAAOjd,aAAe,OAG1Bid,EAAOzZ,WAAauJ,EAAQvJ,WAC5ByZ,EAAO3P,YAAcP,EAAQO,YAC7B2P,EAAOxZ,cAAgBsJ,EAAQtJ,cAC/BwZ,EAAOvZ,cAAgBqJ,EAAQrJ,cAExBoZ,G,iDC1CX,cAkBI,WAAmBnqB,GAjBX,KAAAsH,YAAc,QACd,KAAAC,WAAa,GACb,KAAAC,YAAc,GAIf,KAAAC,UAAY,IAAIjI,EAAa,GAAIA,EAAaC,gBAAgB,GAK9D,KAAAgN,oBAAsB,IAAI,IAO7B7M,KAAKuM,MAAQnM,EAsErB,OAhEI,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOJ,KAAK6H,UAAU3G,SAASlB,KAAKuM,Q,IAGxC,SAAoB9M,GACZO,KAAK6H,UAAU3G,SAASlB,KAAKuM,SAAW9M,GAIxCO,KAAK6H,UAAUtG,WAAW9B,IAC1BO,KAAK6M,oBAAoBwH,gBAAgBrU,O,gCAOjD,sBAAW,yBAAU,C,IAArB,WACI,OAAOA,KAAK0H,a,IAGhB,SAAsBjI,GACdO,KAAK0H,cAAgBjI,IAIzBO,KAAK0H,YAAcjI,EACnBO,KAAK6M,oBAAoBwH,gBAAgBrU,Q,gCAM7C,sBAAW,wBAAS,C,IAApB,WACI,OAAOA,KAAK2H,Y,IAGhB,SAAqBlI,GACbO,KAAK2H,aAAelI,IAIxBO,KAAK2H,WAAalI,EAClBO,KAAK6M,oBAAoBwH,gBAAgBrU,Q,gCAI7C,sBAAW,yBAAU,C,IAArB,WACI,OAAOA,KAAK4H,a,IAGhB,SAAsBnI,GACdO,KAAK4H,cAAgBnI,IAIzBO,KAAK4H,YAAcnI,EACnBO,KAAK6M,oBAAoBwH,gBAAgBrU,Q,gCAItC,YAAA0X,QAAP,WACI1X,KAAK6M,oBAAoB8K,SAEjC,EAzFA,G,mBCyCA,eA8RI,WAAYtQ,EAAc5G,EAAWC,EAAY8N,EAAwB0iC,EAAyBC,QAAxE,IAAA1wC,MAAA,QAAW,IAAAC,MAAA,QAAoC,IAAAwwC,OAAA,QAAyB,IAAAC,MAAe,KAAQC,sBAAzH,MACI,YAAM/pC,EAAM,CAAE5G,MAAOA,EAAOC,OAAQA,GAAU8N,EAAO0iC,EAAiBC,EAAc,KAAUE,qBAAmB,KAEjH,OAhSI,EAAA9oC,UAAW,EASZ,EAAAkG,eAAiB,IAAI,EAAU,QAI/B,EAAAqI,iBAAqD,GAErD,EAAAK,iBAAqD,GAErD,EAAAia,kBAAsD,GAMtD,EAAAphB,gBAAkB,IAAIJ,MACrB,EAAA0hC,eAAgB,EAChB,EAAAC,oBAAsB,IAAI,KAAS,EAAG,EAAG,EAAG,GAC5C,EAAAC,YAAc,EACd,EAAAC,aAAe,EACf,EAAAC,mBAA6B,EAC7B,EAAAC,oBAAqB,EAErB,EAAAC,sBAAuB,EACvB,EAAAC,aAAe,EAEf,EAAAC,gBAAiB,EACjB,EAAAC,uBAAyB,EAG1B,EAAAn+B,gBAAkB,EAOlB,EAAAsB,gBAAkB,EAUjB,EAAA88B,eAAyB,GAI1B,EAAA5kB,sBAAwB,IAAI,IAI5B,EAAA6kB,0BAA4B,IAAI,IAIhC,EAAAC,wBAA0B,IAAI,IAI9B,EAAAC,sBAAwB,IAAI,IAI5B,EAAAC,wBAA0B,IAAI,IAI9B,EAAAC,sBAAwB,IAAI,IAI5B,EAAAC,aAAc,EA6Pb,EAAAC,gCAAiC,EAcjC,EAAAC,sBAA2C,KA2L3C,EAAAC,cAAgB,IAAIzuC,EAAQ,EAAG,EAAG,EAAG,GA4JrC,EAAA0uC,gBAAkB,SAACC,GACvB,IAAM9jB,EAAM8jB,EACR9iB,EAAK,IAAI,IAAc,IAAoB/B,KAAMe,GACrD,EAAKzB,sBAAsB/Y,gBAAgBwb,GAC3ChB,EAAIG,kBAGA,EAAA4jB,eAAiB,SAACD,GACtB,IAAM9jB,EAAM8jB,EACR9iB,EAAK,IAAI,IAAc,IAAoB5B,IAAKY,GACpD,EAAKzB,sBAAsB/Y,gBAAgBwb,GAC3ChB,EAAIG,kBAGA,EAAA6jB,iBAAmB,SAACF,GACxB,IAAM9jB,EAAM8jB,EACR9iB,EAAK,IAAI,IAAc,IAAoB1B,MAAOU,GACtD,EAAKzB,sBAAsB/Y,gBAAgBwb,GAC3ChB,EAAIG,mBAxaJxgB,EAAQ,EAAKuD,aACE,EAAK+gC,UAGpB,EAAKC,aAAevkC,EAAMwkC,YAAaC,kBACvC,EAAKC,gBAAkB1kC,EAAM2kC,+BAA+BnmC,KAAI,SAAComC,GAAmB,SAAKC,aAAL,MACpF,EAAKC,qBAAuB9kC,EAAM+kC,wBAAwBvmC,KAAI,SAACwmC,GACtD,EAAKC,kBAGND,EAAK99B,OAAS,KAAmBg+B,SACjC,EAAKD,gBAAgB7jB,gBAAgB4jB,EAAKxlB,OAE9CwlB,EAAKG,yBAA0B,MAEnC,EAAKllC,eAAeoD,MAAM,GAC1B,EAAK+hC,UAAW,EACXnzC,GAAUC,IACX,EAAKmzC,gBAAkBrlC,EAAMwkC,YAAYc,mBAAmB9mC,KAAI,WAAM,wBACtE,EAAK+mC,aAET,EAAKjB,SAASkB,SAAU,E,KAyjBhC,OA92B4C,iBAyCxC,sBAAW,6BAAc,C,IAAzB,WACI,OAAOh0C,KAAK4T,iB,gCAMhB,sBAAW,6BAAc,C,IAAzB,WACI,OAAO5T,KAAKkV,iB,gCAwChB,sBAAW,0BAAW,C,IAAtB,WACI,OAAOlV,KAAK6xC,c,IAEhB,SAAuBpyC,GACfA,IAAUO,KAAK6xC,eAGnB7xC,KAAK6xC,aAAepyC,EACpBO,KAAK+zC,c,gCAGT,sBAAW,yBAAU,C,IAArB,WACI,OAAO/zC,KAAK6Z,a,IAEhB,SAAsBpa,GACdO,KAAK6Z,cAAgBpa,IAGzBO,KAAK6Z,YAAcpa,EACnBO,KAAKyR,gB,gCAOT,sBAAW,yBAAU,C,IAArB,WACI,OAAOzR,KAAKwxC,a,IAEhB,SAAsB/xC,GACdO,KAAKwxC,cAAgB/xC,IAGzBO,KAAKwxC,YAAc/xC,EACnBO,KAAKyR,cACLzR,KAAKyO,eAAeiD,oB,gCAOxB,sBAAW,0BAAW,C,IAAtB,WACI,OAAO1R,KAAKyxC,c,IAEhB,SAAuBhyC,GACfO,KAAKyxC,eAAiBhyC,IAG1BO,KAAKyxC,aAAehyC,EACpBO,KAAKyR,cACLzR,KAAKyO,eAAeiD,oB,gCAMxB,sBAAW,+BAAgB,C,IAA3B,WACI,OAAO1R,KAAK0xC,mB,IAEhB,SAA4BjyC,GACpBO,KAAK0xC,oBAAsBjyC,IAG/BO,KAAK0xC,kBAAoBjyC,EACzBO,KAAKyR,cACLzR,KAAKyO,eAAeiD,oB,gCAMxB,sBAAW,gCAAiB,C,IAA5B,WACI,OAAO1R,KAAK2xC,oB,IAEhB,SAA6BlyC,GACrBO,KAAK2xC,qBAAuBlyC,IAGhCO,KAAK2xC,mBAAqBlyC,EAC1BO,KAAK+zC,c,gCAOT,sBAAW,yBAAU,C,IAArB,WACI,IAAIE,EAAiB,EACjBC,EAAkB,EAUtB,OARIl0C,KAAKwxC,cACLyC,EAAUj0C,KAAKY,UAAUH,MAAST,KAAKwxC,aAGvCxxC,KAAKyxC,eACLyC,EAAWl0C,KAAKY,UAAUF,OAAUV,KAAKyxC,cAGzCzxC,KAAK0xC,mBAAqB1xC,KAAKwxC,aAAexxC,KAAKyxC,aAC5C1wC,OAAOC,WAAaD,OAAOE,YAAcgzC,EAASC,EAGzDl0C,KAAKwxC,YACEyC,EAGPj0C,KAAKyxC,aACEyC,EAGJ,G,gCAMX,sBAAW,oBAAK,C,IAAhB,WACI,OAAOl0C,KAAKm0C,iB,gCAKhB,sBAAW,4BAAa,C,IAAxB,WACI,OAAOn0C,KAAKyO,gB,gCAOT,YAAA2lC,YAAP,WACI,MAAO,CAACp0C,KAAKyO,iBAQV,YAAAkB,eAAP,SAAsBF,EAAiCC,GACnD,OAAO1P,KAAKyO,eAAekB,eAAeF,EAAuBC,IAKrE,sBAAW,6BAAc,C,IAAzB,WACI,OAAO1P,KAAKyzC,iB,IAEhB,SAA0Bj5B,GAClBxa,KAAKyzC,iBAAmBj5B,IAGxBxa,KAAKyzC,iBACLzzC,KAAKyzC,gBAAgB3mB,SAErBtS,GACAA,EAAQ+S,UAEZvtB,KAAKyzC,gBAAkBj5B,I,gCAK3B,sBAAW,2BAAY,C,IAAvB,WACI,OAAKxa,KAAKq0C,QAGDr0C,KAAKq0C,MAAMC,c,IAExB,SAAwB70C,GACfO,KAAKq0C,OAGNr0C,KAAKq0C,MAAMC,gBAAkB70C,IAGjCO,KAAKq0C,MAAMC,cAAgB70C,I,gCAK/B,sBAAW,4BAAa,C,IAAxB,WACI,OAAOO,KAAKgyC,gB,IAEhB,SAAyBvyC,GACrBO,KAAKgyC,eAAiBvyC,G,gCAwCnB,YAAA6M,aAAP,WACI,MAAO,0BAOJ,YAAA00B,qBAAP,SAA4B8C,EAAkC71B,GACrDA,IACDA,EAAYjO,KAAKyO,gBAErBq1B,EAAK71B,GACL,IAAkB,UAAAA,EAAUiM,SAAV,eAAoB,CAAjC,IAAIE,EAAK,KACAA,EAAOF,SACbla,KAAKghC,qBAAqB8C,EAAkB1pB,GAGhD0pB,EAAK1pB,KASb,sBAAW,4CAA6B,C,IAAxC,WACI,OAAOpa,KAAKuyC,gC,IAGhB,SAAyC9yC,GACrCO,KAAKuyC,+BAAiC9yC,G,gCAYnC,YAAAqR,eAAP,SAAsByjC,EAAqBC,EAAqBC,EAAqBC,GACjF,GAAK10C,KAAKuyC,+BAGV,GAAKvyC,KAAKwyC,sBAEH,CAEH,IAAImC,EAAO5xC,KAAKc,KAAKd,KAAKG,IAAIlD,KAAKwyC,sBAAsBlwC,KAAOtC,KAAKwyC,sBAAsB/xC,MAAQ,EAAGg0C,IAClGG,EAAO7xC,KAAKc,KAAKd,KAAKG,IAAIlD,KAAKwyC,sBAAsBjwC,IAAMvC,KAAKwyC,sBAAsB9xC,OAAS,EAAGg0C,IACtG10C,KAAKwyC,sBAAsBlwC,KAAOS,KAAKa,MAAMb,KAAKC,IAAIhD,KAAKwyC,sBAAsBlwC,KAAMiyC,IACvFv0C,KAAKwyC,sBAAsBjwC,IAAMQ,KAAKa,MAAMb,KAAKC,IAAIhD,KAAKwyC,sBAAsBjwC,IAAKiyC,IACrFx0C,KAAKwyC,sBAAsB/xC,MAAQk0C,EAAO30C,KAAKwyC,sBAAsBlwC,KAAO,EAC5EtC,KAAKwyC,sBAAsB9xC,OAASk0C,EAAO50C,KAAKwyC,sBAAsBjwC,IAAM,OAR5EvC,KAAKwyC,sBAAwB,IAAIxuC,EAAQuwC,EAAaC,EAAaC,EAAcF,EAAc,EAAGG,EAAcF,EAAc,IAc/H,YAAA/iC,YAAP,WACIzR,KAAKuI,UAAW,GAOb,YAAAssC,YAAP,WACI,OAAO,IAAI,GAAM70C,OAOd,YAAAya,WAAP,SAAkBD,GAEd,OADAxa,KAAKyO,eAAegM,WAAWD,GACxBxa,MAOJ,YAAA4X,cAAP,SAAqB4C,GAEjB,OADAxa,KAAKyO,eAAemJ,cAAc4C,GAC3Bxa,MAKJ,YAAA0X,QAAP,WACI,IAAIlJ,EAAQxO,KAAK+R,WACZvD,IAGLxO,KAAK+yC,aAAe,KACpBvkC,EAAM2kC,+BAA+BrmC,OAAO9M,KAAKkzC,iBAC7ClzC,KAAK6zC,iBACLrlC,EAAMwkC,YAAYc,mBAAmBhnC,OAAO9M,KAAK6zC,iBAEjD7zC,KAAK80C,sBACLtmC,EAAMumC,uBAAuBjoC,OAAO9M,KAAK80C,sBAEzC90C,KAAKg1C,kBACLxmC,EAAM8e,oBAAoBxgB,OAAO9M,KAAKg1C,kBAEtCh1C,KAAKszC,sBACL9kC,EAAM+kC,wBAAwBzmC,OAAO9M,KAAKszC,sBAE1CtzC,KAAKi1C,2BACLzmC,EAAMwkC,YAAYkC,6BAA6BpoC,OAAO9M,KAAKi1C,2BAE3Dj1C,KAAKm0C,kBACLn0C,KAAKm0C,gBAAgBgB,QAAU,KAC/Bn1C,KAAKm0C,gBAAgBz8B,UACrB1X,KAAKm0C,gBAAkB,MAE3Bn0C,KAAKyO,eAAeiJ,UACpB1X,KAAKotB,sBAAsBzV,QAC3B3X,KAAKiyC,0BAA0Bt6B,QAC/B3X,KAAKoyC,wBAAwBz6B,QAC7B3X,KAAKqyC,sBAAsB16B,QAC3B3X,KAAKkyC,wBAAwBv6B,QAC7B3X,KAAKmyC,sBAAsBx6B,QAC3B,YAAMD,QAAO,aAET,YAAAq8B,UAAR,WACI,IAAIvlC,EAAQxO,KAAK+R,WACjB,GAAKvD,EAAL,CAIA,IAAI4mC,EAAS5mC,EAAMwkC,YACfzL,EAAcvnC,KAAKY,UACnB4mC,EAAc4N,EAAOC,iBAAmBr1C,KAAK6xC,aAC7CpK,EAAe2N,EAAOE,kBAAoBt1C,KAAK6xC,aAC/C7xC,KAAK2xC,qBACD3xC,KAAKwxC,aACL/J,EAAgBA,EAAeznC,KAAKwxC,YAAehK,EACnDA,EAAcxnC,KAAKwxC,aACZxxC,KAAKyxC,eACZjK,EAAeA,EAAcxnC,KAAKyxC,aAAgBhK,EAClDA,EAAeznC,KAAKyxC,eAGxBlK,EAAY9mC,QAAU+mC,GAAeD,EAAY7mC,SAAW+mC,IAC5DznC,KAAKu1C,QAAQ/N,EAAaC,GAC1BznC,KAAKyR,eACDzR,KAAKwxC,aAAexxC,KAAKyxC,eACzBzxC,KAAKyO,eAAeiD,mBAG5B1R,KAAK8Q,eAAe,EAAG,EAAGy2B,EAAY9mC,MAAQ,EAAG8mC,EAAY7mC,OAAS,KAGnE,YAAAqO,mBAAP,SAA0BP,GACtB,IAAI4mC,EAAS5mC,EAAMwkC,YACnB,OAAOhzC,KAAKuxC,oBAAoBiE,SAASJ,EAAOC,iBAAkBD,EAAOE,oBAQtE,YAAA3V,qBAAP,SAA4BpxB,EAAmBknC,GAC3C,IAAIjnC,EAAQxO,KAAK+R,WACjB,IAAKvD,EACD,OAAO,IAAQ9E,OAEnB,IAAIoF,EAAiB9O,KAAK+O,mBAAmBP,GACzCQ,EAAoB,IAAQC,QAAQV,EAAUknC,EAAajnC,EAAMU,qBAAsBJ,GAE3F,OADAE,EAAkB0mC,aAAa11C,KAAK21C,aAC7B,IAAI,IAAQ3mC,EAAkBtL,EAAGsL,EAAkBrL,IAEtD,YAAA0vC,aAAR,SAAqBD,GACjB,IAAIpzC,KAAKm0C,iBACuD,KAAvDf,EAAOwC,UAAY51C,KAAKm0C,gBAAgByB,WADjD,CAKA,GAAI51C,KAAKsxC,eAAiBtxC,KAAKgQ,gBAAgBpO,OAAQ,CACnD,IAAI4M,EAAQxO,KAAK+R,WACjB,IAAKvD,EACD,OAGJ,IADA,IAAIM,EAAiB9O,KAAK+O,mBAAmBP,GACzB,MAAAxO,KAAKgQ,gBAAL,eAAsB,CAArC,IAAIwK,EAAO,KACZ,GAAKA,EAAQ7G,UAAb,CAGA,IAAI7D,EAAO0K,EAAQjN,YACnB,GAAKuC,IAAQA,EAAK+lC,aAAlB,CAMA,IAAItnC,EAAWuB,EAAK8vB,gBAAkB9vB,EAAK8vB,kBAAkBC,eAAeC,OAAU,IAAQgW,aAC1F9mC,EAAoB,IAAQC,QAAQV,EAAUuB,EAAKiwB,iBAAkBvxB,EAAMU,qBAAsBJ,GACjGE,EAAkBI,EAAI,GAAKJ,EAAkBI,EAAI,EACjDoL,EAAQnL,eAAgB,GAG5BmL,EAAQnL,eAAgB,EAExBL,EAAkB0mC,aAAa11C,KAAK21C,aACpCn7B,EAAQrL,yBAAyBH,SAd7B,IAAM+mC,cAAa,WACfv7B,EAAQ3K,aAAa,YAgBhC7P,KAAKuI,UAAavI,KAAKyO,eAAeiF,WAG3C1T,KAAKuI,UAAW,EAChBvI,KAAKiV,UACLjV,KAAKg2C,QAAO,EAAMh2C,KAAKsyC,gBAKnB,YAAAr9B,QAAR,WACI,IAAIsyB,EAAcvnC,KAAKY,UACnB4mC,EAAcD,EAAY9mC,MAC1BgnC,EAAeF,EAAY7mC,OAE3BuR,EAAUjS,KAAKmf,aACnBlN,EAAQkB,KAAO,aACflB,EAAQW,YAAc,QAGtB5S,KAAKkyC,wBAAwB79B,gBAAgBrU,MAC7C,IAAI0nC,EAAU,IAAI1jC,EAAQ,EAAG,EAAGwjC,EAAaC,GAC7CznC,KAAK4T,gBAAkB,EACvB5T,KAAKyO,eAAe+E,QAAQk0B,EAASz1B,GACrCjS,KAAKmyC,sBAAsB99B,gBAAgBrU,MAC3CA,KAAKuI,UAAW,EAGZvI,KAAKwyC,sBACLxyC,KAAKyyC,cAAcjwC,SAASxC,KAAKwyC,uBAEjCxyC,KAAKyyC,cAAc/vC,eAAe,EAAG,EAAG8kC,EAAaC,GAEzDx1B,EAAQyT,UAAU1lB,KAAKyyC,cAAcnwC,KAAMtC,KAAKyyC,cAAclwC,IAAKvC,KAAKyyC,cAAchyC,MAAOT,KAAKyyC,cAAc/xC,QAC5GV,KAAK6Z,cACL5H,EAAQU,OACRV,EAAQmB,UAAYpT,KAAK6Z,YACzB5H,EAAQ+I,SAAShb,KAAKyyC,cAAcnwC,KAAMtC,KAAKyyC,cAAclwC,IAAKvC,KAAKyyC,cAAchyC,MAAOT,KAAKyyC,cAAc/xC,QAC/GuR,EAAQc,WAIZ/S,KAAKoyC,wBAAwB/9B,gBAAgBrU,MAC7CA,KAAKkV,gBAAkB,EACvBlV,KAAKyO,eAAewG,QAAQhD,EAASjS,KAAKwyC,uBAC1CxyC,KAAKqyC,sBAAsBh+B,gBAAgBrU,MAC3CA,KAAKwyC,sBAAwB,MAG1B,YAAAh3B,cAAP,SAAqBy6B,GACbj2C,KAAK+yC,eACL/yC,KAAK+yC,aAAav6B,MAAMy9B,OAASA,EACjCj2C,KAAK8xC,gBAAiB,IAIvB,YAAA96B,yBAAP,SAAgCwD,EAAkB7E,GAC9C3V,KAAKmX,iBAAiBxB,GAAa6E,EACnCxa,KAAKiyC,0BAA0B59B,gBAAgBmG,IAE3C,YAAA07B,WAAR,SAAmBxyC,EAAWC,EAAW+R,EAAcC,EAAmB1R,EAAqB2R,EAAiBC,GAC5G,IAAIrH,EAAQxO,KAAK+R,WACjB,GAAKvD,EAAL,CAGA,IAAI4mC,EAAS5mC,EAAMwkC,YACfzL,EAAcvnC,KAAKY,UACvB,GAAIZ,KAAKsxC,cAAe,CACpB,IACI6E,GADS3nC,EAAM4nC,wBAA0B5nC,EAAM6nC,cAC5BF,SACvBzyC,GAAS6jC,EAAY9mC,OAAS20C,EAAOC,iBAAmBc,EAAS11C,OACjEkD,GAAS4jC,EAAY7mC,QAAU00C,EAAOE,kBAAoBa,EAASz1C,QAEnEV,KAAKoxB,kBAAkBzb,GACvB3V,KAAKoxB,kBAAkBzb,GAAWG,oBAAoBJ,EAAMhS,EAAGC,EAAGgS,EAAW1R,IAIjFjE,KAAK8xC,gBAAiB,EACjB9xC,KAAKyO,eAAegH,gBAAgB/R,EAAGC,EAAG+R,EAAMC,EAAW1R,EAAa2R,EAAQC,KACjF7V,KAAKwb,cAAc,IACf9F,IAAS,IAAkBkB,aACvB5W,KAAK8W,iBAAiBnB,KACtB3V,KAAK8W,iBAAiBnB,GAAWQ,cAAcnW,KAAK8W,iBAAiBnB,WAC9D3V,KAAK8W,iBAAiBnB,KAKpC3V,KAAK8xC,gBACN9xC,KAAKwb,cAAc,IAEvBxb,KAAKs2C,kBAGF,YAAAC,kCAAP,SAAyCC,EAAwCh8B,GAC7E,IAAK,IAAI7E,KAAa6gC,EAAM,CACxB,GAAKA,EAAKpjB,eAAezd,GAGH6gC,EAAK7gC,KACH6E,UACbg8B,EAAK7gC,KAKjB,YAAAiF,0BAAP,SAAiCJ,GAC7Bxa,KAAKu2C,kCAAkCv2C,KAAKmX,iBAAkBqD,GAC9Dxa,KAAKu2C,kCAAkCv2C,KAAK8W,iBAAkB0D,IAG3D,YAAAi8B,OAAP,sBACQjoC,EAAQxO,KAAK+R,WACjB,GAAKvD,EAAL,CAIA,IAAIkoC,EAAe,IAAI,KAAS,EAAG,EAAG,EAAG,GAEzC12C,KAAK80C,qBAAuBtmC,EAAMumC,uBAAuB/nC,KAAI,SAAC4gC,EAAI5J,GAC9D,IAAIx1B,EAAOmoC,kBAAkC/I,EAAG5f,MAAQrY,aAGpDi4B,EAAGl4B,OAAS,IAAkBkB,aAC3Bg3B,EAAGl4B,OAAS,IAAkBwB,WAC9B02B,EAAGl4B,OAAS,IAAkBqB,aAC9B62B,EAAGl4B,OAAS,IAAkB0B,eAGhC5I,EAAL,CAIIo/B,EAAGl4B,OAAS,IAAkBkB,aAAgBg3B,EAAG5f,MAAuBrY,YACxE,EAAKo8B,uBAA0BnE,EAAG5f,MAAuBrY,WAG7D,IAAIy9B,EAAS5kC,EAAM4nC,wBAA0B5nC,EAAM6nC,aAC/CjB,EAAS5mC,EAAMwkC,YAEdI,EAMDA,EAAO+C,SAASS,cAAcxB,EAAOC,iBAAkBD,EAAOE,kBAAmBoB,IALjFA,EAAahzC,EAAI,EACjBgzC,EAAa/yC,EAAI,EACjB+yC,EAAaj2C,MAAQ20C,EAAOC,iBAC5BqB,EAAah2C,OAAS00C,EAAOE,mBAKjC,IAAI5xC,EAAI8K,EAAMqoC,SAAWzB,EAAO0B,0BAA4BJ,EAAahzC,EACrEC,EAAI6K,EAAMuoC,SAAW3B,EAAO0B,2BAA6B1B,EAAOE,kBAAoBoB,EAAa/yC,EAAI+yC,EAAah2C,QACtH,EAAK8U,qBAAsB,EAE3B,IAAIG,EAAai4B,EAAG5f,MAAuBrY,WAAa,EAAKo8B,uBAC7D,EAAKmE,WAAWxyC,EAAGC,EAAGiqC,EAAGl4B,KAAMC,EAAWi4B,EAAG5f,MAAM6M,OAA0B+S,EAAG5f,MAAOpY,OAA0Bg4B,EAAG5f,MAAOnY,QAEvH,EAAKL,sBACLo4B,EAAG+F,wBAA0B,EAAKn+B,yBAG1CxV,KAAKg3C,sBAAsBxoC,KA0BxB,YAAAof,wBAAP,WACIqpB,KAAK9yB,iBAAiB,OAAQnkB,KAAK0yC,iBAAiB,GACpDuE,KAAK9yB,iBAAiB,MAAOnkB,KAAK4yC,gBAAgB,GAClDqE,KAAK9yB,iBAAiB,QAASnkB,KAAK6yC,kBAAkB,IAKnD,YAAA3lB,0BAAP,WACI+pB,KAAKC,oBAAoB,OAAQl3C,KAAK0yC,iBACtCuE,KAAKC,oBAAoB,MAAOl3C,KAAK4yC,gBACrCqE,KAAKC,oBAAoB,QAASl3C,KAAK6yC,mBAOpC,YAAAsE,aAAP,SAAoBrnC,EAAoBsnC,GAAxC,gBAAwC,IAAAA,OAAA,GACpC,IAAI5oC,EAAQxO,KAAK+R,WACZvD,IAGLxO,KAAKg1C,iBAAmBxmC,EAAM8e,oBAAoBtgB,KAAI,SAAC4gC,EAAI5J,GACvD,GAAI4J,EAAGl4B,OAAS,IAAkBkB,aAC3Bg3B,EAAGl4B,OAAS,IAAkBwB,WAC9B02B,EAAGl4B,OAAS,IAAkBqB,YAFrC,CAMA,IAAIpB,EAAai4B,EAAG5f,MAAuBrY,WAAa,EAAKo8B,uBAC7D,GAAInE,EAAGyJ,UAAYzJ,EAAGyJ,SAASC,KAAO1J,EAAGyJ,SAASE,aAAeznC,EAAM,CACnE,IAAI0nC,EAAK5J,EAAGyJ,SAASI,wBACrB,GAAID,EAAI,CACJ,IAAIrjB,EAAO,EAAKvzB,UAChB,EAAKs1C,WAAWsB,EAAG9zC,EAAIywB,EAAK1zB,OAAQ,EAAM+2C,EAAG7zC,GAAKwwB,EAAKzzB,OAAQktC,EAAGl4B,KAAMC,EAAWi4B,EAAG5f,MAAM6M,cAE7F,GAAI+S,EAAGl4B,OAAS,IAAkBwB,WAKrC,GAJI,EAAKC,iBAAiBxB,IACtB,EAAKwB,iBAAiBxB,GAAWc,gBAAgBd,UAE9C,EAAKwB,iBAAiBxB,GACzB,EAAKgY,eAAgB,CACrB,IAAM+pB,EAAmB,EAAK/pB,eAAec,iBACzCkpB,GAAe,EACnB,GAAID,EACA,IAAoB,UAAAA,EAAA,eAAkB,CAAjC,IAAIl9B,EAAO,KAEZ,GAAI,IAASA,EAAQjO,MAArB,CAIA,IAAMqrC,EAAYp9B,EAAQjO,MAC1B,GAAIqrC,EAAU9gC,iBAAiBnB,IAAciiC,EAAU9gC,iBAAiBnB,GAAW3H,YAAYwM,GAAU,CACrGm9B,GAAe,EACf,QAIRA,IACA,EAAKhqB,eAAiB,YAGvBigB,EAAGl4B,OAAS,IAAkBkB,cACjC,EAAKE,iBAAiBnB,IACtB,EAAKmB,iBAAiBnB,GAAWQ,cAAc,EAAKW,iBAAiBnB,IAAY,UAE9E,EAAKmB,iBAAiBnB,QAGrC7F,EAAK+nC,wBAA0BT,EAC/Bp3C,KAAKg3C,sBAAsBxoC,KAMxB,YAAAspC,mBAAP,SAA0Bt9B,GACtBxa,KAAK2tB,eAAiBnT,EACtBxa,KAAKiX,mBAA0BuD,EAC/Bxa,KAAK4xC,sBAAuB,GAExB,YAAA0E,aAAR,WACI,GAAIt2C,KAAK4xC,qBAGL,OAFA5xC,KAAK4xC,sBAAuB,OAC5B5xC,KAAKiX,mBAA0BjX,KAAKyzC,iBAIxC,GAAIzzC,KAAKyzC,iBACDzzC,KAAKyzC,kBAA0BzzC,KAAKiX,mBAAqB,CACzD,GAAIjX,KAAKiX,mBAAmBnM,iBACxB,OAEJ9K,KAAK2tB,eAAiB,OAI1B,YAAAqpB,sBAAR,SAA8BxoC,GAA9B,WACIxO,KAAKi1C,0BAA4BzmC,EAAMwkC,YAAYkC,6BAA6BloC,KAAI,SAAC+qC,GAC7E,EAAKjhC,iBAAiBihC,EAAapiC,YACnC,EAAKmB,iBAAiBihC,EAAapiC,WAAWQ,cAAc,EAAKW,iBAAiBihC,EAAapiC,mBAE5F,EAAKmB,iBAAiBihC,EAAapiC,WACtC,EAAKwB,iBAAiB4gC,EAAapiC,YAAc,EAAKwB,iBAAiB4gC,EAAapiC,aAAe,EAAKyb,kBAAkB2mB,EAAapiC,aACvI,EAAKwB,iBAAiB4gC,EAAapiC,WAAWc,yBACvC,EAAKU,iBAAiB4gC,EAAapiC,gBAcxC,EAAAqiC,cAAd,SAA4BloC,EAAoBrP,EAAcC,EAAe02C,EAA2Ba,QAAxD,IAAAx3C,MAAA,WAAc,IAAAC,MAAA,WAAe,IAAA02C,OAAA,QAA2B,IAAAa,OAAA,GACpG,IAAIn1C,EAAS,IAAIo1C,EAAuBpoC,EAAKzI,KAAO,0BAA2B5G,EAAOC,EAAQoP,EAAKiC,YAAY,EAAM,KAAQomC,wBACzHC,EAAW,IAAI,KAAiB,iCAAkCtoC,EAAKiC,YAc3E,OAbAqmC,EAASC,iBAAkB,EAC3BD,EAASE,aAAe,IAAOC,QAC/BH,EAASI,cAAgB,IAAOD,QAC5BN,GACAG,EAASK,eAAiB31C,EAC1Bs1C,EAASM,gBAAkB51C,EAC3BA,EAAO8wC,UAAW,IAElBwE,EAASM,gBAAkB51C,EAC3Bs1C,EAASO,eAAiB71C,GAE9BgN,EAAKsoC,SAAWA,EAChBt1C,EAAOq0C,aAAarnC,EAAMsnC,GACnBt0C,GAcG,EAAA81C,mBAAd,SAAiCvxC,EAAcwxC,EAA4BrqC,EAA+BsqC,QAA3D,IAAAD,OAAA,QAA4B,IAAArqC,MAAA,WAA+B,IAAAsqC,MAAW,KAAQC,uBACzH,IAAIj2C,EAAS,IAAIo1C,EAAuB7wC,EAAM,EAAG,EAAGmH,GAAO,EAAOsqC,GAE9DzE,EAAQ,IAAI,KAAMhtC,EAAO,SAAU,KAAMmH,GAAQqqC,GAMrD,OALAxE,EAAMc,QAAUryC,EAChBA,EAAOqxC,gBAAkBE,EACzBvxC,EAAOwuC,eAAgB,EAEvBxuC,EAAO2zC,SACA3zC,GAEf,EA92BA,CAA4C,M,SCvC5C,cA6FI,WAIWqyC,GAAA,KAAAA,UAhGH,KAAA6D,oBAAqB,EACrB,KAAAC,YAAc,IAAI,KAElB,KAAAC,oBAAqB,EACrB,KAAAC,YAAc,IAAI,KAGlB,KAAAC,uBAAqE,KACrE,KAAAC,qBAAmE,KACnE,KAAAC,uBAAqE,KACrE,KAAAC,qBAAmE,KAwG/E,OAjGI,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOv5C,KAAKi5C,a,gCAMhB,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOj5C,KAAKm5C,a,gCAMhB,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOn5C,KAAKg5C,oB,IAGhB,SAA6Bv5C,GAA7B,WACQA,IAAUO,KAAKg5C,qBAInBh5C,KAAKg5C,mBAAqBv5C,EAEtBA,GACAO,KAAKo5C,uBAAyBp5C,KAAKm1C,QAAQ/C,wBAAwBplC,KAAI,WACnE,EAAKisC,YAAYO,qBAGrBx5C,KAAKq5C,qBAAuBr5C,KAAKm1C,QAAQ9C,sBAAsBrlC,KAAI,WAC/D,EAAKisC,YAAYQ,eAAc,QAGnCz5C,KAAKm1C,QAAQ/C,wBAAwBtlC,OAAO9M,KAAKo5C,wBACjDp5C,KAAKo5C,uBAAyB,KAC9Bp5C,KAAKm1C,QAAQ9C,sBAAsBvlC,OAAO9M,KAAKq5C,sBAC/Cr5C,KAAKq5C,qBAAuB,Q,gCAOpC,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOr5C,KAAKk5C,oB,IAGhB,SAA6Bz5C,GAA7B,WACQA,IAAUO,KAAKk5C,qBAInBl5C,KAAKk5C,mBAAqBz5C,EAEtBA,GACAO,KAAKs5C,uBAAyBt5C,KAAKm1C,QAAQjD,wBAAwBllC,KAAI,WACnE,EAAKmsC,YAAYK,qBAGrBx5C,KAAKu5C,qBAAuBv5C,KAAKm1C,QAAQhD,sBAAsBnlC,KAAI,WAC/D,EAAKmsC,YAAYM,eAAc,QAGnCz5C,KAAKm1C,QAAQjD,wBAAwBplC,OAAO9M,KAAKs5C,wBACjDt5C,KAAKs5C,uBAAyB,KAC9Bt5C,KAAKm1C,QAAQhD,sBAAsBrlC,OAAO9M,KAAKu5C,sBAC/Cv5C,KAAKu5C,qBAAuB,Q,gCAkB7B,YAAA7hC,QAAP,WACI1X,KAAKm1C,QAAQ/C,wBAAwBtlC,OAAO9M,KAAKo5C,wBACjDp5C,KAAKo5C,uBAAyB,KAC9Bp5C,KAAKm1C,QAAQ9C,sBAAsBvlC,OAAO9M,KAAKq5C,sBAC/Cr5C,KAAKq5C,qBAAuB,KAC5Br5C,KAAKm1C,QAAQjD,wBAAwBplC,OAAO9M,KAAKs5C,wBACjDt5C,KAAKs5C,uBAAyB,KAC9Bt5C,KAAKm1C,QAAQhD,sBAAsBrlC,OAAO9M,KAAKu5C,sBAC/Cv5C,KAAKu5C,qBAAuB,KAEtBv5C,KAAKm1C,QAAW,MAE9B,EAnHA,GCNA,cAyBI,WAAYuE,QAAA,IAAAA,MAAA,MAxBJ,KAAAC,OAAc,GAEd,KAAAC,WAAkB,CACtBC,QAAS,EACTC,UAAW,EACX1hC,KAAM,GAGF,KAAA2hC,WAAqB,EAErB,KAAAC,kBAAyB,CAC7B,wBAA2B,EAC3B,sBAAyB,EACzB,oBAAuB,EACvB,kBAAqB,EACrB,QAAW,GAUPN,IACA15C,KAAKi6C,aAAeP,GA8ShC,OA1SY,YAAAQ,iBAAR,SAAyBC,GACrB,IAAIN,EAAe94C,OAEff,KAAKi6C,eACLJ,EAAU75C,KAAKi6C,cAEnB,IAAIx6C,EAAQ06C,EACZ16C,EAAQA,EAAM2e,MAAM,KAEpB,IAAK,IAAI5a,EAAI,EAAGA,EAAI/D,EAAMmC,OAAQ4B,IAC9Bq2C,EAAUA,EAAQp6C,EAAM+D,IAE5B,OAAOq2C,GAIH,YAAAO,mBAAR,SAA2BC,GACvB,IAAMP,EAAYO,EAAcj8B,MAAM,KAEtC,OADkB,IAAWk8B,SAAS,eAAiBR,EAAU,IAChDA,EAAU,KAGvB,YAAAS,kBAAR,SAA0BC,EAAWntC,EAAaotC,QAAA,IAAAA,OAAA,GAC9C,IACI,IACIC,EAAU,IADE,IAAWJ,SAAS,eAAiBE,EAAKG,WAGtDttC,GAAUotC,GACVptC,EAAOoN,WAAWigC,GAGtB,IAAK,IAAIl3C,EAAI,EAAGA,EAAIg3C,EAAKI,WAAWh5C,OAAQ4B,IAExC,IAAIg3C,EAAKI,WAAWp3C,GAAG6D,KAAKmoC,cAAcqL,SAAS,cAInD,GAAIL,EAAKI,WAAWp3C,GAAG6D,KAAKmoC,cAAcqL,SAAS,cAAnD,CAEI,IAAIhB,EAAU75C,KAAKk6C,iBAAiBM,EAAKI,WAAWp3C,GAAG/D,OACvDi7C,EAAQF,EAAKI,WAAWp3C,GAAG6D,MAAM2F,IAAI6sC,QAGlC,GAA+B,gBAA3BW,EAAKI,WAAWp3C,GAAG6D,KACtBrH,KAAKi6C,aACLS,EAAQ7qC,aAAa7P,KAAKi6C,aAAaO,EAAKI,WAAWp3C,GAAG/D,QAE1Di7C,EAAQ7qC,aAAa9O,OAAOy5C,EAAKI,WAAWp3C,GAAG/D,aAEhD,GAAI+6C,EAAKI,WAAWp3C,GAAG/D,MAAMq7C,WAAW,OAASN,EAAKI,WAAWp3C,GAAG/D,MAAMs7C,SAAS,MAAO,CACzFlB,EAAU75C,KAAKk6C,iBAAiBM,EAAKI,WAAWp3C,GAAG/D,MAAMuxB,UAAU,EAAGwpB,EAAKI,WAAWp3C,GAAG/D,MAAMmC,OAAS,IAC5G84C,EAAQF,EAAKI,WAAWp3C,GAAG6D,MAAQwyC,OAC3B75C,KAAKg6C,kBAAkBQ,EAAKI,WAAWp3C,GAAG6D,MAOlDqzC,EAAQF,EAAKI,WAAWp3C,GAAG6D,MAAQrH,KAAKo6C,mBAAmBI,EAAKI,WAAWp3C,GAAG/D,OAN9C,QAA5B+6C,EAAKI,WAAWp3C,GAAG/D,OAA+C,SAA5B+6C,EAAKI,WAAWp3C,GAAG/D,MACzDi7C,EAAQF,EAAKI,WAAWp3C,GAAG6D,MAAqC,QAA5BmzC,EAAKI,WAAWp3C,GAAG/D,MAEvDi7C,EAAQF,EAAKI,WAAWp3C,GAAG6D,MAASsF,MAAMrJ,OAAOk3C,EAAKI,WAAWp3C,GAAG/D,QAA6C+6C,EAAKI,WAAWp3C,GAAG/D,MAAtD6D,OAAOk3C,EAAKI,WAAWp3C,GAAG/D,OAOpH,IAAK+6C,EAAKI,WAAWI,aAAa,MAE9B,OADAh7C,KAAK25C,OAAOa,EAAKG,SAAWM,OAAOlM,KAAK/uC,KAAK25C,QAAQ/3C,OAAS,QAAU84C,EACjEA,EAGX,IAAIQ,EAAKV,EAAKI,WAAWI,aAAa,MAAMv7C,MAK5C,GAJIy7C,EAAGJ,WAAW,OAASI,EAAGH,SAAS,QACnCG,EAAKl7C,KAAKk6C,iBAAiBgB,EAAGlqB,UAAU,EAAGkqB,EAAGt5C,OAAS,KAGtD5B,KAAK25C,OAAOuB,GAGb,KAAM,uFAEV,OAJIl7C,KAAK25C,OAAOuB,GAAMR,EAIfA,EAET,MAAOv1B,GACL,KAAM,+CAAiDq1B,EAAKG,SAAW,IAAMx1B,EAAI,MAIjF,YAAAg2B,WAAR,SAAmBX,EAAWE,EAAcrtC,GAYxC,IAXA,IAAI5M,EACAC,EACA06C,EAEAC,EAEAC,EAHAC,EAAOf,EAAKtgC,SAEZ5Z,GAAU,EAEVk7C,GAAa,EACbC,GAAgB,EAChBC,EAAqB,EAEhBl4C,EAAI,EAAGA,EAAI+3C,EAAK35C,OAAQ4B,IAC7B,GAAI+3C,EAAK/3C,GAAGm4C,UAAY37C,KAAK45C,WAAWC,QAAxC,CAGA,GAAwB,OAApB0B,EAAK/3C,GAAGm3C,SACR,KAAM,sDAAwDY,EAAK/3C,GAAGm3C,SAK1E,GAHAa,GAAa,EACbJ,EAAUG,EAAK/3C,GAAG0W,UAEbqhC,EAAK/3C,GAAGo3C,WAAWI,aAAa,UACjC,KAAM,6DAEVt6C,EAAS4C,OAAOi4C,EAAK/3C,GAAGo3C,WAAWI,aAAa,UAAUY,WAC1Dt7C,IAAUi7C,EAAK/3C,GAAGo3C,WAAWI,aAAa,YAAaa,KAAKC,MAAMP,EAAK/3C,GAAGo3C,WAAWI,aAAa,WAAWY,WAC7GlB,EAAQ/oB,iBAAiBjxB,EAAQJ,GAEjC,IAAK,IAAI0lC,EAAI,EAAGA,EAAIoV,EAAQx5C,OAAQokC,IAChC,GAAIoV,EAAQpV,GAAG2V,UAAY37C,KAAK45C,WAAWC,QAA3C,CAGA,GAA2B,UAAvBuB,EAAQpV,GAAG2U,SACX,KAAM,yDAA2DS,EAAQpV,GAAG2U,SAGhF,GADAc,GAAgB,EACZD,EAAY,GAAKC,EAAeC,EAChC,KAAM,gJAGV,GAAiB,GAAbF,EAAgB,CAChB,IAAKJ,EAAQpV,GAAG4U,WAAWI,aAAa,SACpC,KAAM,wFAEVv6C,EAAQ6C,OAAO83C,EAAQpV,GAAG4U,WAAWI,aAAa,SAASY,WAC3Dt7C,IAAU86C,EAAQpV,GAAG4U,WAAWI,aAAa,YAAaa,KAAKC,MAAMV,EAAQpV,GAAG4U,WAAWI,aAAa,WAAWY,WACnHlB,EAAQ9oB,oBAAoBnxB,EAAOH,GAGvC+6C,EAAQD,EAAQpV,GAAG9rB,SAEnB,IAAK,IAAI6hC,EAAI,EAAGA,EAAIV,EAAMz5C,OAAQm6C,IAC1BV,EAAMU,GAAGJ,UAAY37C,KAAK45C,WAAWC,UAGzCyB,EAAWt7C,KAAKu6C,kBAAkBc,EAAMU,GAAIrB,GAAS,GACrDA,EAAQjgC,WAAW6gC,EAAUE,EAAWC,GACpCJ,EAAMU,GAAGC,YACTh8C,KAAKi8C,UAAUZ,EAAMU,GAAGC,WAAYV,IAI/B,GAAbE,IACAE,EAAqBD,GAEzBA,GAAgB,EAGhBjB,EAAK0B,aACLl8C,KAAKi8C,UAAUzB,EAAK0B,YAAa7uC,IAIjC,YAAA8uC,cAAR,SAAsB3B,EAAWE,EAAcrtC,GAEvCmtC,EAAKwB,YACLh8C,KAAKi8C,UAAUzB,EAAKwB,WAAYtB,GAGhCF,EAAK0B,aACLl8C,KAAKi8C,UAAUzB,EAAK0B,YAAa7uC,IAIjC,YAAA+uC,sBAAR,SAA8B5B,EAAWE,EAAc2B,EAAe76C,EAAa86C,GAC3Et8C,KAAKi6C,aACLj6C,KAAKi6C,aAAaoC,GAAY76C,EAAO86C,GAErCv7C,OAAOs7C,GAAY76C,EAAO86C,GAG1B9B,EAAKwB,YACLh8C,KAAKi8C,UAAUzB,EAAKwB,WAAYtB,GAAS,IAIzC,YAAA6B,yBAAR,SAAiC/B,EAAWE,EAAcrtC,GACtD,IAAImvC,EAAahC,EAAKI,WAAWI,aAAa,cAAcv7C,MAC5D,IAAK+8C,EAAW3B,SAAS,QACrB,KAAM,sEAEN,IAAI4B,GAAU,EACVC,EAAiBF,EAAWp+B,MAAM,QACtC,GAAIs+B,EAAe96C,OAAS,EACxB,KAAM,iFAEV,IAAIJ,EAASk7C,EAAe,GAe5B,GAdIl7C,EAAOs5C,WAAW,MAAQt5C,EAAOu5C,SAAS,OAC1C0B,GAAU,KAGTA,GAAYj7C,EAAOs5C,WAAW,MAAQt5C,EAAOu5C,SAAS,QACvDv5C,EAASA,EAAOwvB,UAAU,EAAGxvB,EAAOI,OAAS,IAI7CJ,EADAxB,KAAKi6C,aACIj6C,KAAKi6C,aAAaz4C,GAElBT,OAAOS,GAGhBi7C,EACA,IAAK,IAAIj5C,EAAI,EAAGA,EAAIhC,EAAOI,OAAQ4B,IAC/BxD,KAAKo8C,sBAAsB5B,EAAME,EAASgC,EAAe,GAAIl7C,EAAQgC,QAGzE,IAAK,IAAIA,KAAKhC,EACVxB,KAAKo8C,sBAAsB5B,EAAME,EAASgC,EAAe,GAAIl7C,EAAQgC,GAIzEg3C,EAAK0B,aACLl8C,KAAKi8C,UAAUzB,EAAK0B,YAAa7uC,IAKrC,YAAA4uC,UAAR,SAAkBzB,EAAWntC,EAAasvC,GAEtC,QAFsC,IAAAA,OAAA,GAElCnC,EAAKmB,UAAY37C,KAAK45C,WAAWC,QAArC,CAOI8C,GACAnC,EAAKoC,aAAa,KAAMvvC,EAAO6tC,IAAM7tC,EAAOsM,UAAU/X,OAAS,IAGnE,IAAI84C,EAAU16C,KAAKu6C,kBAAkBC,EAAMntC,GAEtB,QAAjBmtC,EAAKG,SACL36C,KAAKm7C,WAAWX,EAAME,EAASrtC,GACvBmtC,EAAKI,WAAWI,aAAa,cAGrCh7C,KAAKu8C,yBAAyB/B,EAAME,EAASrtC,GAF7CrN,KAAKm8C,cAAc3B,EAAME,EAASrtC,QAf9BmtC,EAAK0B,aACLl8C,KAAKi8C,UAAUzB,EAAK0B,YAAa7uC,EAAQsvC,IAwB9C,YAAA1S,SAAP,WACI,OAAOjqC,KAAK+5C,WAQT,YAAA8C,YAAP,SAAmB3B,GACf,OAAOl7C,KAAK25C,OAAOuB,IAOhB,YAAA4B,SAAP,WACI,OAAO98C,KAAK25C,QAST,YAAAoD,WAAP,SAAkBC,EAAcC,EAAeC,GAC3C,IAAIC,EAAQ,IAAIC,eAChBD,EAAME,mBAAqB,WACvB,GAAwB,GAApBF,EAAMG,YAAmC,KAAhBH,EAAMI,OAAe,CAC9C,IAAKJ,EAAMK,YACP,KAAM,4DAGV,IAAIC,EAASN,EAAMK,YAAY55B,gBAC/B5jB,KAAKi8C,UAAUwB,EAAOzB,WAAYiB,GAClCj9C,KAAK+5C,WAAY,EACbmD,GACAA,MAGVQ,KAAK19C,MAEPm9C,EAAMQ,KAAK,MAAOX,GAAS,GAC3BG,EAAMS,QAEd,EAzUA,G,SCAA,eAMI,WAAmBp8C,EAERyC,QAAA,IAAAA,MAAA,GAFX,MAGI,YAAMzC,EAAOkC,EAAGlC,EAAOmC,EAAGnC,EAAO4N,IAAE,K,OAD5B,EAAAnL,c,EAGf,OAXqC,iBAWrC,EAXA,CAAqC,KCWrC,cAuLI,WAEWoD,GAAA,KAAAA,OArLH,KAAA2C,WAAa,EACb,KAAAC,aAAe,EACf,KAAAE,gBAA6C,GAC7C,KAAAP,YAAa,EAgDd,KAAA8B,wBAA0B,IAAI,IAK9B,KAAAC,uBAAyB,IAAI,IAK7B,KAAAC,wBAA0B,IAAI,IAK9B,KAAAC,sBAAwB,IAAI,IAK5B,KAAAC,yBAA2B,IAAI,IAK/B,KAAAC,yBAA2B,IAAI,IAQ9B,KAAA8xC,WAAa,IAAIjuC,MA6V7B,OA3aI,sBAAW,uBAAQ,C,IAAnB,WACI,OAAK5P,KAAK89C,MAIH99C,KAAK89C,MAAMvvC,SAHP,IAAQ7E,Q,IAMvB,SAAoBjK,GACXO,KAAK89C,QAIV99C,KAAK89C,MAAMvvC,SAAW9O,I,gCAI1B,sBAAW,sBAAO,C,IAAlB,WACI,OAAKO,KAAK89C,MAIH99C,KAAK89C,MAAMC,QAHP,IAAI,IAAQ,EAAG,EAAG,I,IAMjC,SAAmBt+C,GACVO,KAAK89C,QAIV99C,KAAK89C,MAAMC,QAAUt+C,I,gCAsDzB,sBAAW,wBAAS,C,IAApB,WACI,OAAOO,KAAK69C,Y,gCAST,YAAAG,YAAP,SAAmBC,GAAnB,WAGI,IAAe,IAFHj+C,KAAK69C,WAAW5tC,QAAQguC,GAGhC,OAAOj+C,KAGXi+C,EAASC,OACT,IAAI1vC,EAAQxO,KAAKuM,MAAMiC,MAWvB,OAVIA,EAAM2vC,UAEN3vC,EAAM4vC,uBAAuB18B,SAAQ,WACjCu8B,EAASxH,OAAO,MAGpBwH,EAASxH,OAAOz2C,MAEpBA,KAAK69C,WAAW1tC,KAAK8tC,GAEdj+C,MASJ,YAAAq+C,eAAP,SAAsBJ,GAClB,IAAIluC,EAAQ/P,KAAK69C,WAAW5tC,QAAQguC,GAEpC,OAAe,IAAXluC,IAIJ/P,KAAK69C,WAAW9tC,GAAOuuC,SACvBt+C,KAAK69C,WAAW3tC,OAAOH,EAAO,IAJnB/P,MAeR,YAAAu+C,kBAAP,SAAyBl3C,GACrB,IAAqB,UAAArH,KAAK69C,WAAL,eAAiB,CAAjC,IAAII,EAAQ,KACb,GAAIA,EAAS52C,OAASA,EAClB,OAAO42C,EAIf,OAAO,MAIX,sBAAW,wBAAS,C,IAApB,WACI,OAAOj+C,KAAK4J,Y,IAGhB,SAAqBnK,GACjB,GAAIO,KAAK4J,aAAenK,EAAxB,CAIAO,KAAK4J,WAAanK,EAElB,IAAIqQ,EAAO9P,KAAK8P,KACZA,GACAA,EAAK0uC,WAAW/+C,K,gCAgBxB,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOO,KAAKqM,gB,gCAOT,YAAAC,aAAP,WACI,OAAOtM,KAAKqM,gBAGN,YAAAA,aAAV,WACI,MAAO,aAMX,sBAAW,mBAAI,C,IAAf,WACI,OAAOrM,KAAK89C,O,gCAMhB,sBAAW,mBAAI,C,IAAf,WACI,OAAI99C,KAAK89C,iBAAiB,IACf99C,KAAK89C,MAGT,M,gCAQJ,YAAAW,oBAAP,SAA2BjE,GAIvB,OAHIx6C,KAAK89C,QACL99C,KAAK89C,MAAMzwC,OAASmtC,GAEjBx6C,MAIJ,YAAA0+C,aAAP,SAAoBlwC,GAChB,IAAKxO,KAAK89C,MAAO,CAGb,GAFA99C,KAAK89C,MAAQ99C,KAAK2+C,YAAYnwC,IAEzBxO,KAAKw6C,KACN,OAEJx6C,KAAK89C,MAAOnzC,SAAW3K,KACvBA,KAAK89C,MAAOvvC,SAAWvO,KAAKuO,SAC5BvO,KAAK89C,MAAOC,QAAU/9C,KAAK+9C,QAE3B,IAAIjuC,EAAO9P,KAAK8P,KACZA,IACAA,EAAK8uC,YAAa,EAElB5+C,KAAK6+C,gBAAgB/uC,MAWvB,YAAA6uC,YAAV,SAAsBnwC,GAElB,OAAO,MAOD,YAAAqwC,gBAAV,SAA0B/uC,GACtBA,EAAKsoC,SAAW,MAMb,YAAAriC,eAAP,SAAsBC,EAAmBC,GACrCjW,KAAK0L,wBAAwB2I,gBAAgB4B,GAAc,EAAGD,EAAQhW,OAInE,YAAAkW,gBAAP,SAAuBF,GACnB,QAAIhW,KAAKiK,YAAc,MAIG,IAAtBjK,KAAKiK,cACLjK,KAAKiK,YAAc,GAGvBjK,KAAKiK,cAELjK,KAAK+L,yBAAyBsI,gBAAgBrU,MAAO,EAAGgW,EAAQhW,MAE5DA,KAAK6nB,uBACL7nB,KAAK6nB,yBAGF,IAIJ,YAAA1R,cAAP,SAAqBH,GACjBhW,KAAKiK,YAAc,EAEnBjK,KAAK2L,uBAAuB0I,gBAAgBrU,MAAO,EAAGgW,EAAQhW,MAE1DA,KAAK8nB,qBACL9nB,KAAK8nB,uBAKN,YAAAzR,eAAP,SAAsBL,EAAmBC,EAAsBN,EAAmB1R,GAC9E,OAAwB,IAApBjE,KAAKgK,YACLhK,KAAKgK,cACE,IAGXhK,KAAKgK,aAELhK,KAAKmK,gBAAgBwL,IAAa,EAElC3V,KAAK4L,wBAAwByI,gBAAgB,IAAI,GAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,MAEpGA,KAAK+nB,sBACL/nB,KAAK+nB,wBAGF,IAIJ,YAAAzR,aAAP,SAAoBN,EAAmBC,EAAsBN,EAAmB1R,EAAqBsS,GACjGvW,KAAKgK,oBACEhK,KAAKmK,gBAAgBwL,GAExB3V,KAAKgK,WAAa,EAElBhK,KAAKgK,WAAa,EAIC,GAAnBhK,KAAKgK,aACDuM,IAAgBvW,KAAKiK,YAAc,IAA2B,IAAtBjK,KAAKiK,cAC7CjK,KAAK8L,yBAAyBuI,gBAAgB,IAAI,GAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,MAE7GA,KAAK6L,sBAAsBwI,gBAAgB,IAAI,GAAgB4B,EAAahS,IAAe,EAAG+R,EAAQhW,MAElGA,KAAKgoB,oBACLhoB,KAAKgoB,uBAMV,YAAA82B,eAAP,SAAsBnpC,GAClB,QADkB,IAAAA,MAAA,MACA,OAAdA,EACA3V,KAAKsW,aAAatW,KAAM,IAAQ0J,OAAQiM,EAAW,GAAG,OACnD,CACH,IAAK,IAAIe,KAAO1W,KAAKmK,gBACjBnK,KAAKsW,aAAatW,KAAM,IAAQ0J,QAASgN,EAAe,GAAG,GAE3D1W,KAAKgK,WAAa,IAClBhK,KAAKgK,WAAa,EAClBhK,KAAKsW,aAAatW,KAAM,IAAQ0J,OAAQ,EAAG,GAAG,MAOnD,YAAAoM,oBAAP,SAA2BJ,EAAcqpC,EAAsBppC,EAAmB1R,GAC9E,GAAIyR,IAAS,IAAkBkB,YAAa,CACxC5W,KAAK+V,eAAe/V,KAAM++C,GAE1B,IAAIloC,EAAsB7W,KAAKuM,MAAMuK,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwB7W,MAC/C6W,EAAoBV,cAAcnW,MAGlC6W,IAAwB7W,MACxBA,KAAKkW,gBAAgBlW,MAGzBA,KAAKuM,MAAMuK,iBAAiBnB,GAAa3V,MAClC,EAGX,OAAI0V,IAAS,IAAkBqB,aAC3B/W,KAAKqW,eAAerW,KAAM++C,EAAappC,EAAW1R,GAClDjE,KAAKuM,MAAM4K,iBAAiBxB,GAAa3V,KACzCA,KAAKuM,MAAM0K,mBAAqBjX,MACzB,GAGP0V,IAAS,IAAkBwB,YACvBlX,KAAKuM,MAAM4K,iBAAiBxB,IAC5B3V,KAAKuM,MAAM4K,iBAAiBxB,GAAWW,aAAatW,KAAM++C,EAAappC,EAAW1R,GAAa,UAE5FjE,KAAKuM,MAAM4K,iBAAiBxB,IAC5B,IAOR,YAAAqpC,aAAP,WACQh/C,KAAK89C,QACL99C,KAAK89C,MAAMpmC,UACX1X,KAAK89C,MAAQ,OAOd,YAAApmC,QAAP,WACI1X,KAAK4L,wBAAwB+L,QAC7B3X,KAAK+L,yBAAyB4L,QAC9B3X,KAAK0L,wBAAwBiM,QAC7B3X,KAAK2L,uBAAuBgM,QAC5B3X,KAAK6L,sBAAsB8L,QAC3B3X,KAAK8L,yBAAyB6L,QAE9B3X,KAAKg/C,eAGL,IAAqB,UAAAh/C,KAAK69C,WAAL,eAAiB,CAArB,KACJS,WAGrB,EArbA,GCRA,eAKI,WAAYj3C,G,OACR,YAAMA,IAAK,KAWnB,OAjBsC,iBASxB,YAAAgF,aAAV,WACI,MAAO,oBAID,YAAAsyC,YAAV,SAAsBnwC,GAClB,OAAO,IAAI,KAAc,SAAWxO,KAAKqH,OAEjD,EAjBA,CAAsC,I,SCUtC,eAwDI,WAAYA,GAAZ,MACI,YAAMA,IAAK,K,OApDP,EAAA43C,mBAAqB,IACrB,EAAAC,mBAAqB,EAuDzB,EAAKr3B,sBAAwB,WACpB,EAAK/X,OAGS,EAAKqvC,iBAAkBC,cAAgB,IAAO9rB,QAGrE,EAAKxL,oBAAsB,WACJ,EAAKq3B,iBAAkBC,cAAgB,IAAO7G,SAGrE,EAAKxwB,qBAAuB,WACnB,EAAKjY,MAIV,EAAKA,KAAKiuC,QAAQrI,aAAa,MAGnC,EAAK1tB,mBAAqB,WACjB,EAAKlY,MAIV,EAAKA,KAAKiuC,QAAQrI,aAAa,EAAM,M,EAuFjD,OA5K8B,iBAW1B,sBAAW,gCAAiB,C,IAA5B,WACI,OAAO11C,KAAKi/C,oB,IAGhB,SAA6Bx/C,GACrBO,KAAKi/C,qBAAuBx/C,IAIhCO,KAAKi/C,mBAAqBx/C,EAC1BO,KAAKq/C,kB,gCAMT,sBAAW,gCAAiB,C,IAA5B,WACI,OAAOr/C,KAAKk/C,oB,IAGhB,SAA6Bz/C,GACrBO,KAAKk/C,qBAAuBz/C,IAIhCO,KAAKk/C,mBAAqBz/C,EAC1BO,KAAKq/C,kB,gCAGC,YAAAC,sBAAV,WACQt/C,KAAKu/C,iBACLv/C,KAAKu/C,eAAe7nC,UACpB1X,KAAKu/C,eAAiB,OAIpB,YAAAF,cAAV,WACIr/C,KAAKs/C,wBACLt/C,KAAKw/C,QAAUx/C,KAAKy/C,UA2CxB,sBAAW,sBAAO,C,IAAlB,WACI,OAAOz/C,KAAKy/C,U,IAGhB,SAAmBhgD,GACfO,KAAKy/C,SAAWhgD,EAEXO,KAAKuM,OAAUvM,KAAKuM,MAAMmzC,eAI1B1/C,KAAKu/C,eAONv/C,KAAKu/C,eAAeI,cAAcjlC,iBANlC1a,KAAKu/C,eAAiB,IAAI,GAAuB,SAAUv/C,KAAKi/C,mBAAoBj/C,KAAKi/C,mBAAoBj/C,KAAKuM,MAAMmzC,aAAaE,mBAAmB,EAAM,KAAQzH,wBACtKn4C,KAAKu/C,eAAeI,cAAch5C,OAAS3G,KAAKk/C,mBAChDl/C,KAAKu/C,eAAeI,cAAc/4C,OAAS5G,KAAKk/C,mBAChDl/C,KAAKu/C,eAAejN,aAAc,GAMtCtyC,KAAKu/C,eAAe9kC,WAAWhb,GAE/BO,KAAK6/C,aAAa7/C,KAAKu/C,kB,gCAQjB,YAAAM,aAAV,SAAuBC,GACb9/C,KAAKm/C,iBAAkBzG,gBAAkBoH,GAGzC,YAAAzzC,aAAV,WACI,MAAO,YAID,YAAAsyC,YAAV,SAAsBnwC,GAGlB,IAFA,IAAIuxC,EAAS,IAAInwC,MAAM,GAEdpM,EAAI,EAAGA,EAAI,EAAGA,IACnBu8C,EAAOv8C,GAAK,IAAI,IAAQ,EAAG,EAAG,EAAG,GAWrC,OATAu8C,EAAO,GAAK,IAAI,IAAQ,EAAG,EAAG,EAAG,GAEtB,KAAWC,UAAUhgD,KAAKqH,KAAO,YAAa,CACrD5G,MAAO,EACPC,OAAQ,EACRu/C,MAAO,IACPF,OAAQA,GACTvxC,IAKG,YAAAqwC,gBAAV,SAA0B/uC,GACtB,IAAIsoC,EAAW,IAAI,KAAiBp4C,KAAKqH,KAAO,WAAYyI,EAAKiC,YACjEqmC,EAASI,cAAgB,IAAOD,QAEhCzoC,EAAKsoC,SAAWA,EAChBp4C,KAAKm/C,iBAAmB/G,EAExBp4C,KAAKq/C,iBAMF,YAAA3nC,QAAP,WACI,YAAMA,QAAO,WAEb1X,KAAKs/C,wBAEDt/C,KAAKm/C,kBACLn/C,KAAKm/C,iBAAiBznC,WAGlC,EA5KA,CAA8B,ICT9B,eAuCI,WAAYrQ,GAAZ,MACI,YAAMA,IAAK,K,OAvCP,EAAA64C,cAAe,EAKb,EAAAvmC,UAAY,IAAI/J,M,EAkJ9B,OAxJiC,iBAW7B,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO5P,KAAK2Z,W,gCAOhB,sBAAW,0BAAW,C,IAAtB,WACI,OAAO3Z,KAAKkgD,c,IAGhB,SAAuBzgD,GACfO,KAAKkgD,eAAiBzgD,IAI1BO,KAAKkgD,aAAezgD,EAEfO,KAAKkgD,cACNlgD,KAAKmgD,qB,gCAgBN,YAAAC,aAAP,WAEI,OADApgD,KAAKmgD,mBACEngD,MAQJ,YAAAua,gBAAP,SAAuBC,GACnB,OAA4C,IAArCxa,KAAK2Z,UAAU1J,QAAQuK,IAQ3B,YAAAC,WAAP,SAAkBD,GAGd,OAAe,IAFHxa,KAAK2Z,UAAU1J,QAAQuK,KAKnCA,EAAQnN,OAASrN,KACjBwa,EAAQjO,MAAQvM,KAAKuM,MAErBvM,KAAK2Z,UAAUxJ,KAAKqK,GAEhBxa,KAAKuM,MAAMmzC,eACXllC,EAAQkkC,aAAa1+C,KAAKuM,MAAMmzC,aAAaE,mBAEzCplC,EAAQggC,OACRhgC,EAAQggC,KAAKntC,OAASrN,KAAKw6C,MAG1Bx6C,KAAKqgD,aACNrgD,KAAKmgD,qBAfFngD,MAyBL,YAAAmgD,iBAAV,aAGU,YAAAxB,YAAV,SAAsBnwC,GAClB,OAAO,IAAI,KAAc,gBAAiBA,IAQvC,YAAAoJ,cAAP,SAAqB4C,GACjB,IAAIzK,EAAQ/P,KAAK2Z,UAAU1J,QAAQuK,GASnC,OAPe,IAAXzK,IACA/P,KAAK2Z,UAAUzJ,OAAOH,EAAO,GAE7ByK,EAAQnN,OAAS,KACjBmN,EAAQwkC,gBAGLh/C,MAGD,YAAAqM,aAAV,WACI,MAAO,eAMJ,YAAAqL,QAAP,WACI,IAAoB,UAAA1X,KAAK2Z,UAAL,eAAgB,CAApB,KACJjC,UAGZ1X,KAAK2Z,UAAY,GAEjB,YAAMjC,QAAO,YAIM,EAAA4oC,kBAAoB,EAGpB,EAAAC,uBAAyB,EAGzB,EAAAC,+BAAiC,EAGjC,EAAAC,wBAA0B,EAG1B,EAAAC,gCAAkC,EAE7D,EAxJA,CAAiC,ICCjC,eAsFI,mBACI,cAAO,K,OAtFH,EAAAC,SAAW,GACX,EAAAC,MAAQ,EACR,EAAAC,eAAgB,EAEhB,EAAAC,aAAe,GAAYP,uBAQ5B,EAAAQ,OAAS,E,EA0KpB,OAvL+C,iBAyB3C,sBAAW,0BAAW,C,IAAtB,WACI,OAAO/gD,KAAK8gD,c,IAGhB,SAAuBrhD,GAAvB,WACQO,KAAK8gD,eAAiBrhD,IAI1BO,KAAK8gD,aAAerhD,EAEpB,IAAMs2C,cAAa,WACf,EAAKoK,wB,gCAQb,sBAAW,sBAAO,C,IAAlB,WACI,OAAOngD,KAAK2gD,U,IAGhB,SAAmBlhD,GAAnB,WACQO,KAAK2gD,WAAalhD,IAItBO,KAAK2gD,SAAWlhD,EAChBO,KAAK6gD,eAAgB,EAErB,IAAM9K,cAAa,WACf,EAAKoK,wB,gCAQb,sBAAW,mBAAI,C,IAAf,WACI,OAAOngD,KAAK4gD,O,IAGhB,SAAgBnhD,GAAhB,WACQO,KAAK4gD,QAAUnhD,IAInBO,KAAK4gD,MAAQnhD,EACbO,KAAK6gD,eAAgB,EAErB,IAAM9K,cAAa,WACf,EAAKoK,wB,gCAWH,YAAAA,iBAAV,WACIngD,KAAKigB,WAAa,EAClBjgB,KAAKkgB,YAAc,EAQnB,IAPA,IAAIq7B,EAAO,EACPH,EAAU,EACV4F,EAAe,EAEfC,EAAsB,IAAOC,OAAOlhD,KAAKw6C,KAAM2G,oBAAmB,IAGpD,MAAAnhD,KAAK2Z,UAAL,eAAgB,CAC9B,IADKS,EAAK,MACCtK,KAAX,CAIAkxC,IACA5mC,EAAMtK,KAAKqxC,oBAAmB,GAG9B,IAAIC,EAAchnC,EAAMtK,KAAKuxC,8BACzBC,EAAa,IAAWC,QAAQ,GAChCC,EAAO,IAAWD,QAAQ,GAE9BH,EAAYl+C,IAAIu+C,cAAcL,EAAYp+C,IAAKw+C,GAE/CA,EAAK9L,aAAa,IAElB,IAAQgM,qBAAqBF,EAAMP,EAAqBK,GAExDthD,KAAKigB,WAAald,KAAKG,IAAIlD,KAAKigB,WAA2B,EAAfqhC,EAAW59C,GACvD1D,KAAKkgB,YAAcnd,KAAKG,IAAIlD,KAAKkgB,YAA4B,EAAfohC,EAAW39C,IAG7D3D,KAAKigB,YAA4B,EAAdjgB,KAAK+gD,OACxB/gD,KAAKkgB,aAA6B,EAAdlgB,KAAK+gD,OAGrB/gD,KAAK6gD,eACLzF,EAAUp7C,KAAK2gD,SACfpF,EAAOx4C,KAAKc,KAAKm9C,EAAehhD,KAAK2gD,YAErCpF,EAAOv7C,KAAK4gD,MACZxF,EAAUr4C,KAAKc,KAAKm9C,EAAehhD,KAAK4gD,QAG5C,IAAIe,EAA0B,GAAVvG,EAAiBp7C,KAAKigB,WACtC2hC,EAAuB,GAAPrG,EAAcv7C,KAAKkgB,YACnC2hC,EAAW,GACXC,EAAc,EAElB,GAAI9hD,KAAK6gD,cACL,IAAK,IAAIvsB,EAAI,EAAGA,EAAIinB,EAAMjnB,IACtB,IAAK,IAAIhuB,EAAI,EAAGA,EAAI80C,IAChByG,EAAS1xC,KAAK,IAAI,IAAS7J,EAAItG,KAAKigB,WAAc0hC,EAAe3hD,KAAKigB,WAAa,EAAIqU,EAAIt0B,KAAKkgB,YAAe0hC,EAAe5hD,KAAKkgB,YAAc,EAAG,QACpJ4hC,EACkBd,IAHO16C,UASjC,IAASA,EAAI,EAAGA,EAAI80C,EAAS90C,IACzB,IAASguB,EAAI,EAAGA,EAAIinB,IAChBsG,EAAS1xC,KAAK,IAAI,IAAS7J,EAAItG,KAAKigB,WAAc0hC,EAAe3hD,KAAKigB,WAAa,EAAIqU,EAAIt0B,KAAKkgB,YAAe0hC,EAAe5hD,KAAKkgB,YAAc,EAAG,QACpJ4hC,EACkBd,IAHI1sB,KAUlCwtB,EAAc,EACd,IAAkB,UAAA9hD,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,KAAK,MACCtK,OAIX9P,KAAK+hD,aAAa3nC,EAAOynC,EAASC,IAElCA,KAGJ9hD,KAAKgiD,oBAOC,YAAAA,iBAAV,aAGJ,EAvLA,CAA+C,I,SCE/C,0E,OACY,EAAAC,QAAU,E,EAsDtB,OAvDmC,iBAM/B,sBAAW,qBAAM,C,IAAjB,WACI,OAAOjiD,KAAKiiD,S,IAGhB,SAAkBxiD,GAAlB,WACQO,KAAKiiD,UAAYxiD,IAIrBO,KAAKiiD,QAAUxiD,EAEf,IAAMs2C,cAAa,WACf,EAAKoK,wB,gCAIH,YAAA4B,aAAV,SAAuBvnC,EAAoB0nC,GACvC,IAAIpyC,EAAO0K,EAAQ1K,KAEnB,GAAKA,EAAL,CAGA,IAAIqyC,EAASniD,KAAKoiD,oBAAoBF,GAGtC,OAFA1nC,EAAQjM,SAAW4zC,EAEXniD,KAAKqiD,aACT,KAAK,GAAY9B,uBACbzwC,EAAKwyC,OAAO,IAAI,IAAQ,EAAIH,EAAOz+C,EAAGy+C,EAAOx+C,EAAG,EAAIw+C,EAAO/yC,IAC3D,MACJ,KAAK,GAAYoxC,+BACb1wC,EAAKwyC,OAAO,IAAI,KAASH,EAAOz+C,EAAGy+C,EAAOx+C,GAAIw+C,EAAO/yC,IACrD,MACJ,KAAK,GAAYqxC,wBACb,MACJ,KAAK,GAAYC,gCACb5wC,EAAKuC,OAAO,KAAKkwC,EAAGx/C,KAAKwW,GAAI,KAAMipC,UAKvC,YAAAJ,oBAAR,SAA4B5gD,GACxB,IAAI2gD,EAAS,IAAI,IAAQ,EAAG3gD,EAAOmC,EAAG3D,KAAKiiD,SAEvCQ,EAAUjhD,EAAOkC,EAAI1D,KAAKiiD,QAI9B,OAFA,IAAOS,0BAA0BD,EAAQ,EAAG,EAAG,IAAWE,OAAO,IAE1D,IAAQC,gBAAgBT,EAAQ,IAAWQ,OAAO,KAEjE,EAvDA,CAAmC,I,8ECT/BE,GAAS,0+CAwEb,KAAOC,aAAP,mBAA4BD,GAErB,IC1EH,GAAS,+kDAuDb,KAAOC,aAAP,kBAA4B,GAErB,ICxCP,eAMI,mBACI,cAAO,K,OANJ,EAAAC,WAAY,EACZ,EAAAC,QAAS,EACT,EAAAC,YAAa,EACb,EAAAC,SAAU,EAIb,EAAKC,U,EAEb,OAV2C,iBAU3C,EAVA,CAA2C,MAe3C,eAyFI,WAAY97C,EAAcmH,GAA1B,MACI,YAAMnH,EAAMmH,IAAM,K,OAnFf,EAAA40C,wBAA0B,GAM1B,EAAAC,eAAiB,IAAI,IAAO,EAAK,EAAK,GAMtC,EAAA9vC,MAAQ,EAMR,EAAA+vC,YAAc,IAAI,IAAO,GAAK,IAAM,IAOpC,EAAAC,eAAgB,EAMhB,EAAAC,YAAc,GAMd,EAAAC,mBAAqB,IAMrB,EAAAC,eAAiB,GAOjB,EAAAC,kBAAmB,EAMnB,EAAAC,YAAc,EAMd,EAAAC,WAAa,IAAI,IAAO,GAAK,GAAK,GAAK,GAMvC,EAAAC,cAAgB,IAAQp6C,O,EA2MnC,OAtRoC,iBA6FzB,YAAAq6C,kBAAP,WACI,OAAsB,IAAf/jD,KAAKuT,OAGT,YAAAywC,iBAAP,WACI,OAAO,GAGJ,YAAAC,oBAAP,WACI,OAAO,MAGJ,YAAAC,kBAAP,SAAyBp0C,EAAoBq0C,EAAkBC,GAC3D,GAAIpkD,KAAKqkD,UACDF,EAAQG,QAAUH,EAAQG,OAAOC,oBACjC,OAAO,EAIVJ,EAAQK,mBACTL,EAAQK,iBAAmB,IAAI,IAGnC,IAAIh2C,EAAQxO,KAAK+R,WACb0yC,EAAiCN,EAAQK,iBAC7C,IAAKxkD,KAAK0kD,uBAAyBP,EAAQG,QACnCG,EAAQE,YAAcn2C,EAAMo2C,cAC5B,OAAO,EAIf,GAAIH,EAAQI,kBAKR,GAJAJ,EAAQ1B,UAAY/iD,KAAKojD,wBAA0B,EACnDqB,EAAQzB,OAAShjD,KAAKujD,cACtBkB,EAAQxB,WAAajjD,KAAK2jD,iBAEtB3jD,KAAK8kD,eAAgB,CACrB,IAAK9kD,KAAK8kD,eAAeC,uBACrB,OAAO,EAEPN,EAAQvB,SAAU,OAGtBuB,EAAQvB,SAAU,EAI1B,IAAI9N,EAAS5mC,EAAMwkC,YAEnB,GAAIyR,EAAQ/wC,QAAS,CACjB+wC,EAAQO,kBACRx2C,EAAMy2C,sBAGN,IAAIC,EAAU,CAAC,KAAaC,cAC5BD,EAAQ/0C,KAAK,KAAai1C,YAC1BF,EAAQ/0C,KAAK,KAAak1C,QAE1B,IAEIC,EAAW,CAAC,QAAS,iBAAkB,iBAAkB,cAAe,cAAe,qBAAsB,cAAe,iBAC5H,aAAc,gBAAiB,eAG/BC,EAAW,CAAC,iBACZC,EAAiB,IAAI51C,MAEzB,KAAe61C,+BAAuD,CAClEC,cAAeJ,EACfK,oBAAqBH,EACrBD,SAAUA,EACVd,QAASA,EACTmB,sBAAuB,IAG3B,IAAIC,EAAOpB,EAAQvjD,WACnBijD,EAAQ2B,UAAUt3C,EAAMwkC,YAAY+S,aAlBnB,SAmBW,CACpBnL,WAAYsK,EACZQ,cAAeJ,EACfK,oBAAqBH,EACrBD,SAAUA,EACVd,QAASoB,EACTG,UAAW,KACXC,WAAYjmD,KAAKimD,WACjBC,QAASlmD,KAAKkmD,QACdC,gBAAiB,CAAEP,sBAAuB,IAC3CxQ,IAIX,SAAK+O,EAAQG,SAAWH,EAAQG,OAAOtQ,aAIvCyQ,EAAQE,UAAYn2C,EAAMo2C,cAC1BT,EAAQG,OAAOC,qBAAsB,GAE9B,IAGJ,YAAA6B,eAAP,SAAsBC,EAAev2C,EAAYq0C,GAC7C,IAAI31C,EAAQxO,KAAK+R,WAEb0yC,EAAiCN,EAAQK,iBAC7C,GAAKC,EAAL,CAIA,IAAIH,EAASH,EAAQG,OAChBA,IAGLtkD,KAAKsmD,cAAgBhC,EAGrBtkD,KAAKumD,oBAAoBF,GACzBrmD,KAAKsmD,cAAcE,UAAU,iBAAkBh4C,EAAMU,sBAEjDlP,KAAKymD,YAAYj4C,EAAO81C,KACxBtkD,KAAKsmD,cAAcI,UAAU,cAAe1mD,KAAKsjD,YAAatjD,KAAKuT,OAE/DkxC,EAAQ1B,WACR/iD,KAAKsmD,cAAcI,UAAU,iBAAkB1mD,KAAKqjD,eAAgBrjD,KAAKojD,yBAGzEqB,EAAQzB,SACRhjD,KAAKsmD,cAAcK,SAAS,cAAe3mD,KAAKwjD,aAChDxjD,KAAKsmD,cAAcK,SAAS,qBAAsB3mD,KAAKyjD,oBACvDzjD,KAAKsmD,cAAcK,SAAS,iBAAkB3mD,KAAK0jD,gBAEnD5zC,EAAK8vB,kBAAkBwhB,YAAYE,WAAW/7C,cAAcuK,EAAKiuC,QAAS,IAAWwD,QAAQ,IAC7FvhD,KAAKsmD,cAAcM,WAAW,cAAe,IAAWrF,QAAQ,KAGhEkD,EAAQxB,aACRjjD,KAAKsmD,cAAcO,gBAAgB,aAAc7mD,KAAK6jD,YACtD7jD,KAAKsmD,cAAcK,SAAS,cAAe3mD,KAAK4jD,aAChD5jD,KAAKsmD,cAAcM,WAAW,gBAAiB5mD,KAAK8jD,gBAGpDW,EAAQvB,SACRljD,KAAKsmD,cAAcQ,WAAW,gBAAiB9mD,KAAK8kD,iBAI5D9kD,KAAK+mD,WAAWj3C,EAAM9P,KAAKsmD,kBAGxB,YAAAU,kBAAP,WAGI,OAFqB,YAAMA,kBAAiB,YAKzC,YAAAC,WAAP,SAAkB9R,GACd,QAAI,YAAM8R,WAAU,UAAC9R,IAOlB,YAAAz9B,QAAP,SAAewvC,GACX,YAAMxvC,QAAO,UAACwvC,IAGX,YAAAC,MAAP,SAAa9/C,GAAb,WACI,OAAO,KAAoB+/C,OAAM,WAAM,WAAIC,EAAehgD,EAAM,EAAzB,cAA2CrH,OAG/E,YAAAsnD,UAAP,WACI,IAAIC,EAAsB,KAAoBC,UAAUxnD,MAExD,OADAunD,EAAoBE,WAAa,6BAC1BF,GAGJ,YAAAj7C,aAAP,WACI,MAAO,kBAIG,EAAAo7C,MAAd,SAAoBlmD,EAAagN,EAAcm5C,GAC3C,OAAO,KAAoBD,OAAM,WAAM,WAAIL,EAAe7lD,EAAO6F,KAA1B,KAAwC7F,EAAQgN,EAAOm5C,IA7QlG,aAFC,eACA,aAAiB,qC,8CAOlB,aADC,gB,qCAOD,aADC,gB,4BAOD,aADC,gB,kCAQD,aAFC,eACA,aAAiB,qC,oCAOlB,aADC,gB,kCAOD,aADC,gB,yCAOD,aADC,gB,qCAQD,aAFC,eACA,aAAiB,qC,uCAOlB,aADC,gB,kCAOD,aADC,gB,iCAOD,aADC,gB,oCAID,aADC,aAAmB,kB,qCAKpB,aADC,aAAiB,4C,oCAqMtB,EAtRA,CAAoC,MAwRpC,IAAWjuC,gBAAgB,8BAAgC,GCnS3D,mBA8KI,WAAYrS,EAAeugD,QAAA,IAAAA,OAAA,GAA3B,MACI,YAAMvgD,IAAK,K,OAzKP,EAAAwgD,iBAAkB,EA2KtB,EAAKA,gBAAkBD,EAGvB,EAAK//B,sBAAwB,WACpB,EAAK/X,MAGV,EAAKg4C,YAAYtJ,YAAW,IAGhC,EAAK12B,oBAAsB,WAClB,EAAKhY,MAGV,EAAKg4C,YAAYtJ,YAAW,I,EAgJxC,OA/UuC,iBAoB3B,YAAAuJ,gBAAR,WACI/nD,KAAKgoD,aAAe,KAChBhoD,KAAKioD,mBACLjoD,KAAKioD,kBAAkBvwC,UAEvB1X,KAAKkoD,iBACLloD,KAAKkoD,gBAAgBxwC,UAErB1X,KAAKmoD,cACLnoD,KAAKmoD,aAAazwC,UAEtB1X,KAAK+L,yBAAyBe,OAAO9M,KAAKooD,uBAC1CpoD,KAAK2L,uBAAuBmB,OAAO9M,KAAKqoD,sBAM5C,sBAAW,+BAAgB,C,IAS3B,WACI,OAAOroD,KAAKsoD,WAAWC,kB,IAV3B,SAA4BrN,GACxBl7C,KAAKsoD,WAAWC,iBAAmBrN,EACnCl7C,KAAKwoD,WAAWD,iBAAmBrN,EACnCl7C,KAAK8nD,YAAYS,iBAAmBrN,EAEhCl7C,KAAKmoD,eACLnoD,KAAKmoD,aAAaI,iBAAmBrN,I,gCAU7C,sBAAW,0BAAW,C,IAiDtB,WACI,OAAIl7C,KAAKioD,kBACEjoD,KAAKioD,kBAAkB7vC,KAE3B,M,IArDX,SAAuBA,GAAvB,WACI,GAAKA,EAAL,CAIA,IAAKpY,KAAKgoD,aAAc,CAEpBhoD,KAAKmoD,aAAe,KAAaM,YAAY,GAAI,CAAEt0B,KAAM,GAAKn0B,KAAKsoD,WAAWI,QAC9E,IAAIC,EAAoB,KAAaF,YAAY,GAAI,CAAEt0B,KAAM,EAAGy0B,gBAAiB,KAAKC,YAAc7oD,KAAKsoD,WAAWI,QAChHI,EAAM,IAAI,KAAiB,GAAI9oD,KAAKsoD,WAAWI,QACnDI,EAAIxQ,aAAe,IAAOtf,cAAc,WACxC2vB,EAAkBvQ,SAAW0Q,EAC7BH,EAAkB/J,YAAa,EAC/B5+C,KAAKmoD,aAAaY,SAASJ,GAC3BA,EAAkBp6C,SAASa,EAAI,IAC/BpP,KAAKmoD,aAAapK,QAAQp6C,EAAI,EAAI,EAClC3D,KAAKmoD,aAAa55C,SAAS5K,EAAI,GAC/B3D,KAAKmoD,aAAa55C,SAASa,GAAK,IAChCpP,KAAKmoD,aAAavJ,YAAa,EAC/B5+C,KAAKmoD,aAAa96C,OAASrN,KAAKsoD,WAGhCtoD,KAAKkoD,gBAAkB,GAAuBlQ,cAAch4C,KAAKmoD,cACjEnoD,KAAKioD,kBAAoB,IAAI,EAC7BjoD,KAAKioD,kBAAkBrhD,OAAS,EAChC5G,KAAKioD,kBAAkBnsC,MAAQ,QAC/B9b,KAAKioD,kBAAkB96C,SAAW,IAClCnN,KAAKkoD,gBAAgBztC,WAAWza,KAAKioD,mBAGrCjoD,KAAKgoD,aAAe,IAAI,KACxBhoD,KAAKgoD,aAAagB,MAAQ,IAC1BhpD,KAAKmoD,aAAanK,YAAYh+C,KAAKgoD,cACnChoD,KAAKooD,sBAAwBpoD,KAAK+L,yBAAyBiB,KAAI,WACvD,EAAKg7C,cACL,EAAKA,aAAaiB,QAAO,MAGjCjpD,KAAKqoD,oBAAsBroD,KAAK2L,uBAAuBqB,KAAI,WACnD,EAAKg7C,cACL,EAAKA,aAAaiB,QAAO,MAIjCjpD,KAAKioD,oBACLjoD,KAAKioD,kBAAkB7vC,KAAOA,QA3C9BpY,KAAK+nD,mB,gCAyDb,sBAAW,mBAAI,C,IAAf,WACI,OAAO/nD,KAAKoc,O,IAGhB,SAAgB3c,GACRO,KAAKoc,QAAU3c,IAInBO,KAAKoc,MAAQ3c,EACbO,KAAKkpD,oB,gCAMT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAOlpD,KAAKmpD,W,IAGhB,SAAoB1pD,GACZO,KAAKmpD,YAAc1pD,IAIvBO,KAAKmpD,UAAY1pD,EACjBO,KAAKkpD,oB,gCAMT,sBAAW,2BAAY,C,IAAvB,WACI,OAAOlpD,KAAKopD,e,gCAMhB,sBAAW,4BAAa,C,IAAxB,WACI,OAAOppD,KAAKqpD,gB,gCAMhB,sBAAW,4BAAa,C,IAAxB,WACI,OAAOrpD,KAAKspD,gB,gCAMhB,sBAAW,6BAAc,C,IAAzB,WACI,OAAOtpD,KAAK6nD,iB,gCA4BN,YAAAx7C,aAAV,WACI,MAAO,qBAGH,YAAA68C,gBAAR,WACIlpD,KAAKs/C,wBAEL,IAAI/0B,EAAQ,IAAI,EAGhB,GAFAA,EAAMnB,YAAa,EAEfppB,KAAKmpD,UAAW,CAChB,IAAI9zB,EAAQ,IAAI,EAChBA,EAAM7zB,OAASxB,KAAKmpD,UACpB9zB,EAAM3nB,WAAa,OACnB2nB,EAAM30B,OAAS,QACf20B,EAAM50B,MAAQ,QACd40B,EAAM1nB,cAAgB,OACtB4c,EAAM9P,WAAW4a,GAGrB,GAAIr1B,KAAKoc,MAAO,CACZ,IAAIhE,EAAO,IAAI,EACfA,EAAKA,KAAOpY,KAAKoc,MACjBhE,EAAK0D,MAAQ,QACb1D,EAAK1X,OAAS,OACd0X,EAAKjL,SAAW,GAChBod,EAAM9P,WAAWrC,GAGjBpY,KAAK8nD,cACL9nD,KAAKw/C,QAAUj1B,IAKb,YAAAo0B,YAAV,SAAsBnwC,GAuBlB,OAtBAxO,KAAKsoD,WAAa,KAAWtI,UAAUhgD,KAAKqH,KAAO,WAAY,CAC3D5G,MAAO,EACPC,OAAQ,EACRu/C,MAAO,KACRzxC,GAEHxO,KAAK8nD,YAAc,KAAW9H,UAAUhgD,KAAKqH,KAAO,YAAa,CAC7D5G,MAAO,EACPC,OAAQ,EACRu/C,MAAO,KACRzxC,GAEHxO,KAAK8nD,YAAYz6C,OAASrN,KAAKsoD,WAC/BtoD,KAAK8nD,YAAYv5C,SAASa,GAAK,IAC/BpP,KAAK8nD,YAAYlJ,YAAa,EAC9B5+C,KAAK8nD,YAAYtJ,YAAW,GAE5Bx+C,KAAKwoD,WAAmB,YAAM7J,YAAW,UAACnwC,GAC1CxO,KAAKwoD,WAAWn7C,OAASrN,KAAKsoD,WAC9BtoD,KAAKwoD,WAAWj6C,SAASa,GAAK,IAC9BpP,KAAKwoD,WAAW5J,YAAa,EAEtB5+C,KAAKsoD,YAGN,YAAAzI,aAAV,SAAuBC,GACnB9/C,KAAKspD,eAAe5Q,gBAAkBoH,EACtC9/C,KAAKspD,eAAe3Q,eAAiBmH,GAGjC,YAAAyJ,oBAAR,SAA4Bz5C,GAA5B,WACI9P,KAAKopD,cAAgB,IAAI,GAAeppD,KAAKqH,KAAO,gBAAiByI,EAAKiC,YAC1E/R,KAAKopD,cAAczF,kBAAmB,EACtC3jD,KAAKwpD,qBAAuBxpD,KAAKuM,MAAMk9C,+BAA+Bz8C,KAAI,SAAC+xC,GACnEA,GACA,EAAKqK,cAActF,cAAgB/E,EACnC,EAAKqK,cAAcvF,WAAWjhD,EAAI,GAElC,EAAKwmD,cAAcvF,WAAWjhD,EAAI,MAKtC,YAAA8mD,qBAAR,SAA6B55C,GACzB9P,KAAKqpD,eAAiB,IAAI,GAAerpD,KAAKqH,KAAO,iBAAkByI,EAAKiC,YAC5E/R,KAAKqpD,eAAejG,wBAA0B,EAC9CpjD,KAAKqpD,eAAe91C,MAAQ,GAC5BvT,KAAKqpD,eAAe9F,eAAgB,GAGhC,YAAAoG,qBAAR,SAA6B75C,GACzB9P,KAAKspD,eAAiB,IAAI,KAAiBtpD,KAAKqH,KAAO,iBAAkByI,EAAKiC,YAC9E/R,KAAKspD,eAAe9Q,cAAgB,IAAOD,SAGrC,YAAAsG,gBAAV,SAA0B/uC,GAElB9P,KAAK6nD,iBACA7nD,KAAKuM,MAAMq9C,iBAAX,mBAID5pD,KAAKopD,cAAgBppD,KAAKuM,MAAMq9C,iBAAX,oBAHrB5pD,KAAKupD,oBAAoBz5C,GACzB9P,KAAKuM,MAAMq9C,iBAAX,mBAAoD5pD,KAAKopD,eAMxDppD,KAAKuM,MAAMq9C,iBAAX,oBAID5pD,KAAKqpD,eAAiBrpD,KAAKuM,MAAMq9C,iBAAX,qBAHtB5pD,KAAK0pD,qBAAqB55C,GAC1B9P,KAAKuM,MAAMq9C,iBAAX,oBAAqD5pD,KAAKqpD,kBAK9DrpD,KAAKupD,oBAAoBz5C,GACzB9P,KAAK0pD,qBAAqB55C,IAG9B9P,KAAK2pD,qBAAqB75C,GAC1B9P,KAAKsoD,WAAWlQ,SAAWp4C,KAAKopD,cAChCppD,KAAK8nD,YAAY1P,SAAWp4C,KAAKqpD,eACjCrpD,KAAKwoD,WAAWpQ,SAAWp4C,KAAKspD,eAEhCtpD,KAAKkpD,mBAMF,YAAAxxC,QAAP,WACI,YAAMA,QAAO,WAEb1X,KAAK+nD,kBAEA/nD,KAAK4nD,iBACN5nD,KAAKopD,cAAc1xC,UACnB1X,KAAKqpD,eAAe3xC,UACpB1X,KAAKspD,eAAe5xC,UAEhB1X,KAAKwpD,uBACLxpD,KAAKuM,MAAMk9C,+BAA+B38C,OAAO9M,KAAKwpD,sBACtDxpD,KAAKwpD,qBAAuB,QAI5C,EA/UA,CAAuC,ICdvC,eASI,WAAY15C,EAAYzI,GAAxB,MACI,YAAMA,IAAK,K,OACX,EAAKwiD,aAAe/5C,EAMpB,EAAK+X,sBAAwB,WACpB,EAAK/X,MAGV,EAAKA,KAAKiuC,QAAQrI,aAAa,MAGnC,EAAK5tB,oBAAsB,WAClB,EAAKhY,MAGV,EAAKA,KAAKiuC,QAAQrI,aAAa,EAAM,MAGzC,EAAK3tB,qBAAuB,WACnB,EAAKjY,MAGV,EAAKA,KAAKiuC,QAAQrI,aAAa,MAGnC,EAAK1tB,mBAAqB,WACjB,EAAKlY,MAGV,EAAKA,KAAKiuC,QAAQrI,aAAa,EAAM,M,EAkBjD,OA5DkC,iBA8CpB,YAAArpC,aAAV,WACI,MAAO,gBAID,YAAAsyC,YAAV,SAAsBnwC,GAAtB,WAII,OAHAxO,KAAK6pD,aAAaC,iBAAiBrpB,SAAQ,SAAC3wB,GACxCA,EAAKnF,SAAW,KAEb3K,KAAK6pD,cAGN,YAAAhL,gBAAV,SAA0B/uC,KAE9B,EA5DA,CAAkC,ICDlC,4B,+CA2BA,OA3BgC,iBAClB,YAAAiyC,aAAV,SAAuBvnC,EAAoB0nC,GACvC,IAAIpyC,EAAO0K,EAAQ1K,KAEnB,GAAKA,EAAL,CAIA0K,EAAQjM,SAAW2zC,EAAaiF,QAChC,IAAInxC,EAAS,IAAWurC,QAAQ,GAIhC,OAFAvrC,EAAOxT,SAAS0/C,GAERliD,KAAKqiD,aACT,KAAK,GAAY9B,uBACjB,KAAK,GAAYE,wBACbzqC,EAAO+zC,WAAW,IAAI,IAAQ,EAAG,EAAG,IACpCj6C,EAAKwyC,OAAOtsC,GACZ,MACJ,KAAK,GAAY0qC,gCACjB,KAAK,GAAYF,+BACbxqC,EAAO+zC,WAAW,IAAI,IAAQ,EAAG,GAAI,IACrCj6C,EAAKwyC,OAAOtsC,MAK5B,EA3BA,CAAgC,ICEhC,0E,OACY,EAAAg0C,WAAa,I,EAuGzB,OAxGkC,iBAM9B,sBAAW,wBAAS,C,IAApB,WACI,OAAOhqD,KAAKgqD,Y,IAGhB,SAAqBvqD,GAArB,WACQO,KAAKgqD,aAAevqD,IAIxBO,KAAKgqD,WAAavqD,EAElB,IAAMs2C,cAAa,WACf,EAAKoK,wB,gCAIH,YAAA4B,aAAV,SAAuBvnC,EAAoB0nC,GACvC,IAAIpyC,EAAO0K,EAAQ1K,KACfqyC,EAASniD,KAAKiqD,gBAAgB/H,GAElC,GAAKpyC,EAAL,CAIA,OAAQ9P,KAAKqiD,aACT,KAAK,GAAY9B,uBACjB,KAAK,GAAYE,wBACb3wC,EAAKwyC,OAAO,IAAI,IAAQ,EAAG,EAAG,IAC9B,MACJ,KAAK,GAAY5B,gCACjB,KAAK,GAAYF,+BACb1wC,EAAKwyC,OAAO,IAAI,IAAQ,EAAG,GAAI,IAIvC9nC,EAAQjM,SAAW4zC,IAGf,YAAA8H,gBAAR,SAAwBzoD,GAIpB,OAHAA,EAAOkC,GAAK,EAAsB,EAAhBX,KAAKmnD,UAAkBlqD,KAAKigB,WAC9Cze,EAAOmC,GAAK,EAAsB,EAAhBZ,KAAKmnD,UAAkBlqD,KAAKkgB,YAEvC1e,GAGD,YAAAwgD,iBAAV,WAEI,IADA,IAAImI,EAAS,GACK,MAAAnqD,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EAAK,KACLA,EAAMtK,MAIXq6C,EAAOh6C,KAAKiK,EAAMtK,MAGtB,IAAK,IAAIs6C,EAAQ,EAAGA,EAAQpqD,KAAKgqD,WAAYI,IAAS,CAClDD,EAAOE,MAAK,SAACznD,EAAGC,GACZ,IAAIynD,EAAY1nD,EAAE2L,SAASg8C,gBACvBC,EAAY3nD,EAAE0L,SAASg8C,gBAE3B,OAAID,EAAYE,EACL,EACAF,EAAYE,GACX,EAGL,KAQX,IALA,IAAIC,EAAuB1nD,KAAK2nD,IAAI1qD,KAAK+gD,OAAQ,GAC7C4J,EAAW5nD,KAAKG,IAAIlD,KAAKigB,WAAYjgB,KAAKkgB,aAC1C0qC,EAAe,IAAWC,QAAQ,GAClCC,EAAa,IAAWvJ,QAAQ,GAE3B/9C,EAAI,EAAGA,EAAI2mD,EAAOvoD,OAAS,EAAG4B,IACnC,IAAK,IAAIwiC,EAAIxiC,EAAI,EAAGwiC,EAAImkB,EAAOvoD,OAAQokC,IACnC,GAAIxiC,GAAKwiC,EAAG,CACRmkB,EAAOnkB,GAAGz3B,SAASkzC,cAAc0I,EAAO3mD,GAAG+K,SAAUu8C,GAGrDF,EAAalnD,EAAIonD,EAAWpnD,EAC5BknD,EAAajnD,EAAImnD,EAAWnnD,EAC5B,IAAIonD,EAAiBJ,EACjBK,EAAWJ,EAAaL,gBAAkBE,GAE9CO,GADoBjoD,KAAKC,IAAIgoD,EAAUP,IAGvB1nD,KAAK2nD,IAAIK,EAAgB,KACrCH,EAAaK,YACbH,EAAWpV,aAAsD,IAAxCqV,EAAiBhoD,KAAK6xB,KAAKo2B,KACpDb,EAAOnkB,GAAGz3B,SAASw7C,WAAWe,GAC9BX,EAAO3mD,GAAG+K,SAAS28C,gBAAgBJ,OAO/D,EAxGA,CAAkC,ICClC,0E,OACY,EAAA7I,QAAU,E,EAwDtB,OAzDiC,iBAM7B,sBAAW,qBAAM,C,IAAjB,WACI,OAAOjiD,KAAKiiD,S,IAGhB,SAAkBxiD,GAAlB,WACQO,KAAKiiD,UAAYxiD,IAIrBO,KAAKiiD,QAAUxiD,EAEf,IAAMs2C,cAAa,WACf,EAAKoK,wB,gCAIH,YAAA4B,aAAV,SAAuBvnC,EAAoB0nC,GACvC,IAAIpyC,EAAO0K,EAAQ1K,KAEnB,GAAKA,EAAL,CAIA,IAAIqyC,EAASniD,KAAKmrD,kBAAkBjJ,GAGpC,OAFA1nC,EAAQjM,SAAW4zC,EAEXniD,KAAKqiD,aACT,KAAK,GAAY9B,uBACbzwC,EAAKwyC,OAAO,IAAI,IAAQ,EAAIH,EAAOz+C,EAAG,EAAIy+C,EAAOx+C,EAAG,EAAIw+C,EAAO/yC,IAC/D,MACJ,KAAK,GAAYoxC,+BACb1wC,EAAKwyC,OAAO,IAAI,KAASH,EAAOz+C,GAAIy+C,EAAOx+C,GAAIw+C,EAAO/yC,IACtD,MACJ,KAAK,GAAYqxC,wBACb,MACJ,KAAK,GAAYC,gCACb5wC,EAAKuC,OAAO,KAAKkwC,EAAGx/C,KAAKwW,GAAI,KAAMipC,UAKvC,YAAA2I,kBAAR,SAA0B3pD,GACtB,IAAI2gD,EAAS,IAAI,IAAQ,EAAG,EAAGniD,KAAKiiD,SAEhCmJ,EAAU5pD,EAAOmC,EAAI3D,KAAKiiD,QAC1BQ,GAAWjhD,EAAOkC,EAAI1D,KAAKiiD,QAI/B,OAFA,IAAOS,0BAA0BD,EAAQ2I,EAAQ,EAAG,IAAWzI,OAAO,IAE/D,IAAQC,gBAAgBT,EAAQ,IAAWQ,OAAO,KAEjE,EAzDA,CAAiC,ICJjC,eA+BI,WAAmBv5B,QAAA,IAAAA,OAAA,GAAnB,MACI,cAAO,K,OA/BH,EAAAL,aAAc,EAwBf,EAAAg4B,OAAS,GASZ,EAAKh4B,YAAcK,E,EAmE3B,OArGkC,iBAM9B,sBAAW,yBAAU,C,IAArB,WACI,OAAOppB,KAAK+oB,a,IAGhB,SAAsBtpB,GAAtB,WACQO,KAAK+oB,cAAgBtpB,IAIzBO,KAAK+oB,YAActpB,EAEnB,IAAMs2C,cAAa,WACf,EAAKoK,wB,gCAmBH,YAAAA,iBAAV,WASI,IARA,IAmCI1zC,EAnCAhM,EAAQ,EACRC,EAAS,EACTsgD,EAAe,EACfqK,EAAc,GAEdpK,EAAsB,IAAOC,OAAOlhD,KAAKw6C,KAAM2G,oBAAmB,IAGpD,MAAAnhD,KAAK2Z,UAAL,eAAgB,CAC9B,IADKS,EAAK,MACCtK,KAAX,CAIAkxC,IACA5mC,EAAMtK,KAAKqxC,oBAAmB,GAC9B/mC,EAAMtK,KAAKiwB,iBAAiBx6B,cAAc07C,EAAqB,IAAW0B,OAAO,IAEjF,IAAIvB,EAAchnC,EAAMtK,KAAK8vB,kBAAkBwhB,YAC3CE,EAAa,IAAQsB,gBAAgBxB,EAAYE,WAAY,IAAWqB,OAAO,IACnF0I,EAAYl7C,KAAKmxC,GAEbthD,KAAK+oB,YACLroB,GAAU4gD,EAAW39C,EAErBlD,GAAS6gD,EAAW59C,GAIxB1D,KAAK+oB,YACLroB,IAAWsgD,EAAe,GAAKhhD,KAAK+gD,OAAS,EAE7CtgD,IAAUugD,EAAe,GAAKhhD,KAAK+gD,OAAS,EAM5Ct0C,EADAzM,KAAK+oB,aACKroB,GAEAD,EAId,IADA,IAAIsP,EAAQ,EACM,MAAA/P,KAAK2Z,UAAL,eAAgB,CAA7B,IAAIS,EACL,IADKA,EAAK,MACCtK,KAAX,CAGAkxC,IACIM,EAAa+J,EAAYt7C,KAEzB/P,KAAK+oB,aACL3O,EAAM7L,SAAS5K,EAAI8I,EAAS60C,EAAW39C,EACvCyW,EAAM7L,SAAS7K,EAAI,EACnB+I,GAAyB,EAAf60C,EAAW39C,IAErByW,EAAM7L,SAAS7K,EAAI+I,EAAS60C,EAAW59C,EACvC0W,EAAM7L,SAAS5K,EAAI,EACnB8I,GAAyB,EAAf60C,EAAW59C,GAGzB+I,GAAWu0C,EAAe,EAAIhhD,KAAK+gD,OAAS,KAGxD,EArGA,CAAkC,I,2BCUlC,cAqCI,WAAmBvyC,GAAnB,WA3BO,KAAAsI,iBAAuD,GAEvD,KAAAK,iBAAuD,GAKvD,KAAAsyC,+BAAiC,IAAI,IAIrC,KAAAG,iBAAgD,GAiBnD5pD,KAAK0oD,OAASl6C,GAAS,KAAY88C,iBACnCtrD,KAAKurD,sBAAwBvrD,KAAK0oD,OAAO8C,oBAAoBx+C,KAAI,WAC7D,EAAKu+C,sBAAwB,KAC7B,EAAKE,cAAgB,KACrB,EAAK/zC,aAGT1X,KAAKyrD,cAAgB,IAAI,KAAqBzrD,KAAK0oD,QACnD1oD,KAAKyrD,cAAcC,4BAA6B,EAChD1rD,KAAKyrD,cAAcE,uBAAwB,EAC3C3rD,KAAKyrD,cAAcG,0BAA4B,SAAC97C,GAC5C,OAAOA,GAAQA,EAAKnF,UAAYmF,EAAKnF,SAASmzC,OAIlD99C,KAAKyO,eAAiB,IAAI,GAAY,iBACtCzO,KAAKyO,eAAelC,MAAQvM,KAC5B,IAAI4/C,EAAoB5/C,KAAKyrD,cAAc7L,kBAG3C5/C,KAAK6rD,oBAAsB7rD,KAAKyrD,cAAc9/C,uBAAuBqB,KAAI,SAAC2I,GACtE,EAAKm2C,kBAAkBn2C,GAAW,MAGtC3V,KAAKg1C,iBAAmB4K,EAAkBtyB,oBAAoBtgB,KAAI,SAAC4gC,EAAI5J,GACnE,EAAKkS,WAAWtI,MAIpB5tC,KAAKyrD,cAAc7L,kBAAkBmM,WAAY,EACjD/rD,KAAKyrD,cAAc7L,kBAAkBoM,0BAA2B,EAChE,IAAI,KAAiB,OAAQ,IAAQC,KAAMjsD,KAAKyrD,cAAc7L,mBAgJtE,OA7LI,sBAAW,oBAAK,C,IAAhB,WACI,OAAO5/C,KAAK0oD,Q,gCAIhB,sBAAW,2BAAY,C,IAAvB,WACI,OAAO1oD,KAAKyrD,e,gCA0CR,YAAAK,kBAAR,SAA0Bn2C,EAAmBu2C,GACzC,IAAIr1C,EAAsB7W,KAAK8W,iBAAiBnB,GAC5CkB,IACAA,EAAoBV,cAAcU,UAC3B7W,KAAK8W,iBAAiBnB,IAG7Bu2C,GACIlsD,KAAKmX,iBAAiBxB,KACtB3V,KAAKmX,iBAAiBxB,GAAWmpC,wBAC1B9+C,KAAKmX,iBAAiBxB,IAIrC3V,KAAKypD,+BAA+Bp1C,gBAAgB,OAGhD,YAAA6hC,WAAR,SAAmBtI,GACf,IAAK5tC,KAAKyrD,gBAAkBzrD,KAAKyrD,cAAcU,eAAiBnsD,KAAKyrD,cAAc7L,kBAAkBvJ,aACjG,OAAO,EAGX,IAAI0B,EAA8BnK,EAAG5f,MAEjCrY,EAAYoiC,EAAapiC,WAAa,EACtC1R,EAAc8zC,EAAald,OAE3BuxB,EAAcxe,EAAGyJ,SACrB,IAAK+U,IAAgBA,EAAY9U,IAE7B,OADAt3C,KAAK8rD,kBAAkBn2C,EAAWi4B,EAAGl4B,OAAS,IAAkBwB,YACzD,EAGX,IAAIsD,EAAsB4xC,EAAY7U,WAAY5sC,SA2BlD,OA1BIyhD,EAAYrN,aACZ/+C,KAAKypD,+BAA+Bp1C,gBAAgB+3C,EAAYrN,aAG/DvkC,EAAQ1E,oBAAoB83B,EAAGl4B,KAAM02C,EAAYrN,YAAcppC,EAAW1R,IAEvE2pC,EAAGl4B,OAAS,IAAkBkB,cAC1B5W,KAAK8W,iBAAiBnB,IACtB3V,KAAK8W,iBAAiBnB,GAAWQ,cAAcnW,KAAK8W,iBAAiBnB,WAGlE3V,KAAK8W,iBAAiBnB,IAIjCi4B,EAAGl4B,OAAS,IAAkBwB,YAC1BlX,KAAKmX,iBAAiB4gC,EAAapiC,aACnC3V,KAAKmX,iBAAiB4gC,EAAapiC,WAAWmpC,wBACvC9+C,KAAKmX,iBAAiB4gC,EAAapiC,YAGb,UAA7BoiC,EAAasU,aACbrsD,KAAK8rD,kBAAkBn2C,GAAW,KAInC,GAMX,sBAAW,4BAAa,C,IAAxB,WACI,OAAO3V,KAAKyO,gB,gCAQT,YAAA8L,gBAAP,SAAuBC,GACnB,OAAOxa,KAAKyO,eAAe8L,gBAAgBC,IAQxC,YAAAC,WAAP,SAAkBD,GAEd,OADAxa,KAAKyO,eAAegM,WAAWD,GACxBxa,MAQJ,YAAA4X,cAAP,SAAqB4C,GAEjB,OADAxa,KAAKyO,eAAemJ,cAAc4C,GAC3Bxa,MAMJ,YAAA0X,QAAP,WAGI,IAAK,IAAI40C,KAFTtsD,KAAKyO,eAAeiJ,UAEK1X,KAAK4pD,iBACrB5pD,KAAK4pD,iBAAiBx2B,eAAek5B,IAI1CtsD,KAAK4pD,iBAAiB0C,GAAc50C,UAGxC1X,KAAK4pD,iBAAmB,GAEpB5pD,KAAK6rD,qBAAuB7rD,KAAKyrD,gBACjCzrD,KAAKyrD,cAAc9/C,uBAAuBmB,OAAO9M,KAAK6rD,qBACtD7rD,KAAK6rD,oBAAsB,MAG/B7rD,KAAKypD,+BAA+B9xC,QAEpC,IAAIioC,EAAoB5/C,KAAKyrD,cAAgBzrD,KAAKyrD,cAAc7L,kBAAoB,KAEhFA,GACI5/C,KAAKg1C,mBACL4K,EAAkBtyB,oBAAoBxgB,OAAO9M,KAAKg1C,kBAClDh1C,KAAKg1C,iBAAmB,MAG5Bh1C,KAAK0oD,QACD1oD,KAAKurD,wBACLvrD,KAAK0oD,OAAO8C,oBAAoB1+C,OAAO9M,KAAKurD,uBAC5CvrD,KAAKurD,sBAAwB,MAIjCvrD,KAAKyrD,eACLzrD,KAAKyrD,cAAc/zC,WAG/B,EArNA","file":"static/js/0.d99a3546.chunk.js","sourcesContent":["import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                let percentage = this.getValue(host) * 100;\r\n\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                let pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nlet tmpRect = [\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n];\r\n\r\nlet tmpRect2 = [\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n];\r\n\r\nlet tmpV1 = new Vector2(0, 0);\r\nlet tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        var left = Math.min(a.left, b.left);\r\n        var top = Math.min(a.top, b.top);\r\n        var right = Math.max(a.left + a.width, b.left + b.width);\r\n        var bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        tmpRect[0].copyFromFloats(this.left, this.top);\r\n        tmpRect[1].copyFromFloats(this.left + this.width, this.top);\r\n        tmpRect[2].copyFromFloats(this.left + this.width, this.top + this.height);\r\n        tmpRect[3].copyFromFloats(this.left, this.top + this.height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (var i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Epsilon } from '@babylonjs/core/Maths/math.constants';\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { PointerEventTypes } from '@babylonjs/core/Events/pointerEvents';\nimport { Logger } from \"@babylonjs/core/Misc/logger\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nimport { Container } from \"./container\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Measure } from \"../measure\";\nimport { Style } from \"../style\";\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\n/**\n * Root class used for all 2D controls\n * @see http://doc.babylonjs.com/how_to/gui#controls\n */\nexport class Control {\n    /**\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\n     */\n    public static AllowAlphaInheritance = false;\n\n    private _alpha = 1;\n    private _alphaSet = false;\n    private _zIndex = 0;\n    /** @hidden */\n    public _host: AdvancedDynamicTexture;\n    /** Gets or sets the control parent */\n    public parent: Nullable<Container>;\n    /** @hidden */\n    public _currentMeasure = Measure.Empty();\n    private _fontFamily = \"Arial\";\n    private _fontStyle = \"\";\n    private _fontWeight = \"\";\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n    private _font: string;\n    /** @hidden */\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    /** @hidden */\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    /** @hidden */\n    protected _fontOffset: { ascent: number, height: number, descent: number };\n    private _color = \"\";\n    private _style: Nullable<Style> = null;\n    private _styleObserver: Nullable<Observer<Style>>;\n    /** @hidden */\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    /** @hidden */\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n    /** @hidden */\n    protected _isDirty = true;\n    /** @hidden */\n    protected _wasDirty = false;\n    /** @hidden */\n    public _tempParentMeasure = Measure.Empty();\n    /** @hidden */\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\n    /** @hidden */\n    protected _cachedParentMeasure = Measure.Empty();\n    private _paddingLeft = new ValueAndUnit(0);\n    private _paddingRight = new ValueAndUnit(0);\n    private _paddingTop = new ValueAndUnit(0);\n    private _paddingBottom = new ValueAndUnit(0);\n    /** @hidden */\n    public _left = new ValueAndUnit(0);\n    /** @hidden */\n    public _top = new ValueAndUnit(0);\n    private _scaleX = 1.0;\n    private _scaleY = 1.0;\n    private _rotation = 0;\n    private _transformCenterX = 0.5;\n    private _transformCenterY = 0.5;\n    /** @hidden */\n    public _transformMatrix = Matrix2D.Identity();\n    /** @hidden */\n    protected _invertTransformMatrix = Matrix2D.Identity();\n    /** @hidden */\n    protected _transformedPosition = Vector2.Zero();\n    private _isMatrixDirty = true;\n    private _cachedOffsetX: number;\n    private _cachedOffsetY: number;\n    private _isVisible = true;\n    private _isHighlighted = false;\n    /** @hidden */\n    public _linkedMesh: Nullable<AbstractMesh>;\n    private _fontSet = false;\n    private _dummyVector2 = Vector2.Zero();\n    private _downCount = 0;\n    private _enterCount = -1;\n    private _doNotRender = false;\n    private _downPointerIds: { [id: number]: boolean } = {};\n    protected _isEnabled = true;\n    protected _disabledColor = \"#9a9a9a\";\n    protected _disabledColorItem = \"#6a6a6a\";\n    /** @hidden */\n    protected _rebuildLayout = false;\n\n    /** @hidden */\n    public _customData: any = {};\n\n    /** @hidden */\n    public _isClipped = false;\n\n    /** @hidden */\n    public _automaticSize = false;\n\n    /** @hidden */\n    public _tag: any;\n\n    /**\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\n     */\n    public uniqueId: number;\n\n    /**\n     * Gets or sets an object used to store user defined information for the node\n     */\n    public metadata: any = null;\n\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\n    public isHitTestVisible = true;\n    /** Gets or sets a boolean indicating if the control can block pointer events */\n    public isPointerBlocker = false;\n    /** Gets or sets a boolean indicating if the control can be focusable */\n    public isFocusInvisible = false;\n\n    /**\n     * Gets or sets a boolean indicating if the children are clipped to the current control bounds.\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    public clipChildren = true;\n\n    /**\n     * Gets or sets a boolean indicating that control content must be clipped\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    public clipContent = true;\n\n    /**\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\n     */\n    public useBitmapCache = false;\n\n    private _cacheData: Nullable<ImageData>;\n\n    private _shadowOffsetX = 0;\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\n    public get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    public set shadowOffsetX(value: number) {\n        if (this._shadowOffsetX === value) {\n            return;\n        }\n\n        this._shadowOffsetX = value;\n        this._markAsDirty();\n    }\n\n    private _shadowOffsetY = 0;\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\n    public get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    public set shadowOffsetY(value: number) {\n        if (this._shadowOffsetY === value) {\n            return;\n        }\n\n        this._shadowOffsetY = value;\n        this._markAsDirty();\n    }\n\n    private _shadowBlur = 0;\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\n    public get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    public set shadowBlur(value: number) {\n        if (this._shadowBlur === value) {\n            return;\n        }\n\n        this._shadowBlur = value;\n        this._markAsDirty();\n    }\n\n    private _shadowColor = 'black';\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\n    public get shadowColor() {\n        return this._shadowColor;\n    }\n\n    public set shadowColor(value: string) {\n        if (this._shadowColor === value) {\n            return;\n        }\n\n        this._shadowColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the cursor to use when the control is hovered */\n    public hoverCursor = \"\";\n\n    /** @hidden */\n    protected _linkOffsetX = new ValueAndUnit(0);\n    /** @hidden */\n    protected _linkOffsetY = new ValueAndUnit(0);\n\n    // Properties\n\n    /** Gets the control type name */\n    public get typeName(): string {\n        return this._getTypeName();\n    }\n\n    /**\n     * Get the current class name of the control.\n     * @returns current class name\n     */\n    public getClassName(): string {\n        return this._getTypeName();\n    }\n\n    /**\n    * An event triggered when pointer wheel is scrolled\n    */\n    public onWheelObservable = new Observable<Vector2>();\n    /**\n    * An event triggered when the pointer move over the control.\n    */\n    public onPointerMoveObservable = new Observable<Vector2>();\n\n    /**\n    * An event triggered when the pointer move out of the control.\n    */\n    public onPointerOutObservable = new Observable<Control>();\n\n    /**\n    * An event triggered when the pointer taps the control\n    */\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when pointer up\n    */\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when a control is clicked on\n    */\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when pointer enters the control\n    */\n    public onPointerEnterObservable = new Observable<Control>();\n\n    /**\n    * An event triggered when the control is marked as dirty\n    */\n    public onDirtyObservable = new Observable<Control>();\n\n    /**\n     * An event triggered before drawing the control\n     */\n    public onBeforeDrawObservable = new Observable<Control>();\n\n    /**\n     * An event triggered after the control was drawn\n     */\n    public onAfterDrawObservable = new Observable<Control>();\n\n    /**\n     * Get the hosting AdvancedDynamicTexture\n     */\n    public get host(): AdvancedDynamicTexture {\n        return this._host;\n    }\n\n    /** Gets or set information about font offsets (used to render and align text) */\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\n        return this._fontOffset;\n    }\n\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\n        this._fontOffset = offset;\n    }\n\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        if (this._alpha === value) {\n            return;\n        }\n        this._alphaSet = true;\n        this._alpha = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\n     */\n    public get isHighlighted(): boolean {\n        return this._isHighlighted;\n    }\n\n    public set isHighlighted(value: boolean) {\n        if (this._isHighlighted === value) {\n            return;\n        }\n\n        this._isHighlighted = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get scaleX(): number {\n        return this._scaleX;\n    }\n\n    public set scaleX(value: number) {\n        if (this._scaleX === value) {\n            return;\n        }\n\n        this._scaleX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get scaleY(): number {\n        return this._scaleY;\n    }\n\n    public set scaleY(value: number) {\n        if (this._scaleY === value) {\n            return;\n        }\n\n        this._scaleY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the rotation angle (0 by default)\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public set rotation(value: number) {\n        if (this._rotation === value) {\n            return;\n        }\n\n        this._rotation = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the transformation center on Y axis (0 by default)\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get transformCenterY(): number {\n        return this._transformCenterY;\n    }\n\n    public set transformCenterY(value: number) {\n        if (this._transformCenterY === value) {\n            return;\n        }\n\n        this._transformCenterY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the transformation center on X axis (0 by default)\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get transformCenterX(): number {\n        return this._transformCenterX;\n    }\n\n    public set transformCenterX(value: number) {\n        if (this._transformCenterX === value) {\n            return;\n        }\n\n        this._transformCenterX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /**\n     * Gets or sets the horizontal alignment\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\n     */\n    public get horizontalAlignment(): number {\n        return this._horizontalAlignment;\n    }\n\n    public set horizontalAlignment(value: number) {\n        if (this._horizontalAlignment === value) {\n            return;\n        }\n\n        this._horizontalAlignment = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets the vertical alignment\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\n     */\n    public get verticalAlignment(): number {\n        return this._verticalAlignment;\n    }\n\n    public set verticalAlignment(value: number) {\n        if (this._verticalAlignment === value) {\n            return;\n        }\n\n        this._verticalAlignment = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets the control width in pixel\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get widthInPixels(): number {\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set widthInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.width = value + \"px\";\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height in pixel\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get heightInPixels(): number {\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set heightInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.height = value + \"px\";\n    }\n\n    /** Gets or set font family */\n    public get fontFamily(): string {\n        if (!this._fontSet) {\n            return \"\";\n        }\n        return this._fontFamily;\n    }\n\n    public set fontFamily(value: string) {\n        if (this._fontFamily === value) {\n            return;\n        }\n\n        this._fontFamily = value;\n        this._resetFontCache();\n    }\n\n    /** Gets or sets font style */\n    public get fontStyle(): string {\n        return this._fontStyle;\n    }\n\n    public set fontStyle(value: string) {\n        if (this._fontStyle === value) {\n            return;\n        }\n\n        this._fontStyle = value;\n        this._resetFontCache();\n    }\n\n    /** Gets or sets font weight */\n    public get fontWeight(): string {\n        return this._fontWeight;\n    }\n\n    public set fontWeight(value: string) {\n        if (this._fontWeight === value) {\n            return;\n        }\n\n        this._fontWeight = value;\n        this._resetFontCache();\n    }\n\n    /**\n     * Gets or sets style\n     * @see http://doc.babylonjs.com/how_to/gui#styles\n     */\n    public get style(): Nullable<Style> {\n        return this._style;\n    }\n\n    public set style(value: Nullable<Style>) {\n        if (this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n\n        this._style = value;\n\n        if (this._style) {\n            this._styleObserver = this._style.onChangedObservable.add(() => {\n                this._markAsDirty();\n                this._resetFontCache();\n            });\n        }\n\n        this._markAsDirty();\n        this._resetFontCache();\n    }\n\n    /** @hidden */\n    public get _isFontSizeInPercentage(): boolean {\n        return this._fontSize.isPercentage;\n    }\n\n    /** Gets or sets font size in pixels */\n    public get fontSizeInPixels(): number {\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\n\n        if (fontSizeToUse.isPixel) {\n            return fontSizeToUse.getValue(this._host);\n        }\n\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\n    }\n\n    public set fontSizeInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.fontSize = value + \"px\";\n    }\n\n    /** Gets or sets font size */\n    public get fontSize(): string | number {\n        return this._fontSize.toString(this._host);\n    }\n\n    public set fontSize(value: string | number) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._fontSize.fromString(value)) {\n            this._markAsDirty();\n            this._resetFontCache();\n        }\n    }\n\n    /** Gets or sets foreground color */\n    public get color(): string {\n        return this._color;\n    }\n\n    public set color(value: string) {\n        if (this._color === value) {\n            return;\n        }\n\n        this._color = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets z index which is used to reorder controls on the z axis */\n    public get zIndex(): number {\n        return this._zIndex;\n    }\n\n    public set zIndex(value: number) {\n        if (this.zIndex === value) {\n            return;\n        }\n\n        this._zIndex = value;\n\n        if (this.parent) {\n            this.parent._reOrderControl(this);\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can be rendered */\n    public get notRenderable(): boolean {\n        return this._doNotRender;\n    }\n\n    public set notRenderable(value: boolean) {\n        if (this._doNotRender === value) {\n            return;\n        }\n\n        this._doNotRender = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets a boolean indicating if the control is visible */\n    public get isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    public set isVisible(value: boolean) {\n        if (this._isVisible === value) {\n            return;\n        }\n\n        this._isVisible = value;\n        this._markAsDirty(true);\n    }\n\n    /** Gets a boolean indicating that the control needs to update its rendering */\n    public get isDirty(): boolean {\n        return this._isDirty;\n    }\n\n    /**\n     * Gets the current linked mesh (or null if none)\n     */\n    public get linkedMesh(): Nullable<AbstractMesh> {\n        return this._linkedMesh;\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the left of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingLeft(): string | number {\n        return this._paddingLeft.toString(this._host);\n    }\n\n    public set paddingLeft(value: string | number) {\n        if (this._paddingLeft.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingLeftInPixels(): number {\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set paddingLeftInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingLeft = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the right of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingRight(): string | number {\n        return this._paddingRight.toString(this._host);\n    }\n\n    public set paddingRight(value: string | number) {\n        if (this._paddingRight.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingRightInPixels(): number {\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set paddingRightInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingRight = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the top of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingTop(): string | number {\n        return this._paddingTop.toString(this._host);\n    }\n\n    public set paddingTop(value: string | number) {\n        if (this._paddingTop.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingTopInPixels(): number {\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set paddingTopInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingTop = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the bottom of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingBottom(): string | number {\n        return this._paddingBottom.toString(this._host);\n    }\n\n    public set paddingBottom(value: string | number) {\n        if (this._paddingBottom.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingBottomInPixels(): number {\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set paddingBottomInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingBottom = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the left coordinate of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get left(): string | number {\n        return this._left.toString(this._host);\n    }\n\n    public set left(value: string | number) {\n        if (this._left.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the left coordinate in pixels of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get leftInPixels(): number {\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set leftInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.left = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the top coordinate of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get top(): string | number {\n        return this._top.toString(this._host);\n    }\n\n    public set top(value: string | number) {\n        if (this._top.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the top coordinate in pixels of the control\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get topInPixels(): number {\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set topInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.top = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetX(): string | number {\n        return this._linkOffsetX.toString(this._host);\n    }\n\n    public set linkOffsetX(value: string | number) {\n        if (this._linkOffsetX.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetXInPixels(): number {\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set linkOffsetXInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetX = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetY(): string | number {\n        return this._linkOffsetY.toString(this._host);\n    }\n\n    public set linkOffsetY(value: string | number) {\n        if (this._linkOffsetY.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetYInPixels(): number {\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set linkOffsetYInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetY = value + \"px\";\n    }\n\n    /** Gets the center coordinate on X axis */\n    public get centerX(): number {\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\n    }\n\n    /** Gets the center coordinate on Y axis */\n    public get centerY(): number {\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\n    }\n\n    /** Gets or sets if control is Enabled*/\n    public get isEnabled(): boolean {\n        return this._isEnabled;\n    }\n\n    public set isEnabled(value: boolean) {\n        if (this._isEnabled === value) {\n            return;\n        }\n\n        this._isEnabled = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color of control if it's disabled*/\n    public get disabledColor(): string {\n        return this._disabledColor;\n    }\n\n    public set disabledColor(value: string) {\n        if (this._disabledColor === value) {\n            return;\n        }\n\n        this._disabledColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets front color of control if it's disabled*/\n    public get disabledColorItem(): string {\n        return this._disabledColorItem;\n    }\n\n    public set disabledColorItem(value: string) {\n        if (this._disabledColorItem === value) {\n            return;\n        }\n\n        this._disabledColorItem = value;\n        this._markAsDirty();\n    }\n    // Functions\n\n    /**\n     * Creates a new control\n     * @param name defines the name of the control\n     */\n    constructor(\n        /** defines the name of the control */\n        public name?: string) {\n    }\n\n    /** @hidden */\n    protected _getTypeName(): string {\n        return \"Control\";\n    }\n\n    /**\n     * Gets the first ascendant in the hierarchy of the given type\n     * @param className defines the required type\n     * @returns the ascendant or null if not found\n     */\n    public getAscendantOfClass(className: string): Nullable<Control> {\n        if (!this.parent) {\n            return null;\n        }\n\n        if (this.parent.getClassName() === className) {\n            return this.parent;\n        }\n\n        return this.parent.getAscendantOfClass(className);\n    }\n\n    /** @hidden */\n    public _resetFontCache(): void {\n        this._fontSet = true;\n        this._markAsDirty();\n    }\n\n    /**\n     * Determines if a container is an ascendant of the current control\n     * @param container defines the container to look for\n     * @returns true if the container is one of the ascendant of the control\n     */\n    public isAscendant(container: Control): boolean {\n        if (!this.parent) {\n            return false;\n        }\n\n        if (this.parent === container) {\n            return true;\n        }\n\n        return this.parent.isAscendant(container);\n    }\n\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in local space\n     */\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\n        var result = Vector2.Zero();\n\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\n\n        return result;\n    }\n\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @param result defines the target vector2 where to store the result\n     * @returns the current control\n     */\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\n        result.x = globalCoordinates.x - this._currentMeasure.left;\n        result.y = globalCoordinates.y - this._currentMeasure.top;\n        return this;\n    }\n\n    /**\n     * Gets coordinates in parent local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in parent local space\n     */\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\n        var result = Vector2.Zero();\n\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\n\n        return result;\n    }\n\n    /**\n     * Move the current control to a vector3 position projected onto the screen.\n     * @param position defines the target position\n     * @param scene defines the hosting scene\n     */\n    public moveToVector3(position: Vector3, scene: Scene): void {\n        if (!this._host || this.parent !== this._host._rootContainer) {\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n            return;\n        }\n\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n\n        var globalViewport = this._host._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\n\n        this._moveToProjectedPosition(projectedPosition);\n\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n            this.notRenderable = true;\n            return;\n        }\n        this.notRenderable = false;\n    }\n\n    /**\n     * Will store all controls that have this control as ascendant in a given array\n     * @param results defines the array where to store the descendants\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     */\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\n        // Do nothing by default\n    }\n\n    /**\n     * Will return all controls that have this control as ascendant\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @return all child controls\n     */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        var results = new Array<Control>();\n\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\n\n        return results;\n    }\n\n    /**\n     * Link current control with a target mesh\n     * @param mesh defines the mesh to link with\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\n            if (mesh) {\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\n            }\n            return;\n        }\n\n        var index = this._host._linkedControls.indexOf(this);\n        if (index !== -1) {\n            this._linkedMesh = mesh;\n            if (!mesh) {\n                this._host._linkedControls.splice(index, 1);\n            }\n            return;\n        } else if (!mesh) {\n            return;\n        }\n\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._linkedMesh = mesh;\n        this._host._linkedControls.push(this);\n    }\n\n    /** @hidden */\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\n        let oldLeft = this._left.getValue(this._host);\n        let oldTop = this._top.getValue(this._host);\n\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\n\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\n                newLeft = oldLeft;\n            }\n\n            if (Math.abs(newTop - oldTop) < 0.5) {\n                newTop = oldTop;\n            }\n        }\n\n        this.left = newLeft + \"px\";\n        this.top = newTop + \"px\";\n\n        this._left.ignoreAdaptiveScaling = true;\n        this._top.ignoreAdaptiveScaling = true;\n        this._markAsDirty();\n    }\n\n    /** @hidden */\n    public _offsetLeft(offset: number) {\n        this._isDirty = true;\n        this._currentMeasure.left += offset;\n    }\n\n    /** @hidden */\n    public _offsetTop(offset: number) {\n        this._isDirty = true;\n        this._currentMeasure.top += offset;\n    }\n\n    /** @hidden */\n    public _markMatrixAsDirty(): void {\n        this._isMatrixDirty = true;\n        this._flagDescendantsAsMatrixDirty();\n    }\n\n    /** @hidden */\n    public _flagDescendantsAsMatrixDirty(): void {\n        // No child\n    }\n\n    /** @hidden */\n    public _intersectsRect(rect: Measure) {\n        // Rotate the control's current measure into local space and check if it intersects the passed in rectangle\n        this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n        if (this._tmpMeasureA.left >= rect.left + rect.width) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.top >= rect.top + rect.height) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.left + this._tmpMeasureA.width <= rect.left) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.top + this._tmpMeasureA.height <= rect.top) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /** @hidden */\n    protected invalidateRect() {\n        this._transform();\n        if (this.host && this.host.useInvalidateRectOptimization) {\n            // Rotate by transform to get the measure transformed to global space\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\n            // the previous measure is used to properly clear a control that is scaled down\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                // Expand rect based on shadows\n                var shadowOffsetX = this.shadowOffsetX;\n                var shadowOffsetY = this.shadowOffsetY;\n                var shadowBlur = this.shadowBlur;\n\n                var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n                var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n                var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n                var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n\n                this.host.invalidateRect(\n                    Math.floor(this._tmpMeasureA.left + leftShadowOffset),\n                    Math.floor(this._tmpMeasureA.top + topShadowOffset),\n                    Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset),\n                    Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset),\n                );\n            } else {\n                this.host.invalidateRect(\n                    Math.floor(this._tmpMeasureA.left),\n                    Math.floor(this._tmpMeasureA.top),\n                    Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width),\n                    Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height),\n                );\n            }\n\n        }\n    }\n\n    /** @hidden */\n    public _markAsDirty(force = false): void {\n        if (!this._isVisible && !force) {\n            return;\n        }\n\n        this._isDirty = true;\n\n        // Redraw only this rectangle\n        if (this._host) {\n            this._host.markAsDirty();\n        }\n    }\n\n    /** @hidden */\n    public _markAllAsDirty(): void {\n        this._markAsDirty();\n\n        if (this._font) {\n            this._prepareFont();\n        }\n    }\n\n    /** @hidden */\n    public _link(host: AdvancedDynamicTexture): void {\n        this._host = host;\n        if (this._host) {\n            this.uniqueId = this._host.getScene()!.getUniqueId();\n        }\n    }\n\n    /** @hidden */\n    protected _transform(context?: CanvasRenderingContext2D): void {\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\n            return;\n        }\n\n        // postTranslate\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\n        if (context) {\n            context.translate(offsetX, offsetY);\n\n            // rotate\n            context.rotate(this._rotation);\n\n            // scale\n            context.scale(this._scaleX, this._scaleY);\n\n            // preTranslate\n            context.translate(-offsetX, -offsetY);\n        }\n        // Need to update matrices?\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\n            this._cachedOffsetX = offsetX;\n            this._cachedOffsetY = offsetY;\n            this._isMatrixDirty = false;\n            this._flagDescendantsAsMatrixDirty();\n\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\n\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\n        }\n    }\n\n    /** @hidden */\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\n        if (!this.isHighlighted) {\n            return;\n        }\n\n        context.save();\n        context.strokeStyle = \"#4affff\";\n        context.lineWidth = 2;\n\n        this._renderHighlightSpecific(context);\n        context.restore();\n    }\n\n    /** @hidden */\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    }\n\n    /** @hidden */\n    protected _applyStates(context: CanvasRenderingContext2D): void {\n        if (this._isFontSizeInPercentage) {\n            this._fontSet = true;\n        }\n\n        if (this._fontSet) {\n            this._prepareFont();\n            this._fontSet = false;\n        }\n\n        if (this._font) {\n            context.font = this._font;\n        }\n\n        if (this._color) {\n            context.fillStyle = this._color;\n        }\n\n        if (Control.AllowAlphaInheritance) {\n            context.globalAlpha *= this._alpha;\n        } else if (this._alphaSet) {\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\n        }\n    }\n\n    /** @hidden */\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            this.host._numLayoutCalls++;\n\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n\n            context.save();\n\n            this._applyStates(context);\n\n            let rebuildCount = 0;\n            do {\n                this._rebuildLayout = false;\n                this._processMeasures(parentMeasure, context);\n                rebuildCount++;\n            }\n            while (this._rebuildLayout && rebuildCount < 3);\n\n            if (rebuildCount >= 3) {\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\n            }\n\n            context.restore();\n            this.invalidateRect();\n            this._evaluateClippingState(parentMeasure);\n        }\n\n        this._wasDirty = this._isDirty;\n        this._isDirty = false;\n\n        return true;\n    }\n\n    /** @hidden */\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        this._currentMeasure.copyFrom(parentMeasure);\n\n        // Let children take some pre-measurement actions\n        this._preMeasure(parentMeasure, context);\n\n        this._measure();\n        this._computeAlignment(parentMeasure, context);\n\n        // Convert to int values\n        this._currentMeasure.left = this._currentMeasure.left | 0;\n        this._currentMeasure.top = this._currentMeasure.top | 0;\n        this._currentMeasure.width = this._currentMeasure.width | 0;\n        this._currentMeasure.height = this._currentMeasure.height | 0;\n\n        // Let children add more features\n        this._additionalProcessing(parentMeasure, context);\n\n        this._cachedParentMeasure.copyFrom(parentMeasure);\n\n        if (this.onDirtyObservable.hasObservers()) {\n            this.onDirtyObservable.notifyObservers(this);\n        }\n    }\n\n    protected _evaluateClippingState(parentMeasure: Measure) {\n        if (this.parent && this.parent.clipChildren) {\n            // Early clip\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\n                this._isClipped = true;\n                return;\n            }\n        }\n\n        this._isClipped = false;\n    }\n\n    /** @hidden */\n    public _measure(): void {\n        // Width / Height\n        if (this._width.isPixel) {\n            this._currentMeasure.width = this._width.getValue(this._host);\n        } else {\n            this._currentMeasure.width *= this._width.getValue(this._host);\n        }\n\n        if (this._height.isPixel) {\n            this._currentMeasure.height = this._height.getValue(this._host);\n        } else {\n            this._currentMeasure.height *= this._height.getValue(this._host);\n        }\n    }\n\n    /** @hidden */\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        var width = this._currentMeasure.width;\n        var height = this._currentMeasure.height;\n\n        var parentWidth = parentMeasure.width;\n        var parentHeight = parentMeasure.height;\n\n        // Left / top\n        var x = 0;\n        var y = 0;\n\n        switch (this.horizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = parentWidth - width;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (parentWidth - width) / 2;\n                break;\n        }\n\n        switch (this.verticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                y = 0;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                y = parentHeight - height;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                y = (parentHeight - height) / 2;\n                break;\n        }\n\n        if (this._paddingLeft.isPixel) {\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\n        } else {\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\n        }\n\n        if (this._paddingRight.isPixel) {\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\n        } else {\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\n        }\n\n        if (this._paddingTop.isPixel) {\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\n        } else {\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\n        }\n\n        if (this._paddingBottom.isPixel) {\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\n        } else {\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\n        }\n\n        if (this._left.isPixel) {\n            this._currentMeasure.left += this._left.getValue(this._host);\n        } else {\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\n        }\n\n        if (this._top.isPixel) {\n            this._currentMeasure.top += this._top.getValue(this._host);\n        } else {\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\n        }\n\n        this._currentMeasure.left += x;\n        this._currentMeasure.top += y;\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        // Do nothing\n    }\n\n    /** @hidden */\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        // Do nothing\n    }\n\n    /** @hidden */\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\n        // DO nothing\n    }\n\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\n    private _clip(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>) {\n        context.beginPath();\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\n        if (invalidatedRectangle) {\n            // Rotate the invalidated rect into the control's space\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\n\n            // Get the intersection of the rect in context space and the current context\n            var intersection = new Measure(0, 0, 0, 0);\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\n            Control._ClipMeasure.copyFrom(intersection);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            var shadowOffsetX = this.shadowOffsetX;\n            var shadowOffsetY = this.shadowOffsetY;\n            var shadowBlur = this.shadowBlur;\n\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n\n            context.rect(\n                Control._ClipMeasure.left + leftShadowOffset,\n                Control._ClipMeasure.top + topShadowOffset,\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\n            );\n        } else {\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\n        }\n\n        context.clip();\n    }\n\n    /** @hidden */\n    public _render(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\n            this._isDirty = false;\n            return false;\n        }\n\n        this.host._numRenderCalls++;\n\n        context.save();\n\n        this._applyStates(context);\n\n        // Transform\n        this._transform(context);\n\n        // Clip\n        if (this.clipContent) {\n            this._clip(context, invalidatedRectangle);\n        }\n\n        if (this.onBeforeDrawObservable.hasObservers()) {\n            this.onBeforeDrawObservable.notifyObservers(this);\n        }\n\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\n        } else {\n            this._draw(context, invalidatedRectangle);\n        }\n\n        if (this.useBitmapCache && this._wasDirty) {\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        this._renderHighlight(context);\n\n        if (this.onAfterDrawObservable.hasObservers()) {\n            this.onAfterDrawObservable.notifyObservers(this);\n        }\n\n        context.restore();\n\n        return true;\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\n        // Do nothing\n    }\n\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    public contains(x: number, y: number): boolean {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n\n        x = this._transformedPosition.x;\n        y = this._transformedPosition.y;\n\n        // Check\n        if (x < this._currentMeasure.left) {\n            return false;\n        }\n\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\n            return false;\n        }\n\n        if (y < this._currentMeasure.top) {\n            return false;\n        }\n\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\n            return false;\n        }\n\n        if (this.isPointerBlocker) {\n            this._host._shouldBlockPointer = true;\n        }\n        return true;\n    }\n\n    /** @hidden */\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\n            return false;\n        }\n\n        if (!this.contains(x, y)) {\n            return false;\n        }\n\n        this._processObservables(type, x, y, pointerId, buttonIndex, deltaX, deltaY);\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number): void {\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates, pointerId); }\n    }\n\n    /** @hidden */\n    public _onPointerEnter(target: Control): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (this._enterCount > 0) {\n            return false;\n        }\n\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\n            this._enterCount = 0;\n        }\n        this._enterCount++;\n\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerOut(target: Control, force = false): void {\n        if (!force && (!this._isEnabled || target === this)) {\n            return;\n        }\n        this._enterCount = 0;\n\n        var canNotify: boolean = true;\n\n        if (!target.isAscendant(this)) {\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\n        }\n\n        if (canNotify && this.parent != null) {\n            this.parent._onPointerOut(target, force);\n        }\n    }\n\n    /** @hidden */\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        // Prevent pointerout to lose control context.\n        // Event redundancy is checked inside the function.\n        this._onPointerEnter(this);\n\n        if (this._downCount !== 0) {\n            return false;\n        }\n\n        this._downCount++;\n\n        this._downPointerIds[pointerId] = true;\n\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._downCount = 0;\n\n        delete this._downPointerIds[pointerId];\n\n        var canNotifyClick: boolean = notifyClick;\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\n        }\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\n    }\n\n    /** @hidden */\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\n        if (pointerId !== null) {\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\n        } else {\n            for (var key in this._downPointerIds) {\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\n            }\n        }\n    }\n\n    /** @hidden */\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        var canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\n\n        if (canNotify && this.parent != null) { this.parent._onWheelScroll(deltaX, deltaY); }\n    }\n\n    /** @hidden */\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._dummyVector2.copyFromFloats(x, y);\n        if (type === PointerEventTypes.POINTERMOVE) {\n            this._onPointerMove(this, this._dummyVector2, pointerId);\n\n            var previousControlOver = this._host._lastControlOver[pointerId];\n            if (previousControlOver && previousControlOver !== this) {\n                previousControlOver._onPointerOut(this);\n            }\n\n            if (previousControlOver !== this) {\n                this._onPointerEnter(this);\n            }\n\n            this._host._lastControlOver[pointerId] = this;\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERDOWN) {\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\n            this._host._registerLastControlDown(this, pointerId);\n            this._host._lastPickedControl = this;\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERUP) {\n            if (this._host._lastControlDown[pointerId]) {\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\n            }\n            delete this._host._lastControlDown[pointerId];\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERWHEEL) {\n            if (this._host._lastControlOver[pointerId]) {\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _prepareFont() {\n        if (!this._font && !this._fontSet) {\n            return;\n        }\n\n        if (this._style) {\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\n        } else {\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\n        }\n\n        this._fontOffset = Control._GetFontOffset(this._font);\n    }\n\n    /** Releases associated resources */\n    public dispose() {\n        this.onDirtyObservable.clear();\n        this.onBeforeDrawObservable.clear();\n        this.onAfterDrawObservable.clear();\n        this.onPointerDownObservable.clear();\n        this.onPointerEnterObservable.clear();\n        this.onPointerMoveObservable.clear();\n        this.onPointerOutObservable.clear();\n        this.onPointerUpObservable.clear();\n        this.onPointerClickObservable.clear();\n        this.onWheelObservable.clear();\n\n        if (this._styleObserver && this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n\n        if (this.parent) {\n            this.parent.removeControl(this);\n            this.parent = null;\n        }\n\n        if (this._host) {\n            var index = this._host._linkedControls.indexOf(this);\n            if (index > -1) {\n                this.linkWithMesh(null);\n            }\n        }\n    }\n\n    // Statics\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\n\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\n\n    /** HORIZONTAL_ALIGNMENT_LEFT */\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\n    }\n\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\n    }\n\n    /** HORIZONTAL_ALIGNMENT_CENTER */\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\n    }\n\n    /** VERTICAL_ALIGNMENT_TOP */\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\n        return Control._VERTICAL_ALIGNMENT_TOP;\n    }\n\n    /** VERTICAL_ALIGNMENT_BOTTOM */\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\n    }\n\n    /** VERTICAL_ALIGNMENT_CENTER */\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\n        return Control._VERTICAL_ALIGNMENT_CENTER;\n    }\n\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\n\n    /** @hidden */\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\n\n        if (Control._FontHeightSizes[font]) {\n            return Control._FontHeightSizes[font];\n        }\n\n        var text = document.createElement(\"span\");\n        text.innerHTML = \"Hg\";\n        text.style.font = font;\n\n        var block = document.createElement(\"div\");\n        block.style.display = \"inline-block\";\n        block.style.width = \"1px\";\n        block.style.height = \"0px\";\n        block.style.verticalAlign = \"bottom\";\n\n        var div = document.createElement(\"div\");\n        div.appendChild(text);\n        div.appendChild(block);\n\n        document.body.appendChild(div);\n\n        var fontAscent = 0;\n        var fontHeight = 0;\n        try {\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n            block.style.verticalAlign = \"baseline\";\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n        } finally {\n            document.body.removeChild(div);\n        }\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\n        Control._FontHeightSizes[font] = result;\n\n        return result;\n    }\n\n    /**\n     * Creates a stack panel that can be used to render headers\n     * @param control defines the control to associate with the header\n     * @param text defines the text of the header\n     * @param size defines the size of the header\n     * @param options defines options used to configure the header\n     * @returns a new StackPanel\n     * @ignore\n     * @hidden\n     */\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\n\n    /** @hidden */\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\n        context.translate(x, y);\n        context.scale(width, height);\n\n        context.beginPath();\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\n        context.closePath();\n\n        context.scale(1 / width, 1 / height);\n        context.translate(-x, -y);\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Control\"] = Control;","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Logger } from \"@babylonjs/core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    public _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(context, invalidatedRectangle);\r\n        }\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Container\"] = Container;","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Rectangle\"] = Rectangle;","import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n\r\n                let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n\r\n                if (lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                    let lineSpacing = 0;\r\n                    if (this._lineSpacing.isPixel) {\r\n                        lineSpacing = this._lineSpacing.getValue(this._host);\r\n                    } else {\r\n                        lineSpacing = (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                    }\r\n\r\n                    newHeight += (lines.length - 1) * lineSpacing;\r\n                }\r\n\r\n                return newHeight;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.TextBlock\"] = TextBlock;","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _workingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will comsume more memory as the image has to be stored twice\r\n     */\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        let canvas = document.createElement('canvas');\r\n\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = height;\r\n        canvas.height = width;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate(n * Math.PI / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            let mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!this._workingCanvas) {\r\n            this._workingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && (value.search(/.svg#/gi) !== -1) && (value.indexOf(\"#\") === value.lastIndexOf(\"#\"))) {\r\n            this._isSVG = true;\r\n            var svgsrc = value.split('#')[0];\r\n            var elemid = value.split('#')[1];\r\n            // check if object alr exist in document\r\n            var svgExist = <HTMLObjectElement> document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                var svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    var vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    var docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    var docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    var elem = <SVGGraphicsElement> <unknown> svgDoc.getElementById(elemid);\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                var svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    var svgobj = <HTMLObjectElement> document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n\t * given external svg file and icon id\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        var svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            var vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            var docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            var docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            var elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                var vb_width = Number(vb.split(\" \")[2]);\r\n                var vb_height = Number(vb.split(\" \")[3]);\r\n                var elem_bbox = elem.getBBox();\r\n                var elem_matrix_a = 1;\r\n                var elem_matrix_d = 1;\r\n                var elem_matrix_e = 0;\r\n                var elem_matrix_f = 0;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = elem.transform.baseVal.consolidate().matrix.a;\r\n                    elem_matrix_d = elem.transform.baseVal.consolidate().matrix.d;\r\n                    elem_matrix_e = elem.transform.baseVal.consolidate().matrix.e;\r\n                    elem_matrix_f = elem.transform.baseVal.consolidate().matrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = (elem_bbox.width * elem_matrix_a) * (docwidth / vb_width);\r\n                this.sourceHeight = (elem_bbox.height * elem_matrix_d) * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const imageData = context.getImageData(0, 0, width, height).data;\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * this._currentMeasure.width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        if (!this._workingCanvas) {\r\n            this._workingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: CanvasRenderingContext2D, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage,\r\n            sx, sy, sw, sh,\r\n            tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage,\r\n            sx, sy, sw, sh,\r\n            tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        this._drawImage(context, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight);\r\n\r\n        // Borders\r\n        this._drawImage(context, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        this._drawImage(context, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        this._drawImage(context, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        this._drawImage(context, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Image\"] = Image;\r\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (var index = this._children.length - 1; index >= 0; index--) {\r\n                var child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control, force = false): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, force);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Button\"] = Button;","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layou warnings should be ignored\r\n     */\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._width.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.StackPanel\"] = StackPanel;","import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../measure';\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Checkbox\"] = Checkbox;\r\n","import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents\";\nimport { PointerInfo, PointerEventTypes } from '@babylonjs/core/Events/pointerEvents';\n\nimport { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\nimport { Measure } from '../measure';\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n    /** Force disable prompt on mobile device */\n    public disableMobilePrompt = false;\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1 && !this.disableMobilePrompt) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates, pointerId);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.InputText\"] = InputText;","import { Nullable } from \"@babylonjs/core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Tools } from '@babylonjs/core/Misc/tools';\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._childControls = [];\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Grid\"] = Grid;","import { Observable } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\n\nimport { Control } from \"./control\";\nimport { Measure } from \"../measure\";\nimport { InputText } from \"./inputText\";\nimport { Rectangle } from \"./rectangle\";\nimport { Button } from \"./button\";\nimport { Grid } from \"./grid\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { TextBlock } from \"../controls/textBlock\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    private _lastPointerDownID = -1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._value.toHSVToRef(this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                Color3.HSVtoRGBToRef(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n        this._lastPointerDownID = pointerId;\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number): void {\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\n        if (pointerId != this._lastPointerDownID) {\n            return;\n        }\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates, pointerId);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    /**\n     * This function expands the color picker by creating a color picker dialog with manual\n     * color value input and the ability to save colors into an array to be used later in\n     * subsequent launches of the dialogue.\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\n     * @returns picked color as a hex string and the saved colors array as hex strings.\n     */\n    public static ShowPickerDialogAsync(advancedTexture: AdvancedDynamicTexture,\n        options: {\n            pickerWidth?: string,\n            pickerHeight?: string,\n            headerHeight?: string,\n            lastColor?: string,\n            swatchLimit?: number,\n            numSwatchesPerLine?: number,\n            savedColors?: Array<string>\n        }\n    ): Promise<{\n        savedColors?: string[],\n        pickedColor: string\n    }> {\n\n        return new Promise((resolve, reject) => {\n            // Default options\n            options.pickerWidth = options.pickerWidth || \"640px\";\n            options.pickerHeight = options.pickerHeight || \"400px\";\n            options.headerHeight = options.headerHeight || \"35px\";\n            options.lastColor = options.lastColor || \"#000000\";\n            options.swatchLimit = options.swatchLimit || 20;\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\n\n            // Window size settings\n            var drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\n            var rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\n            var gutterSize: number = Math.floor(rawSwatchSize * 0.25);\n            var colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\n            var swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\n            var drawerMaxSize: number = (swatchSize * drawerMaxRows) + (gutterSize * (drawerMaxRows + 1));\n            var containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\n\n            // Button Colors\n            var buttonColor: string = \"#c0c0c0\";\n            var buttonBackgroundColor: string = \"#535353\";\n            var buttonBackgroundHoverColor: string = \"#414141\";\n            var buttonBackgroundClickColor: string = \"515151\";\n            var buttonDisabledColor: string = \"#555555\";\n            var buttonDisabledBackgroundColor: string = \"#454545\";\n            var currentSwatchesOutlineColor: string = \"#404040\";\n            var luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\n            var luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\n            var iconColorDark: string = \"#aaaaaa\";\n            var iconColorLight: string = \"#ffffff\";\n            var closeIconColor: Color3;\n\n            // Button settings\n            var buttonFontSize: number;\n            var butEdit: Button;\n            var buttonWidth: string;\n            var buttonHeight: string;\n\n            // Input Text Colors\n            var inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\n            var inputTextBackgroundColor: string = \"#454545\";\n            var inputTextColor: string = \"#f0f0f0\";\n\n            // This is the current color as set by either the picker or by entering a value\n            var currentColor: Color3;\n\n            // This int is used for naming swatches and serves as the index for calling them from the list\n            var swatchNumber: number;\n\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\n            var swatchDrawer: Grid;\n            var editSwatchMode: boolean = false;\n\n            // Color InputText fields that will be updated upon value change\n            var picker: ColorPicker;\n            var rValInt: InputText;\n            var gValInt: InputText;\n            var bValInt: InputText;\n            var rValDec: InputText;\n            var gValDec: InputText;\n            var bValDec: InputText;\n            var hexVal: InputText;\n            var newSwatch: Rectangle;\n            var lastVal: string;\n            var activeField: string;\n\n            /**\n            * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\n            * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\n            * are will receive no update. This is to prevent the input from the user being overwritten.\n            */\n            function updateValues(value: Color3, inputField: string) {\n                activeField = inputField;\n                var pickedColor: string = value.toHexString();\n                newSwatch.background = pickedColor;\n                if (rValInt.name != activeField) {\n                    rValInt.text = Math.floor(value.r * 255).toString();\n                }\n                if (gValInt.name != activeField) {\n                    gValInt.text = Math.floor(value.g * 255).toString();\n                }\n                if (bValInt.name != activeField) {\n                    bValInt.text = Math.floor(value.b * 255).toString();\n                }\n                if (rValDec.name != activeField) {\n                    rValDec.text = value.r.toString();\n                }\n                if (gValDec.name != activeField) {\n                    gValDec.text = value.g.toString();\n                }\n                if (bValDec.name != activeField) {\n                    bValDec.text = value.b.toString();\n                }\n                if (hexVal.name != activeField) {\n                    var minusPound: string[] = pickedColor.split(\"#\");\n                    hexVal.text = minusPound[1];\n                }\n                if (picker.name != activeField) {\n                    picker.value = value;\n                }\n            }\n\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateInt(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\") {\n                        if (Math.floor(parseInt(newValue)) < 0) {\n                            newValue = \"0\";\n                        }\n                        else if (Math.floor(parseInt(newValue)) > 255) {\n                            newValue = \"255\";\n                        }\n                        else if (isNaN(parseInt(newValue))) {\n                            newValue = \"0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\") {\n                    newValue = parseInt(newValue).toString();\n                    field.text = newValue;\n                    var newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\n                    if (activeField == field.name) {\n                        if (channel == \"r\") {\n                            updateValues(new Color3((parseInt(newValue)) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\n                        }\n                        else if (channel == \"g\") {\n                            updateValues(new Color3(newSwatchRGB.r, (parseInt(newValue)) / 255, newSwatchRGB.b), field.name);\n                        }\n                        else {\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, (parseInt(newValue)) / 255), field.name);\n                        }\n                    }\n                }\n            }\n\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateFloat(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9\\.]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                        if (parseFloat(newValue) < 0.0) {\n                            newValue = \"0.0\";\n                        }\n                        else if (parseFloat(newValue) > 1.0) {\n                            newValue = \"1.0\";\n                        }\n                        else if (isNaN(parseFloat(newValue))) {\n                            newValue = \"0.0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                    newValue = parseFloat(newValue).toString();\n                    field.text = newValue;\n                }\n                else {\n                    newValue = \"0.0\";\n                }\n                var newSwatchRGB = Color3.FromHexString(newSwatch.background);\n                if (activeField == field.name) {\n                    if (channel == \"r\") {\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\n                    }\n                    else if (channel == \"g\") {\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\n                    }\n                    else {\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\n                    }\n                }\n\n            }\n\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\n            function deleteSwatch(index: number) {\n                if (options.savedColors) {\n                    options.savedColors.splice(index, 1);\n                }\n                if (options.savedColors && options.savedColors.length == 0) {\n                    setEditButtonVisibility(false);\n                    editSwatchMode = false;\n                }\n            }\n\n            // Creates and styles an individual swatch when updateSwatches is called.\n            function createSwatch() {\n                if (options.savedColors && options.savedColors[swatchNumber]) {\n                    if (editSwatchMode) {\n                        var icon: string = \"b\";\n                    }\n                    else {\n                        var icon: string = \"\";\n                    }\n                    var swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\n                    swatch.fontFamily = \"BabylonJSglyphs\";\n                    var swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\n                    var swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\n\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\n                    if (swatchLuminence > luminanceLimit) {\n                        swatch.color = iconColorDark;\n                    }\n                    else {\n                        swatch.color = iconColorLight;\n                    }\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                    swatch.height = swatch.width = (swatchSize).toString() + \"px\";\n                    swatch.background = options.savedColors[swatchNumber];\n                    swatch.thickness = 2;\n                    let metadata = swatchNumber;\n                    swatch.pointerDownAnimation = () => {\n                        swatch.thickness = 4;\n                    };\n                    swatch.pointerUpAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerEnterAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerOutAnimation = () => {\n                        swatch.thickness = 2;\n                    };\n                    swatch.onPointerClickObservable.add(() => {\n                        if (!editSwatchMode) {\n                            if (options.savedColors) {\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\n                            }\n                        }\n                        else {\n                            deleteSwatch(metadata);\n                            updateSwatches(\"\", butSave);\n                        }\n                    });\n                    return swatch;\n                }\n                else {\n                    return null;\n                }\n            }\n\n            // Mode switch to render button text and close symbols on swatch controls\n            function editSwatches(mode?: boolean) {\n                if (mode !== undefined) {\n                    editSwatchMode = mode;\n                }\n                if (editSwatchMode) {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"b\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Done\";\n                    }\n                }\n                else {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Edit\";\n                    }\n                }\n            }\n\n            /**\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\n             * saved colors there are and how many can be stored per row.\n             */\n            function updateSwatches(color: string, button: Button) {\n                if (options.savedColors) {\n\n                    if (color != \"\") {\n                        options.savedColors.push(color);\n                    }\n                    swatchNumber = 0;\n                    swatchDrawer.clearControls();\n                    var rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\n                    if (rowCount == 0) {\n                        var gutterCount: number = 0;\n                    }\n                    else {\n                        var gutterCount: number = rowCount + 1;\n                    }\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\n                        var currentRows: number = swatchDrawer.rowCount;\n                        for (var i = 0; i < currentRows; i++) {\n                            swatchDrawer.removeRowDefinition(0);\n                        }\n                        for (var i = 0; i < rowCount + gutterCount; i++) {\n                            if (i % 2) {\n                                swatchDrawer.addRowDefinition(swatchSize, true);\n                            }\n                            else {\n                                swatchDrawer.addRowDefinition(gutterSize, true);\n                            }\n                        }\n                    }\n                    swatchDrawer.height = ((swatchSize * rowCount) + (gutterCount * gutterSize)).toString() + \"px\";\n\n                    for (var y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\n\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\n                            var totalButtonsThisRow = options.numSwatchesPerLine!;\n                        }\n                        else {\n                            var totalButtonsThisRow = options.savedColors.length - ((thisRow - 1) * options.numSwatchesPerLine!);\n                        }\n                        var buttonIterations: number = (Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!));\n                        for (var x = 0, w = 1; x < buttonIterations; x++) {\n                            if (x > options.numSwatchesPerLine!) {\n                                continue;\n                            }\n                            var swatch: Button | null = createSwatch();\n                            if (swatch != null) {\n                                swatchDrawer.addControl(swatch, y, w);\n                                w += 2;\n                                swatchNumber++;\n                            }\n                            else {\n                                continue;\n                            }\n                        }\n                    }\n                    if (options.savedColors.length >= options.swatchLimit!) {\n                        disableButton(button, true);\n                    }\n                    else {\n                        disableButton(button, false);\n                    }\n                }\n            }\n\n            // Shows or hides edit swatches button depending on if there are saved swatches\n            function setEditButtonVisibility(enableButton: boolean) {\n                if (enableButton) {\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\n                    butEdit.width = buttonWidth;\n                    butEdit.height = buttonHeight;\n                    butEdit.left = (Math.floor(parseInt(buttonWidth) * 0.1)).toString() + \"px\";\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n                    butEdit.thickness = 2;\n                    butEdit.color = buttonColor;\n                    butEdit.fontSize = buttonFontSize;\n                    butEdit.background = buttonBackgroundColor;\n                    butEdit.onPointerEnterObservable.add(() => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    });\n                    butEdit.onPointerOutObservable.add(() => {\n                        butEdit.background = buttonBackgroundColor;\n                    });\n                    butEdit.pointerDownAnimation = () => {\n                        butEdit.background = buttonBackgroundClickColor;\n                    };\n                    butEdit.pointerUpAnimation = () => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    };\n                    butEdit.onPointerClickObservable.add(() => {\n                        if (editSwatchMode) {\n                            editSwatchMode = false;\n                        }\n                        else {\n                            editSwatchMode = true;\n                        }\n                        editSwatches();\n                    });\n                    pickerGrid.addControl(butEdit, 1, 0);\n                }\n                else {\n                    pickerGrid.removeControl(butEdit);\n                }\n            }\n\n            // Called when the user hits the limit of saved colors in the drawer.\n            function disableButton(button: Button, disabled: boolean) {\n                if (disabled) {\n                    button.color = buttonDisabledColor;\n                    button.background = buttonDisabledBackgroundColor;\n                }\n                else {\n                    button.color = buttonColor;\n                    button.background = buttonBackgroundColor;\n                }\n            }\n\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\n            function closePicker(color: string) {\n                if (options.savedColors && options.savedColors.length > 0) {\n                    resolve({\n                        savedColors: options.savedColors,\n                        pickedColor: color\n                    });\n                }\n                else {\n                    resolve({\n                        pickedColor: color\n                    });\n                }\n                advancedTexture.removeControl(dialogContainer);\n            }\n\n            // Dialogue menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\n            var dialogContainer: Grid = new Grid();\n            dialogContainer.name = \"Dialog Container\";\n            dialogContainer.width = options.pickerWidth;\n            if (options.savedColors) {\n                dialogContainer.height = containerSize;\n                var topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\n                dialogContainer.addRowDefinition(topRow, false);\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\n            }\n            else {\n                dialogContainer.height = options.pickerHeight;\n                dialogContainer.addRowDefinition(1.0, false);\n            }\n            advancedTexture.addControl(dialogContainer);\n\n            // Swatch drawer which contains all saved color buttons\n            if (options.savedColors) {\n                swatchDrawer = new Grid();\n                swatchDrawer.name = \"Swatch Drawer\";\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n                swatchDrawer.background = buttonBackgroundColor;\n                swatchDrawer.width = options.pickerWidth!;\n                var initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\n                if (initialRows == 0) {\n                    var gutterCount: number = 0;\n                }\n                else {\n                    var gutterCount: number = initialRows + 1;\n                }\n                swatchDrawer.height = ((swatchSize * initialRows) + (gutterCount * gutterSize)).toString() + \"px\";\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\n                for (var i = 0; i < (Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2) + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addRowDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addRowDefinition(gutterSize, true);\n                    }\n                }\n                for (var i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\n                    }\n                }\n                dialogContainer.addControl(swatchDrawer, 1, 0);\n            }\n\n            // Picker container\n            var pickerPanel: Grid = new Grid();\n            pickerPanel.name = \"Picker Panel\";\n            pickerPanel.height = options.pickerHeight;\n            var panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\n            var pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\n            dialogContainer.addControl(pickerPanel, 0, 0);\n\n            // Picker container header\n            var header: Rectangle = new Rectangle();\n            header.name = \"Dialogue Header Bar\";\n            header.background = \"#cccccc\";\n            header.thickness = 0;\n            pickerPanel.addControl(header, 0, 0);\n\n            // Header close button\n            var closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\n            closeButton.fontFamily = \"BabylonJSglyphs\";\n            var headerColor3: Color3 = Color3.FromHexString(header.background);\n            closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\n            closeButton.color = closeIconColor.toHexString();\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\n            closeButton.height = closeButton.width = options.headerHeight;\n            closeButton.background = header.background;\n            closeButton.thickness = 0;\n            closeButton.pointerDownAnimation = () => {\n            };\n            closeButton.pointerUpAnimation = () => {\n                closeButton.background = header.background;\n            };\n            closeButton.pointerEnterAnimation = () => {\n                closeButton.color = header.background;\n                closeButton.background = \"red\";\n            };\n            closeButton.pointerOutAnimation = () => {\n                closeButton.color = closeIconColor.toHexString();\n                closeButton.background = header.background;\n            };\n            closeButton.onPointerClickObservable.add(() => {\n                closePicker(currentSwatch.background);\n            });\n            pickerPanel.addControl(closeButton, 0, 0);\n\n            // Dialog container body\n            var dialogBody: Grid = new Grid();\n            dialogBody.name = \"Dialogue Body\";\n            dialogBody.background = buttonBackgroundColor;\n            var dialogBodyCols: number[] = [0.4375, 0.5625];\n            dialogBody.addRowDefinition(1.0, false);\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\n            pickerPanel.addControl(dialogBody, 1, 0);\n\n            // Picker grid\n            var pickerGrid: Grid = new Grid();\n            pickerGrid.name = \"Picker Grid\";\n            pickerGrid.addRowDefinition(0.85, false);\n            pickerGrid.addRowDefinition(0.15, false);\n            dialogBody.addControl(pickerGrid, 0, 0);\n\n            //  Picker control\n            picker = new ColorPicker();\n            picker.name = \"GUI Color Picker\";\n            if (options.pickerHeight < options.pickerWidth) {\n                picker.width = 0.89;\n            }\n            else {\n                picker.height = 0.89;\n            }\n            picker.value = Color3.FromHexString(options.lastColor);\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            picker.onPointerDownObservable.add(() => {\n                activeField = picker.name!;\n                lastVal = \"\";\n                editSwatches(false);\n            });\n            picker.onValueChangedObservable.add(function(value) { // value is a color3\n                if (activeField == picker.name) {\n                    updateValues(value, picker.name);\n                }\n            });\n            pickerGrid.addControl(picker, 0, 0);\n\n            // Picker body right quarant\n            var pickerBodyRight: Grid = new Grid();\n            pickerBodyRight.name = \"Dialogue Right Half\";\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            var pickerBodyRightRows: number[] = [0.514, 0.486];\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\n            dialogBody.addControl(pickerBodyRight, 1, 1);\n\n            // Picker container swatches and buttons\n            var pickerSwatchesButtons: Grid = new Grid();\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\n            var pickerButtonsCol: number[] = [0.417, 0.583];\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\n\n            // Picker Swatches quadrant\n            var pickerSwatches: Grid = new Grid();\n            pickerSwatches.name = \"New and Current Swatches\";\n            var pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\n\n            // Active swatches\n            var activeSwatches: Grid = new Grid();\n            activeSwatches.name = \"Active Swatches\";\n            activeSwatches.width = 0.67;\n            activeSwatches.addRowDefinition(0.5, false);\n            activeSwatches.addRowDefinition(0.5, false);\n            pickerSwatches.addControl(activeSwatches, 2, 0);\n\n            var labelWidth: number = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11));\n            var labelHeight: number = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5));\n\n            if (options.pickerWidth > options.pickerHeight) {\n                var labelTextSize: number = labelHeight;\n            }\n            else {\n                var labelTextSize: number = labelWidth;\n            }\n            // New color swatch and previous color button\n            var newText: TextBlock = new TextBlock();\n            newText.text = \"new\";\n            newText.name = \"New Color Label\";\n            newText.color = buttonColor;\n            newText.fontSize = labelTextSize;\n            pickerSwatches.addControl(newText, 1, 0);\n\n            newSwatch = new Rectangle();\n            newSwatch.name = \"New Color Swatch\";\n            newSwatch.background = options.lastColor;\n            newSwatch.thickness = 0;\n            activeSwatches.addControl(newSwatch, 0, 0);\n\n            var currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\n            currentSwatch.background = options.lastColor;\n            currentSwatch.thickness = 0;\n            currentSwatch.onPointerClickObservable.add(() => {\n                var revertColor = Color3.FromHexString(currentSwatch.background);\n                updateValues(revertColor, currentSwatch.name!);\n                editSwatches(false);\n            });\n            currentSwatch.pointerDownAnimation = () => { };\n            currentSwatch.pointerUpAnimation = () => { };\n            currentSwatch.pointerEnterAnimation = () => { };\n            currentSwatch.pointerOutAnimation = () => { };\n            activeSwatches.addControl(currentSwatch, 1, 0);\n\n            var swatchOutline: Rectangle = new Rectangle();\n            swatchOutline.name = \"Swatch Outline\";\n            swatchOutline.width = 0.67;\n            swatchOutline.thickness = 2;\n            swatchOutline.color = currentSwatchesOutlineColor;\n            swatchOutline.isHitTestVisible = false;\n            pickerSwatches.addControl(swatchOutline, 2, 0);\n\n            var currentText: TextBlock = new TextBlock();\n            currentText.name = \"Current Color Label\";\n            currentText.text = \"current\";\n            currentText.color = buttonColor;\n            currentText.fontSize = labelTextSize;\n            pickerSwatches.addControl(currentText, 3, 0);\n\n            // Buttons grid\n            var buttonGrid: Grid = new Grid();\n            buttonGrid.name = \"Button Grid\";\n            buttonGrid.height = 0.8;\n            var buttonGridRows: number = 1 / 3;\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\n\n            // Determine pixel width and height for all buttons from overall panel dimensions\n            buttonWidth = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67)).toString() + \"px\";\n            buttonHeight = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7)).toString() + \"px\";\n\n            // Determine button type size\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\n            }\n            else {\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\n            }\n\n            // Panel Buttons\n            var butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\n            butOK.width = buttonWidth;\n            butOK.height = buttonHeight;\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butOK.thickness = 2;\n            butOK.color = buttonColor;\n            butOK.fontSize = buttonFontSize;\n            butOK.background = buttonBackgroundColor;\n            butOK.onPointerEnterObservable.add(() => { butOK.background = buttonBackgroundHoverColor; });\n            butOK.onPointerOutObservable.add(() => { butOK.background = buttonBackgroundColor; });\n            butOK.pointerDownAnimation = () => {\n                butOK.background = buttonBackgroundClickColor;\n            };\n            butOK.pointerUpAnimation = () => {\n                butOK.background = buttonBackgroundHoverColor;\n            };\n            butOK.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(newSwatch.background);\n            });\n            buttonGrid.addControl(butOK, 0, 0);\n\n            var butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\n            butCancel.width = buttonWidth;\n            butCancel.height = buttonHeight;\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butCancel.thickness = 2;\n            butCancel.color = buttonColor;\n            butCancel.fontSize = buttonFontSize;\n            butCancel.background = buttonBackgroundColor;\n            butCancel.onPointerEnterObservable.add(() => { butCancel.background = buttonBackgroundHoverColor; });\n            butCancel.onPointerOutObservable.add(() => { butCancel.background = buttonBackgroundColor; });\n            butCancel.pointerDownAnimation = () => {\n                butCancel.background = buttonBackgroundClickColor;\n            };\n            butCancel.pointerUpAnimation = () => {\n                butCancel.background = buttonBackgroundHoverColor;\n            };\n            butCancel.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(currentSwatch.background);\n            });\n            buttonGrid.addControl(butCancel, 1, 0);\n\n            if (options.savedColors) {\n                var butSave: Button = Button.CreateSimpleButton(\"butSave\", \"Save\");\n                butSave.width = buttonWidth;\n                butSave.height = buttonHeight;\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                butSave.thickness = 2;\n                butSave.fontSize = buttonFontSize;\n                if (options.savedColors.length < options.swatchLimit!) {\n                    butSave.color = buttonColor;\n                    butSave.background = buttonBackgroundColor;\n                }\n                else {\n                    disableButton(butSave, true);\n                }\n                butSave.onPointerEnterObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                });\n                butSave.onPointerOutObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundColor;\n                        }\n                    }\n                });\n                butSave.pointerDownAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundClickColor;\n                        }\n                    }\n                };\n                butSave.pointerUpAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                };\n                butSave.onPointerClickObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length == 0) {\n                            setEditButtonVisibility(true);\n                        }\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            updateSwatches(newSwatch.background, butSave);\n                        }\n                        editSwatches(false);\n                    }\n                });\n                if (options.savedColors.length > 0) {\n                    setEditButtonVisibility(true);\n                }\n                buttonGrid.addControl(butSave, 2, 0);\n            }\n\n            // Picker color values input\n            var pickerColorValues: Grid = new Grid();\n            pickerColorValues.name = \"Dialog Lower Right\";\n            pickerColorValues.addRowDefinition(0.02, false);\n            pickerColorValues.addRowDefinition(0.63, false);\n            pickerColorValues.addRowDefinition(0.21, false);\n            pickerColorValues.addRowDefinition(0.14, false);\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\n\n            // RGB values text boxes\n            currentColor = Color3.FromHexString(options.lastColor);\n            var rgbValuesQuadrant: Grid = new Grid();\n            rgbValuesQuadrant.name = \"RGB Values\";\n            rgbValuesQuadrant.width = 0.82;\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\n\n            for (var i = 0; i < inputFieldLabels.length; i++) {\n                var labelText: TextBlock = new TextBlock();\n                labelText.text = inputFieldLabels[i];\n                labelText.color = buttonColor;\n                labelText.fontSize = buttonFontSize;\n                rgbValuesQuadrant.addControl(labelText, i, 0);\n            }\n\n            // Input fields for RGB values\n            rValInt = new InputText();\n            rValInt.width = 0.83;\n            rValInt.height = 0.72;\n            rValInt.name = \"rIntField\";\n            rValInt.fontSize = buttonFontSize;\n            rValInt.text = (currentColor.r * 255).toString();\n            rValInt.color = inputTextColor;\n            rValInt.background = inputTextBackgroundColor;\n            rValInt.onFocusObservable.add(() => {\n                activeField = rValInt.name!;\n                lastVal = rValInt.text;\n                editSwatches(false);\n            });\n            rValInt.onBlurObservable.add(() => {\n                if (rValInt.text == \"\") {\n                    rValInt.text = \"0\";\n                }\n                updateInt(rValInt, \"r\");\n                if (activeField == rValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            rValInt.onTextChangedObservable.add(() => {\n                if (activeField == rValInt.name) {\n                    updateInt(rValInt, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\n\n            gValInt = new InputText();\n            gValInt.width = 0.83;\n            gValInt.height = 0.72;\n            gValInt.name = \"gIntField\";\n            gValInt.fontSize = buttonFontSize;\n            gValInt.text = (currentColor.g * 255).toString();\n            gValInt.color = inputTextColor;\n            gValInt.background = inputTextBackgroundColor;\n            gValInt.onFocusObservable.add(() => {\n                activeField = gValInt.name!;\n                lastVal = gValInt.text;\n                editSwatches(false);\n            });\n            gValInt.onBlurObservable.add(() => {\n                if (gValInt.text == \"\") {\n                    gValInt.text = \"0\";\n                }\n                updateInt(gValInt, \"g\");\n                if (activeField == gValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            gValInt.onTextChangedObservable.add(() => {\n                if (activeField == gValInt.name) {\n                    updateInt(gValInt, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\n\n            bValInt = new InputText();\n            bValInt.width = 0.83;\n            bValInt.height = 0.72;\n            bValInt.name = \"bIntField\";\n            bValInt.fontSize = buttonFontSize;\n            bValInt.text = (currentColor.b * 255).toString();\n            bValInt.color = inputTextColor;\n            bValInt.background = inputTextBackgroundColor;\n            bValInt.onFocusObservable.add(() => {\n                activeField = bValInt.name!;\n                lastVal = bValInt.text;\n                editSwatches(false);\n            });\n            bValInt.onBlurObservable.add(() => {\n                if (bValInt.text == \"\") {\n                    bValInt.text = \"0\";\n                }\n                updateInt(bValInt, \"b\");\n                if (activeField == bValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            bValInt.onTextChangedObservable.add(() => {\n                if (activeField == bValInt.name) {\n                    updateInt(bValInt, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\n\n            rValDec = new InputText();\n            rValDec.width = 0.95;\n            rValDec.height = 0.72;\n            rValDec.name = \"rDecField\";\n            rValDec.fontSize = buttonFontSize;\n            rValDec.text = currentColor.r.toString();\n            rValDec.color = inputTextColor;\n            rValDec.background = inputTextBackgroundColor;\n            rValDec.onFocusObservable.add(() => {\n                activeField = rValDec.name!;\n                lastVal = rValDec.text;\n                editSwatches(false);\n            });\n            rValDec.onBlurObservable.add(() => {\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\n                    rValDec.text = \"0\";\n                    updateFloat(rValDec, \"r\");\n                }\n                if (activeField == rValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            rValDec.onTextChangedObservable.add(() => {\n                if (activeField == rValDec.name) {\n                    updateFloat(rValDec, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\n\n            gValDec = new InputText();\n            gValDec.width = 0.95;\n            gValDec.height = 0.72;\n            gValDec.name = \"gDecField\";\n            gValDec.fontSize = buttonFontSize;\n            gValDec.text = currentColor.g.toString();\n            gValDec.color = inputTextColor;\n            gValDec.background = inputTextBackgroundColor;\n            gValDec.onFocusObservable.add(() => {\n                activeField = gValDec.name!;\n                lastVal = gValDec.text;\n                editSwatches(false);\n            });\n            gValDec.onBlurObservable.add(() => {\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\n                    gValDec.text = \"0\";\n                    updateFloat(gValDec, \"g\");\n                }\n                if (activeField == gValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            gValDec.onTextChangedObservable.add(() => {\n                if (activeField == gValDec.name) {\n                    updateFloat(gValDec, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\n\n            bValDec = new InputText();\n            bValDec.width = 0.95;\n            bValDec.height = 0.72;\n            bValDec.name = \"bDecField\";\n            bValDec.fontSize = buttonFontSize;\n            bValDec.text = currentColor.b.toString();\n            bValDec.color = inputTextColor;\n            bValDec.background = inputTextBackgroundColor;\n            bValDec.onFocusObservable.add(() => {\n                activeField = bValDec.name!;\n                lastVal = bValDec.text;\n                editSwatches(false);\n            });\n            bValDec.onBlurObservable.add(() => {\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\n                    bValDec.text = \"0\";\n                    updateFloat(bValDec, \"b\");\n                }\n                if (activeField == bValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            bValDec.onTextChangedObservable.add(() => {\n                if (activeField == bValDec.name) {\n                    updateFloat(bValDec, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\n\n            // Hex value input\n            var hexValueQuadrant: Grid = new Grid();\n            hexValueQuadrant.name = \"Hex Value\";\n            hexValueQuadrant.width = 0.82;\n            hexValueQuadrant.addRowDefinition(1.0, false);\n            hexValueQuadrant.addColumnDefinition(0.1, false);\n            hexValueQuadrant.addColumnDefinition(0.9, false);\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\n\n            var labelText: TextBlock = new TextBlock();\n            labelText.text = \"#\";\n            labelText.color = buttonColor;\n            labelText.fontSize = buttonFontSize;\n            hexValueQuadrant.addControl(labelText, 0, 0);\n\n            hexVal = new InputText();\n            hexVal.width = 0.96;\n            hexVal.height = 0.72;\n            hexVal.name = \"hexField\";\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            hexVal.fontSize = buttonFontSize;\n            var minusPound = options.lastColor.split(\"#\");\n            hexVal.text = minusPound[1];\n            hexVal.color = inputTextColor;\n            hexVal.background = inputTextBackgroundColor;\n            hexVal.onFocusObservable.add(() => {\n                activeField = hexVal.name!;\n                lastVal = hexVal.text;\n                editSwatches(false);\n            });\n            hexVal.onBlurObservable.add(() => {\n                if (hexVal.text.length == 3) {\n                    var val = hexVal.text.split(\"\");\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                }\n                if (hexVal.text == \"\") {\n                    hexVal.text = \"000000\";\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\n                }\n                if (activeField == hexVal.name) {\n                    activeField = \"\";\n                }\n            });\n            hexVal.onTextChangedObservable.add(() => {\n                var newHexValue: string = hexVal.text;\n                var checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\n                    hexVal.text = lastVal;\n                }\n                else {\n                    if (hexVal.text.length < 6) {\n                        var leadingZero: Number = 6 - hexVal.text.length;\n                        for (var i = 0; i < leadingZero; i++) {\n                            newHexValue = \"0\" + newHexValue;\n                        }\n                    }\n                    if (hexVal.text.length == 3) {\n                        var val: string[] = hexVal.text.split(\"\");\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                    }\n                    newHexValue = \"#\" + newHexValue;\n                    if (activeField == hexVal.name) {\n                        lastVal = hexVal.text;\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\n                    }\n                }\n            });\n            hexValueQuadrant.addControl(hexVal, 0, 1);\n\n            if (options.savedColors && options.savedColors.length > 0) {\n                updateSwatches(\"\", butSave!);\n            }\n        });\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ColorPicker\"] = ColorPicker;","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Ellipse\"] = Ellipse;","import { InputText } from \"./inputText\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.InputPassword\"] = InputPassword;","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Line\"] = Line;\r\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\n\r\nimport { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.MultiLine\"] = MultiLine;\r\n","import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.RadioButton\"] = RadioButton;","import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownID = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n\r\n        const mult = (1 / this._step) | 0;\r\n        this.value = this._step ? ((value * mult) | 0) / mult : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownID = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownID) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../../measure';\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Slider\"] = Slider;","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number;\r\n    private _oldTop: number;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        var textureSize = this.host.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        var context = this.host.getContext();\r\n\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            let bStartX = Math.max(0, Math.floor((child._currentMeasure.left - this._currentMeasure.left) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bStartY = Math.max(0, Math.floor((child._currentMeasure.top - this._currentMeasure.top) / this._bucketHeight)),\r\n                bEndY = Math.floor((child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height - 1) / this._bucketHeight);\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    let bucket = bStartY * this._bucketLen + x,\r\n                        lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        let left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        let bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bStartY = Math.max(0, Math.floor(-top / this._bucketHeight)),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                let bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        let child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        let left = this.leftInPixels,\r\n            top = this.topInPixels;\r\n\r\n        if (this._useBuckets()) {\r\n            this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n            this._scrollChildrenWithBuckets(left, top, left, top);\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (var child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"../control\";\r\nimport { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        }\r\n        else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    var rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        }\r\n        else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);\r\n        }\r\n        else {\r\n            this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { Measure } from \"../../measure\";\r\nimport { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        }\r\n        else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        let ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        let hb = <ScrollBar>this._horizontalBar;\r\n        let vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        if (this._barBackgroundImage === value) {\r\n        }\r\n\r\n        this._barBackgroundImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        if (this._horizontalBarBackgroundImage === value) {\r\n        }\r\n\r\n        this._horizontalBarBackgroundImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        if (this._verticalBarBackgroundImage === value) {\r\n        }\r\n\r\n        this._verticalBarBackgroundImage = value;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(): void {\r\n        let ratio = this.host.idealRatio;\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        let ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength *  0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add((value) => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ScrollViewer\"] = ScrollViewer;","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        var maxKey: Nullable<Button> = null;\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            var key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.VirtualKeyboard\"] = VirtualKeyboard;\r\n","import { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../measure';\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.DisplayGrid\"] = DisplayGrid;","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ImageBasedSlider\"] = ImageBasedSlider;","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { IDisposable } from \"@babylonjs/core/scene\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { PointerInfoPre, PointerInfo, PointerEventTypes } from '@babylonjs/core/Events/pointerEvents';\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents\";\nimport { KeyboardInfoPre, KeyboardEventTypes } from \"@babylonjs/core/Events/keyboardEvents\";\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { Layer } from \"@babylonjs/core/Layers/layer\";\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nimport { Container } from \"./controls/container\";\nimport { Control } from \"./controls/control\";\nimport { Style } from \"./style\";\nimport { Measure } from \"./measure\";\nimport { Constants } from '@babylonjs/core/Engines/constants';\nimport { Viewport } from '@babylonjs/core/Maths/math.viewport';\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\n/**\n* Interface used to define a control that can receive focus\n*/\nexport interface IFocusableControl {\n    /**\n     * Function called when the control receives the focus\n     */\n    onFocus(): void;\n    /**\n     * Function called when the control loses the focus\n     */\n    onBlur(): void;\n    /**\n     * Function called to let the control handle keyboard events\n     * @param evt defines the current keyboard event\n     */\n    processKeyboard(evt: KeyboardEvent): void;\n    /**\n    * Function called to get the list of controls that should not steal the focus from this control\n    * @returns an array of controls\n    */\n    keepsFocusWith(): Nullable<Control[]>;\n}\n/**\n* Class used to create texture to support 2D GUI elements\n* @see http://doc.babylonjs.com/how_to/gui\n*/\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    private _isDirty = false;\n    private _renderObserver: Nullable<Observer<Camera>>;\n    private _resizeObserver: Nullable<Observer<Engine>>;\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\n    private _background: string;\n    /** @hidden */\n    public _rootContainer = new Container(\"root\");\n    /** @hidden */\n    public _lastPickedControl: Control;\n    /** @hidden */\n    public _lastControlOver: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _lastControlDown: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _capturingControl: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _shouldBlockPointer: boolean;\n    /** @hidden */\n    public _layerToDispose: Nullable<Layer>;\n    /** @hidden */\n    public _linkedControls = new Array<Control>();\n    private _isFullscreen = false;\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\n    private _idealWidth = 0;\n    private _idealHeight = 0;\n    private _useSmallestIdeal: boolean = false;\n    private _renderAtIdealSize = false;\n    private _focusedControl: Nullable<IFocusableControl>;\n    private _blockNextFocusCheck = false;\n    private _renderScale = 1;\n    private _rootElement: Nullable<HTMLElement>;\n    private _cursorChanged = false;\n    private _defaultMousePointerId = 0;\n\n    /** @hidden */\n    public _numLayoutCalls = 0;\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\n    public get numLayoutCalls(): number {\n        return this._numLayoutCalls;\n    }\n\n    /** @hidden */\n    public _numRenderCalls = 0;\n    /** Gets the number of render calls made the last time the ADT has been rendered */\n    public get numRenderCalls(): number {\n        return this._numRenderCalls;\n    }\n\n    /**\n    * Define type to string to ensure compatibility across browsers\n    * Safari doesn't support DataTransfer constructor\n    */\n    private _clipboardData: string = \"\";\n    /**\n    * Observable event triggered each time an clipboard event is received from the rendering canvas\n    */\n    public onClipboardObservable = new Observable<ClipboardInfo>();\n    /**\n    * Observable event triggered each time a pointer down is intercepted by a control\n    */\n    public onControlPickedObservable = new Observable<Control>();\n    /**\n    * Observable event triggered before layout is evaluated\n    */\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the layout was evaluated\n    */\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered before the texture is rendered\n    */\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the texture was rendered\n    */\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Gets or sets a boolean defining if alpha is stored as premultiplied\n    */\n    public premulAlpha = false;\n    /**\n    * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n    * Useful when you want more antialiasing\n    */\n    public get renderScale(): number {\n        return this._renderScale;\n    }\n    public set renderScale(value: number) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n    * Gets or sets the ideal width used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealWidth(): number {\n        return this._idealWidth;\n    }\n    public set idealWidth(value: number) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets the ideal height used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealHeight(): number {\n        return this._idealHeight;\n    }\n    public set idealHeight(value: number) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get useSmallestIdeal(): boolean {\n        return this._useSmallestIdeal;\n    }\n    public set useSmallestIdeal(value: boolean) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if adaptive scaling must be used\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get renderAtIdealSize(): boolean {\n        return this._renderAtIdealSize;\n    }\n    public set renderAtIdealSize(value: boolean) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n\n    /**\n     * Gets the ratio used when in \"ideal mode\"\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n     * */\n    public get idealRatio(): number {\n        var rwidth: number = 0;\n        var rheight: number = 0;\n\n        if (this._idealWidth) {\n            rwidth = (this.getSize().width) / this._idealWidth;\n        }\n\n        if (this._idealHeight) {\n            rheight = (this.getSize().height) / this._idealHeight;\n        }\n\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\n        }\n\n        if (this._idealWidth) { // horizontal\n            return rwidth;\n        }\n\n        if (this._idealHeight) { // vertical\n            return rheight;\n        }\n\n        return 1;\n    }\n\n    /**\n    * Gets the underlying layer used to render the texture when in fullscreen mode\n    */\n    public get layer(): Nullable<Layer> {\n        return this._layerToDispose;\n    }\n    /**\n    * Gets the root container control\n    */\n    public get rootContainer(): Container {\n        return this._rootContainer;\n    }\n    /**\n    * Returns an array containing the root container.\n    * This is mostly used to let the Inspector introspects the ADT\n    * @returns an array containing the rootContainer\n    */\n    public getChildren(): Array<Container> {\n        return [this._rootContainer];\n    }\n    /**\n    * Will return all controls that are inside this texture\n    * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n    * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n    * @return all child controls\n    */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n    * Gets or sets the current focused control\n    */\n    public get focusedControl(): Nullable<IFocusableControl> {\n        return this._focusedControl;\n    }\n    public set focusedControl(control: Nullable<IFocusableControl>) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n    * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n    */\n    public get isForeground(): boolean {\n        if (!this.layer) {\n            return true;\n        }\n        return (!this.layer.isBackground);\n    }\n    public set isForeground(value: boolean) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n    * Gets or set information about clipboardData\n    */\n    public get clipboardData(): string {\n        return this._clipboardData;\n    }\n    public set clipboardData(value: string) {\n        this._clipboardData = value;\n    }\n    /**\n   * Creates a new AdvancedDynamicTexture\n   * @param name defines the name of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n   * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n   */\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA);\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this._rootElement = scene.getEngine()!.getInputElement()!;\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"AdvancedDynamicTexture\"\n    */\n    public getClassName(): string {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n    * Function used to execute a function on all controls\n    * @param func defines the function to execute\n    * @param container defines the container where controls belong. If null the root container will be used\n    */\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (var child of container.children) {\n            if ((<any>child).children) {\n                this.executeOnAllControls(func, (<Container>child));\n                continue;\n            }\n            func(child);\n        }\n    }\n\n    private _useInvalidateRectOptimization = true;\n\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    public get useInvalidateRectOptimization(): boolean {\n        return this._useInvalidateRectOptimization;\n    }\n\n    public set useInvalidateRectOptimization(value: boolean) {\n        this._useInvalidateRectOptimization = value;\n    }\n\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\n    private _invalidatedRectangle: Nullable<Measure> = null;\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\n     */\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._invalidatedRectangle) {\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\n        } else {\n            // Compute intersection\n            var maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\n            var maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n    * Marks the texture as dirty forcing a complete update\n    */\n    public markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n    * Helper function used to create a new style\n    * @returns a new style\n    * @see http://doc.babylonjs.com/how_to/gui#styles\n    */\n    public createStyle(): Style {\n        return new Style(this);\n    }\n    /**\n    * Adds a new control to the root container\n    * @param control defines the control to add\n    * @returns the current texture\n    */\n    public addControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n    * Removes a control from the root container\n    * @param control defines the control to remove\n    * @returns the current texture\n    */\n    public removeControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n    * Release all resources\n    */\n    public dispose(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootElement = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._pointerMoveObserver) {\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        super.dispose();\n    }\n    private _onResize(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            } else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @hidden */\n    public _getGlobalViewport(scene: Scene): Viewport {\n        var engine = scene.getEngine();\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position\n    */\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector2.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector2(projectedPosition.x, projectedPosition.y);\n    }\n    private _checkUpdate(camera: Camera): void {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            var globalViewport = this._getGlobalViewport(scene);\n            for (var control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                var mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                var position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                // Account for RenderScale.\n                projectedPosition.scaleInPlace(this.renderScale);\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render();\n        this.update(true, this.premulAlpha);\n    }\n\n    private _clearMeasure = new Measure(0, 0, 0, 0);\n\n    private _render(): void {\n        var textureSize = this.getSize();\n        var renderWidth = textureSize.width;\n        var renderHeight = textureSize.height;\n\n        var context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._numLayoutCalls = 0;\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n\n        // Clear\n        if (this._invalidatedRectangle) {\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\n        } else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._numRenderCalls = 0;\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._invalidatedRectangle = null;\n    }\n    /** @hidden */\n    public _changeCursor(cursor: string) {\n        if (this._rootElement) {\n            this._rootElement.style.cursor = cursor;\n            this._cursorChanged = true;\n        }\n    }\n    /** @hidden */\n    public _registerLastControlDown(control: Control, pointerId: number) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        if (this._isFullscreen) {\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let viewport = camera!.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\n            return;\n        }\n\n        this._cursorChanged = false;\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex, deltaX, deltaY)) {\n            this._changeCursor(\"\");\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n\n        if (!this._cursorChanged) {\n            this._changeCursor(\"\");\n        }\n        this._manageFocus();\n    }\n    /** @hidden */\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\n        for (var pointerId in list) {\n            if (!list.hasOwnProperty(pointerId)) {\n                continue;\n            }\n            var lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /** @hidden */\n    public _cleanControlAfterRemoval(control: Control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /** Attach to all scene events required to support pointer events */\n    public attach(): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n\n        let tempViewport = new Viewport(0, 0, 0, 0);\n\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN\n                && pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (!scene) {\n                return;\n            }\n\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as PointerEvent).pointerId) {\n                this._defaultMousePointerId = (pi.event as PointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\n            }\n\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let engine = scene.getEngine();\n\n            if (!camera) {\n                tempViewport.x = 0;\n                tempViewport.y = 0;\n                tempViewport.width = engine.getRenderWidth();\n                tempViewport.height = engine.getRenderHeight();\n            } else {\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\n            }\n\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - tempViewport.x;\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\n            this._shouldBlockPointer = false;\n            // Do picking modifies _shouldBlockPointer\n            let pointerId = (pi.event as PointerEvent).pointerId || this._defaultMousePointerId;\n            this._doPicking(x, y, pi.type, pointerId, pi.event.button, (<MouseWheelEvent>pi.event).deltaX, (<MouseWheelEvent>pi.event).deltaY);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer) {\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\n            }\n        });\n        this._attachToOnPointerOut(scene);\n    }\n    /** @hidden */\n    private onClipboardCopy = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardCut = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardPaste = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /**\n    * Register the clipboard Events onto the canvas\n    */\n    public registerClipboardEvents(): void {\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    public unRegisterClipboardEvents(): void {\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\n        self.removeEventListener(\"cut\", this.onClipboardCut);\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\n    }\n    /**\n    * Connect the texture to a hosting mesh to enable interactions\n    * @param mesh defines the mesh to attach to\n    * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n    */\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n\n            var pointerId = (pi.event as PointerEvent).pointerId || this._defaultMousePointerId;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                var uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    let size = this.getSize();\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\n                }\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (var control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachToOnPointerOut(scene);\n    }\n    /**\n    * Move the focus to a specific control\n    * @param control defines the control which will receive the focus\n    */\n    public moveFocusToControl(control: IFocusableControl): void {\n        this.focusedControl = control;\n        this._lastPickedControl = <any>control;\n        this._blockNextFocusCheck = true;\n    }\n    private _manageFocus(): void {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = <any>this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    private _attachToOnPointerOut(scene: Scene): void {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    // Statics\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = result;\n            material.emissiveTexture = result;\n            result.hasAlpha = true;\n        } else {\n            material.emissiveTexture = result;\n            material.opacityTexture = result;\n        }\n        mesh.material = material;\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n    * Creates a new AdvancedDynamicTexture in fullscreen mode.\n    * In this mode the texture will rely on a layer for its rendering.\n    * This allows it to be treated like any other layer.\n    * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n    * LayerMask is set through advancedTexture.layer.layerMask\n    * @param name defines name for the texture\n    * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n    * @param scene defines the hsoting scene\n    * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n    * @returns a new AdvancedDynamicTexture\n    */\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        // Attach\n        result.attach();\n        return result;\n    }\n}\n","\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { PerfCounter } from \"@babylonjs/core/Misc/perfCounter\";\r\nimport { IDisposable } from \"@babylonjs/core/scene\";\r\n\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}","import { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n* Class used to load GUI via XML.\r\n*/\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        \"textHorizontalAlignment\": 1,\r\n        \"textVerticalAlignment\": 2,\r\n        \"horizontalAlignment\": 3,\r\n        \"verticalAlignment\": 4,\r\n        \"stretch\": 5,\r\n    };\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n    * Create a new xml loader\r\n    * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n    */\r\n    constructor(parentClass = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = _TypeStore.GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            let className = _TypeStore.GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            let guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n\r\n                    let element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    let element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = (node.attributes[i].value == 'true');\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n\r\n        } catch (e) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + e + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        let rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        let dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            let splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (let i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        let guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n    */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n    */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n    */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param callback defines the callback called on layout load.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, callback: any): void {\r\n        let xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function(this: XmlLoader) {\r\n            if (xhttp.readyState == 4 && xhttp.status == 200) {\r\n                if (!xhttp.responseXML) {\r\n                    throw \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n                }\r\n\r\n                let xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        }.bind(this);\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n}","import { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { IBehaviorAware, Behavior } from \"@babylonjs/core/Behaviors/behavior\";\r\nimport { IDisposable, Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            this._downCount++;\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { int, Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector4 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { BoxBuilder } from \"@babylonjs/core/Meshes/Builders/boxBuilder\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n        else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = BoxBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { int } from \"@babylonjs/core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = TmpVectors.Vector3[0];\r\n            let diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from '@babylonjs/core/Maths/math.axis';\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\n\nlet name = 'fluentVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 world;\nuniform mat4 viewProjection;\nvarying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float borderWidth;\nuniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {\nvUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;\nfloat minScale=min(min(scale.x,scale.y),scale.z);\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\nfloat areaYZ=scale.y*scale.z;\nfloat areaXZ=scale.x*scale.z;\nfloat areaXY=scale.x*scale.y;\nfloat scaledBorderWidth=borderWidth;\nif (abs(normal.x) == 1.0)\n{\nscale.x=scale.y;\nscale.y=scale.z;\nif (areaYZ>areaXZ && areaYZ>areaXY)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse if (abs(normal.y) == 1.0)\n{\nscale.x=scale.z;\nif (areaXZ>areaXY && areaXZ>areaYZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse\n{\nif (areaXY>areaYZ && areaXY>areaXZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\nif (scale.x>scale.y)\n{\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\nscaleInfo.y=1.0-scaledBorderWidth;\n}\nelse\n{\nscaleInfo.x=1.0-scaledBorderWidth;\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\n}\n#endif\nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var fluentVertexShader = { name, shader };\n","import { Effect } from \"@babylonjs/core/Materials/effect\";\n\nlet name = 'fluentPixelShader';\nlet shader = `precision highp float;\nvarying vec2 vUV;\nuniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float edgeSmoothingValue;\nuniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\nuniform vec3 hoverPosition;\nuniform vec4 hoverColor;\nuniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;\n#endif\nvoid main(void) {\nvec3 albedo=albedoColor.rgb;\nfloat alpha=albedoColor.a;\n#ifdef TEXTURE\nalbedo=texture2D(albedoSampler,vUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER\nfloat borderPower=10.0;\nfloat inverseBorderPower=1.0/borderPower;\nvec3 borderColor=albedo*borderPower;\nvec2 distanceToEdge;\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover);\nalbedo+=borderColor;\nalpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\n\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\nuvGlow=uvGlow*uvGlow;\nuvGlow=uvGlow*uvGlow;\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y);\n#endif\ngl_FragColor=vec4(albedo,alpha);\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var fluentPixelShader = { name, shader };\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Vector3, Matrix, TmpVectors } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Color3, Color4 } from '@babylonjs/core/Maths/math.color';\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.FluentMaterial\"] = FluentMaterial;","import { Button3D } from \"./button3D\";\r\n\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { PlaneBuilder } from \"@babylonjs/core/Meshes/Builders/planeBuilder\";\r\nimport { BoxBuilder } from \"@babylonjs/core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = PlaneBuilder.CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            var tooltipBackground = PlaneBuilder.CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = BoxBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = BoxBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = TmpVectors.Vector2[0];\r\n            let difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from '@babylonjs/core/Maths/math.axis';\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { PointerInfo, PointerEventTypes } from '@babylonjs/core/Events/pointerEvents';\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"@babylonjs/core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore\";\r\nimport { IDisposable, Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}